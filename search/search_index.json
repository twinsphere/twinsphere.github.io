{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"twinsphere Documentation This is the technical documentation of twinsphere by conplement AG \u29c9 . twinsphere is a software suite for creation, validation, hosting, viewing and interaction with industrial digital twins in form of Asset Administration Shells \u29c9 . Our twinsphere suite consists of multiple applications and libraries: twinsphere ID Cloud Studio Viewer Management API Development Libraries Validators","title":"Home"},{"location":"#twinsphere-documentation","text":"This is the technical documentation of twinsphere by conplement AG \u29c9 . twinsphere is a software suite for creation, validation, hosting, viewing and interaction with industrial digital twins in form of Asset Administration Shells \u29c9 . Our twinsphere suite consists of multiple applications and libraries: twinsphere ID Cloud Studio Viewer Management API Development Libraries Validators","title":"twinsphere Documentation"},{"location":"cloud-auth/","text":"Authentication twinsphere cloud supports two authentication strategies: using twinsphere ID , which is the default built-in authentication provider. Both user and service account authentication modes are supported, consult the twinsphere ID documentation for more information. using identity federation as an additional authentication provider Identity provider federation For tighter integration in your authentication and authorization systems, twinsphere cloud supports adding external identity provider configuration onto the platform. You identity provider configuration will be added as an additional configuration, it will not completely replace the usage of twinsphere ID which is still required for internal purposes! Supported authentication providers for twinsphere cloud are: Microsoft Entra ID OAuth2 Microsoft Entra ID OAuth2 federation The Entra ID (former known as Azure AD) integration allows you to use a Microsoft Entra ID tenant as an identity provider for twinsphere. Besides allowing your own users to log in, you can also use Entra ID application roles to assign users and groups to twinsphere roles from your own Microsoft Entra ID portal. You can also connect your Entra ID applications and fully integrate twinsphere into your ecosystem. In general, you need to create two Azure app registrations. One for the API service and one for the viewer, which acts as client for the API. If you don't use the twinsphere viewer, you can skip the viewer configuration section. Prerequisites The following steps require you to sign in as a user that is authorized to consent on behalf of the organization. For this, a user with the following roles is needed: Privileged Role Administrator Cloud Application Administrator or Application Administrator Log in to your Microsoft Entra admin center \u29c9 If you have access to more than one tenant, select your account in the upper right. Set your session to the Entra ID tenant you wish to use. App registration for the twinsphere API Under Identity > Applications in the side menu, click App registrations > New Registration . Enter a descriptive name e.g. twinsphere-api-app As Supported account types let the default setting Accounts in this organizational directory only . Click Register . Note the Application ID . Click on Manifest and in the Tab Microsoft Graph App Manifest change the property requestedAccessTokenVersion in the json (under api ) editor to 2 and hit the Save button. Navigate to Overview in the created app registration and click on Endpoints in top of the menu. Note the Authority URL (Accounts in this organizational directory only) URI Define the required application roles (under App roles ). Display name Value Description Allowed member types Reader reader Read data Both (Users / Groups + Applications) Contributor contributor Write data Both (Users / Groups + Applications) Make sure the values are typed exactly as above (lowercase!). Click Expose and API under Manage section. Click Add a scope . Leave the Application ID URI as it is, should be a value like \"api:// <application id> \" and click Save and continue . In the next windows set the following values: Set Scope name to \"api_access\" Set Who can consent? to \"Admin and users\" Set Admin consent display name to \"twinsphere API access\" Set Admin consent description to \"Allow the application to access the twinsphere API on behalf of the signed-in user.\" Set User consent display name to \"twinsphere API access\" Set User consent description to \"Allow the application to access the twinsphere API on your behalf.\" Click Add scope Under Entra ID > Identity > Applications in the side menu, click Enterprise applications Search for your application (e.g. twinsphere-api-app ) and open it. Click Users and groups . Click Add user/group to add users or groups to the twinsphere roles. Please provide the noted information to the twinsphere support team to change and update your tenant configuration: Application ID Authority URL (Accounts in this organizational directory only) Create and configure app registration for viewer client Under Identity > Applications in the side menu, click App registrations > New Registration . Enter a descriptive name e.g. twinsphere-viewer-client-app As Supported account types let the default setting Accounts in this organizational directory only . Under Redirect URI , select the platform Web . Add the following redirect URL: https://viewer.<friendly-tenant-name|tenant-tag>.<cloud|dedicated>.twinsphere.io/signin-oidc-entra-id Replace <friendly-tenant-name|tenant-tag> with your friendly tenant name, if you use one or use your tenant-tag. Replace <cloud|dedicated> with your corresponding type. It's basically the base URL of the viewer app you use with a route postfix /signin-oidc-entra-id . If you don't know which URL to add here, please ask our support team Then click Register. The app's Overview page opens. Note the Application ID . Click on Manifest and in the Tab Microsoft Graph App Manifest change the property requestedAccessTokenVersion in the json (under api ) editor to 2 and hit the Save button. Click on Certificates & secrets in the side menu, then add a new entry under Client secrets with the following configuration. Description: twinsphere viewer client OAuth Expires: Select an expiration period of 365 days Click Add then copy and note the secret value. This is the OAuth client secret. The secret is needed, because the viewer acts as confidential OAuth client (web app which authenticates) unlike a public client (e.g. mobile client) which could not store a secret securely. Click on API permissions in the side menu, then click Add a permission . In the opened window click APIs my organization uses and select the API application you previously created for the twinsphere API. Click on Delegated permissions and select the api_access permission. Click on top on Application permissions and select all listed permissions. Click Add permissions In the top of the API permissions list click Grant admin consent for <your tenant> Under Identity > Applications in the side menu, click App registrations Search and select the twinsphere API application. Click Expose and API under Manage section. Click Add a client application Set Client ID to the ID of the viewer app registration and select the Authorized scopes checkbox. Click Add application . Please provide the noted information to the twinsphere support team to change and update your tenant configuration: Application ID Client Secret and it's expiration date, in order to plan an update in a timely manner","title":"Authentication"},{"location":"cloud-auth/#authentication","text":"twinsphere cloud supports two authentication strategies: using twinsphere ID , which is the default built-in authentication provider. Both user and service account authentication modes are supported, consult the twinsphere ID documentation for more information. using identity federation as an additional authentication provider","title":"Authentication"},{"location":"cloud-auth/#identity-provider-federation","text":"For tighter integration in your authentication and authorization systems, twinsphere cloud supports adding external identity provider configuration onto the platform. You identity provider configuration will be added as an additional configuration, it will not completely replace the usage of twinsphere ID which is still required for internal purposes! Supported authentication providers for twinsphere cloud are: Microsoft Entra ID OAuth2","title":"Identity provider federation"},{"location":"cloud-auth/#microsoft-entra-id-oauth2-federation","text":"The Entra ID (former known as Azure AD) integration allows you to use a Microsoft Entra ID tenant as an identity provider for twinsphere. Besides allowing your own users to log in, you can also use Entra ID application roles to assign users and groups to twinsphere roles from your own Microsoft Entra ID portal. You can also connect your Entra ID applications and fully integrate twinsphere into your ecosystem. In general, you need to create two Azure app registrations. One for the API service and one for the viewer, which acts as client for the API. If you don't use the twinsphere viewer, you can skip the viewer configuration section. Prerequisites The following steps require you to sign in as a user that is authorized to consent on behalf of the organization. For this, a user with the following roles is needed: Privileged Role Administrator Cloud Application Administrator or Application Administrator Log in to your Microsoft Entra admin center \u29c9 If you have access to more than one tenant, select your account in the upper right. Set your session to the Entra ID tenant you wish to use.","title":"Microsoft Entra ID OAuth2 federation"},{"location":"cloud-auth/#app-registration-for-the-twinsphere-api","text":"Under Identity > Applications in the side menu, click App registrations > New Registration . Enter a descriptive name e.g. twinsphere-api-app As Supported account types let the default setting Accounts in this organizational directory only . Click Register . Note the Application ID . Click on Manifest and in the Tab Microsoft Graph App Manifest change the property requestedAccessTokenVersion in the json (under api ) editor to 2 and hit the Save button. Navigate to Overview in the created app registration and click on Endpoints in top of the menu. Note the Authority URL (Accounts in this organizational directory only) URI Define the required application roles (under App roles ). Display name Value Description Allowed member types Reader reader Read data Both (Users / Groups + Applications) Contributor contributor Write data Both (Users / Groups + Applications) Make sure the values are typed exactly as above (lowercase!). Click Expose and API under Manage section. Click Add a scope . Leave the Application ID URI as it is, should be a value like \"api:// <application id> \" and click Save and continue . In the next windows set the following values: Set Scope name to \"api_access\" Set Who can consent? to \"Admin and users\" Set Admin consent display name to \"twinsphere API access\" Set Admin consent description to \"Allow the application to access the twinsphere API on behalf of the signed-in user.\" Set User consent display name to \"twinsphere API access\" Set User consent description to \"Allow the application to access the twinsphere API on your behalf.\" Click Add scope Under Entra ID > Identity > Applications in the side menu, click Enterprise applications Search for your application (e.g. twinsphere-api-app ) and open it. Click Users and groups . Click Add user/group to add users or groups to the twinsphere roles. Please provide the noted information to the twinsphere support team to change and update your tenant configuration: Application ID Authority URL (Accounts in this organizational directory only)","title":"App registration for the twinsphere API"},{"location":"cloud-auth/#create-and-configure-app-registration-for-viewer-client","text":"Under Identity > Applications in the side menu, click App registrations > New Registration . Enter a descriptive name e.g. twinsphere-viewer-client-app As Supported account types let the default setting Accounts in this organizational directory only . Under Redirect URI , select the platform Web . Add the following redirect URL: https://viewer.<friendly-tenant-name|tenant-tag>.<cloud|dedicated>.twinsphere.io/signin-oidc-entra-id Replace <friendly-tenant-name|tenant-tag> with your friendly tenant name, if you use one or use your tenant-tag. Replace <cloud|dedicated> with your corresponding type. It's basically the base URL of the viewer app you use with a route postfix /signin-oidc-entra-id . If you don't know which URL to add here, please ask our support team Then click Register. The app's Overview page opens. Note the Application ID . Click on Manifest and in the Tab Microsoft Graph App Manifest change the property requestedAccessTokenVersion in the json (under api ) editor to 2 and hit the Save button. Click on Certificates & secrets in the side menu, then add a new entry under Client secrets with the following configuration. Description: twinsphere viewer client OAuth Expires: Select an expiration period of 365 days Click Add then copy and note the secret value. This is the OAuth client secret. The secret is needed, because the viewer acts as confidential OAuth client (web app which authenticates) unlike a public client (e.g. mobile client) which could not store a secret securely. Click on API permissions in the side menu, then click Add a permission . In the opened window click APIs my organization uses and select the API application you previously created for the twinsphere API. Click on Delegated permissions and select the api_access permission. Click on top on Application permissions and select all listed permissions. Click Add permissions In the top of the API permissions list click Grant admin consent for <your tenant> Under Identity > Applications in the side menu, click App registrations Search and select the twinsphere API application. Click Expose and API under Manage section. Click Add a client application Set Client ID to the ID of the viewer app registration and select the Authorized scopes checkbox. Click Add application . Please provide the noted information to the twinsphere support team to change and update your tenant configuration: Application ID Client Secret and it's expiration date, in order to plan an update in a timely manner","title":"Create and configure app registration for viewer client"},{"location":"cloud-change-events/","text":"Change Events Besides the HTTP/REST based API endpoint, twinsphere also offers a MQTT based API for receiving events about shells and submodels. Connecting to the broker Connection is based on mutual-TLS authentication with certificates. At present, we only support the thumbprint matching strategy. Certificate creation Create your own certificate (it can be self-signed or issued by a valid certificate authority, but ensure you store this certificate securely as a SECRET ). You can simply follow this guide \u29c9 or use a tool of your choice. Send us the thumbprint via a JIRA ticket request . We will provide you with the connection details once the thumbprint has been granted access. The thumbprint itself is not a secret, so it can be sent through unsecured channels. To test out the connection, we recommend using mqttx.app \u29c9 Connecting Any MQTT 3.1 or 5.0 client library in any language is supported. Make sure you understand and distinguish between the MQTT client ID (aka Session ID) and the username which you need to provide, like in WithCredentials() method in the C# example below. Your client ID (session ID) can have any value, but make sure it is fixed and not dynamic. This value will be used to map the MQTT session back to your client in cases such as restarts and failures. Here is a generic C# example with MQTTNet on how to establish a connection: const string clientId = \"your-fixed-client-id-per-consumer\"; // aka Session ID const string username = \"you will get this value from us\"; var mqttClientConfiguration = new MqttClientOptionsBuilder() .WithClientId(clientId) .WithTcpServer(_eventBrokerHost, _eventBrokerPort) ... .WithCredentials(username, \"\") Single connections Most common case will be that you subscribe to events in a single-instance with a fixed clientId (any value as long as it is fixed between deployments and restarts). In case of rolling deployments, you don't necessarily need to disconnect the \"old\" client first. The old client will automatically get a disconnect once the new client connect with the same username / clientId combination. Multiple connections For cases where you want to have multiple concurrent connections, we support up to 3 concurrent sessions per \"username\". You can refer to Microsoft docs \u29c9 on some session ID / client ID naming patterns in case of multiple concurrent connections. Topics, message contracts and QoS Following MQTT topics are supported: twinsphere/shells/<shell id - base64 encoded!>/created twinsphere/shells/<shell id - base64 encoded!>/updated twinsphere/shells/<shell id - base64 encoded!>/deleted twinsphere/submodels/<submodel id - base64 encoded!>/created twinsphere/submodels/<submodel id - base64 encoded!>/updated twinsphere/submodels/<submodel id - base64 encoded!>/deleted MQTT wildcards for subscriptions are supported at the \"id\" level, for example, to subscribe to all shell update events, use: twinsphere/shells/+/updated Messages are delivered with a QoS of 1 (at-least-once) , which means that duplicates are possible and should be expected. The MQTT message content (referred to here as the twinsphere envelope) follows the schema below: # shell event envelope version: string timestamp: string (UTC in ISO 8601 format) payload: JSON string (aas-core-works AssetAdministationShell meta model) # submodel event envelope version: string timestamp: string (UTC in ISO 8601 format) payload: JSON string (aas-core-works Submodel meta model) affectedShellIds: JSON array of strings containing shells this submodel referenced at the time The envelope is always compressed via gzip , so you should first decompress it. Then, to deserialize the JSON string in the payload property, you can use the aas-core-works libraries for your target programming language or platform. Below is a code snippet demonstrating how you could achieve this in C#: // If you are using MQTTnet, then your MQTT message (MqttApplicationMessage) should have a // property called PayloadSegment. Using the extension method Decompress, defined below, // you can do something like this: var envelopeJson = msg.PayloadSegment.ToArray().Decompress(); var envelope = JsonSerializer.Deserialize<ShellEvent>(envelopeJson); // now you can read envelope.Payload, which is a JSON structure that can be deserialized via // core-works Jsonization helper from the https://github.com/aas-core-works/aas-core3.0-csharp // you need a \"container\" to deserialize into - this is our envelope public class ShellEvent { [JsonPropertyName(\"version\")] public required string Version { get; init; } [JsonPropertyName(\"timestamp\")] public required string Timestamp { get; init; } [JsonPropertyName(\"payload\")] public required string Payload { get; init; } } public static string Decompress(this byte[] compressedContent) { using var compressedStream = new MemoryStream(compressedContent); using var gzipStream = new GZipStream(compressedStream, CompressionMode.Decompress); using var decompressedStream = new MemoryStream(); gzipStream.CopyTo(decompressedStream); var decompressedBytes = decompressedStream.ToArray(); return Encoding.UTF8.GetString(decompressedBytes); } To properly handle possible duplicate events on your side, make sure to use the timestamp property and ignore messages newer than the timestamp you already processed. MQTT protocol details For information on supported MQTT versions and limitations on MQTT features, please refer to this resource . Equally important are the quotas & limitations . Especially important is to mention the limitations of the persistent sessions which is up to 100 messages / 8h per topic. Additional information There are several important aspects to note regarding the twinsphere interface: Events published are not issued immediately after a change is made via the REST API, there can be a delay of up to several minutes. Duplicate events should be expected, and are commonplace when using QoS 1. Troubleshooting If you encounter any issues, we recommend enabling tracing of MQTT messages depending on the library you are using. For example, on the .NET Platform using MQTTNet, you can enable traces like this . In some cases however, when it comes to features like authorization and topic permissions, you might experience disconnects from the broker without detailed explanation. Ensure that you subscribe to the correct topic names and double check for typos or similar issues. In the worst case scenario, don't hesitate to submit a ticket issue with us for further assistance in debugging the problem.","title":"Change Events"},{"location":"cloud-change-events/#change-events","text":"Besides the HTTP/REST based API endpoint, twinsphere also offers a MQTT based API for receiving events about shells and submodels.","title":"Change Events"},{"location":"cloud-change-events/#connecting-to-the-broker","text":"Connection is based on mutual-TLS authentication with certificates. At present, we only support the thumbprint matching strategy.","title":"Connecting to the broker"},{"location":"cloud-change-events/#certificate-creation","text":"Create your own certificate (it can be self-signed or issued by a valid certificate authority, but ensure you store this certificate securely as a SECRET ). You can simply follow this guide \u29c9 or use a tool of your choice. Send us the thumbprint via a JIRA ticket request . We will provide you with the connection details once the thumbprint has been granted access. The thumbprint itself is not a secret, so it can be sent through unsecured channels. To test out the connection, we recommend using mqttx.app \u29c9","title":"Certificate creation"},{"location":"cloud-change-events/#connecting","text":"Any MQTT 3.1 or 5.0 client library in any language is supported. Make sure you understand and distinguish between the MQTT client ID (aka Session ID) and the username which you need to provide, like in WithCredentials() method in the C# example below. Your client ID (session ID) can have any value, but make sure it is fixed and not dynamic. This value will be used to map the MQTT session back to your client in cases such as restarts and failures. Here is a generic C# example with MQTTNet on how to establish a connection: const string clientId = \"your-fixed-client-id-per-consumer\"; // aka Session ID const string username = \"you will get this value from us\"; var mqttClientConfiguration = new MqttClientOptionsBuilder() .WithClientId(clientId) .WithTcpServer(_eventBrokerHost, _eventBrokerPort) ... .WithCredentials(username, \"\")","title":"Connecting"},{"location":"cloud-change-events/#single-connections","text":"Most common case will be that you subscribe to events in a single-instance with a fixed clientId (any value as long as it is fixed between deployments and restarts). In case of rolling deployments, you don't necessarily need to disconnect the \"old\" client first. The old client will automatically get a disconnect once the new client connect with the same username / clientId combination.","title":"Single connections"},{"location":"cloud-change-events/#multiple-connections","text":"For cases where you want to have multiple concurrent connections, we support up to 3 concurrent sessions per \"username\". You can refer to Microsoft docs \u29c9 on some session ID / client ID naming patterns in case of multiple concurrent connections.","title":"Multiple connections"},{"location":"cloud-change-events/#topics-message-contracts-and-qos","text":"Following MQTT topics are supported: twinsphere/shells/<shell id - base64 encoded!>/created twinsphere/shells/<shell id - base64 encoded!>/updated twinsphere/shells/<shell id - base64 encoded!>/deleted twinsphere/submodels/<submodel id - base64 encoded!>/created twinsphere/submodels/<submodel id - base64 encoded!>/updated twinsphere/submodels/<submodel id - base64 encoded!>/deleted MQTT wildcards for subscriptions are supported at the \"id\" level, for example, to subscribe to all shell update events, use: twinsphere/shells/+/updated Messages are delivered with a QoS of 1 (at-least-once) , which means that duplicates are possible and should be expected. The MQTT message content (referred to here as the twinsphere envelope) follows the schema below: # shell event envelope version: string timestamp: string (UTC in ISO 8601 format) payload: JSON string (aas-core-works AssetAdministationShell meta model) # submodel event envelope version: string timestamp: string (UTC in ISO 8601 format) payload: JSON string (aas-core-works Submodel meta model) affectedShellIds: JSON array of strings containing shells this submodel referenced at the time The envelope is always compressed via gzip , so you should first decompress it. Then, to deserialize the JSON string in the payload property, you can use the aas-core-works libraries for your target programming language or platform. Below is a code snippet demonstrating how you could achieve this in C#: // If you are using MQTTnet, then your MQTT message (MqttApplicationMessage) should have a // property called PayloadSegment. Using the extension method Decompress, defined below, // you can do something like this: var envelopeJson = msg.PayloadSegment.ToArray().Decompress(); var envelope = JsonSerializer.Deserialize<ShellEvent>(envelopeJson); // now you can read envelope.Payload, which is a JSON structure that can be deserialized via // core-works Jsonization helper from the https://github.com/aas-core-works/aas-core3.0-csharp // you need a \"container\" to deserialize into - this is our envelope public class ShellEvent { [JsonPropertyName(\"version\")] public required string Version { get; init; } [JsonPropertyName(\"timestamp\")] public required string Timestamp { get; init; } [JsonPropertyName(\"payload\")] public required string Payload { get; init; } } public static string Decompress(this byte[] compressedContent) { using var compressedStream = new MemoryStream(compressedContent); using var gzipStream = new GZipStream(compressedStream, CompressionMode.Decompress); using var decompressedStream = new MemoryStream(); gzipStream.CopyTo(decompressedStream); var decompressedBytes = decompressedStream.ToArray(); return Encoding.UTF8.GetString(decompressedBytes); } To properly handle possible duplicate events on your side, make sure to use the timestamp property and ignore messages newer than the timestamp you already processed.","title":"Topics, message contracts and QoS"},{"location":"cloud-change-events/#mqtt-protocol-details","text":"For information on supported MQTT versions and limitations on MQTT features, please refer to this resource . Equally important are the quotas & limitations . Especially important is to mention the limitations of the persistent sessions which is up to 100 messages / 8h per topic.","title":"MQTT protocol details"},{"location":"cloud-change-events/#additional-information","text":"There are several important aspects to note regarding the twinsphere interface: Events published are not issued immediately after a change is made via the REST API, there can be a delay of up to several minutes. Duplicate events should be expected, and are commonplace when using QoS 1.","title":"Additional information"},{"location":"cloud-change-events/#troubleshooting","text":"If you encounter any issues, we recommend enabling tracing of MQTT messages depending on the library you are using. For example, on the .NET Platform using MQTTNet, you can enable traces like this . In some cases however, when it comes to features like authorization and topic permissions, you might experience disconnects from the broker without detailed explanation. Ensure that you subscribe to the correct topic names and double check for typos or similar issues. In the worst case scenario, don't hesitate to submit a ticket issue with us for further assistance in debugging the problem.","title":"Troubleshooting"},{"location":"cloud-client-generation/","text":"API Client Generation If you need to integrate the twinsphere API into your application landscape, consider automatically generating a twinsphere API client from our OpenAPI definition. This approach allows you to use all endpoints of the twinsphere API with the programming language of your choice. Make sure you read and understand the Limitations of client generation section below. General Code Generation There are multiple ways and tools to generate a client from the OpenAPI definition. We don't recommend any tool in particular, but here are a few options: https://github.com/swagger-api/swagger-codegen \u29c9 https://github.com/OpenAPITools/openapi-generator \u29c9 https://github.com/microsoft/kiota \u29c9 Authentication Most generated clients support setting authentication headers directly in code. For example, here is the documentation on how to do it with Microsoft Kiota \u29c9 . Make sure to check the Authentication section for further info. Limitations of client generation Our own twinsphere OpenAPI definition is 99% compliant with the official OpenAPI definitions (written by the IDTA and hosted in the SwaggerHub), but there are some things missing which are not possible for us to implement at this moment. We are working on a better long-term solution, and we can recommend two different approaches at this time: if you want to use our OpenAPI definition, it might be necessary to manually adjust some return types in the generated client code. if you only need the official IDTA endpoints, you can generate your client(s) from the official IDTA OpenAPI definition (hosted in the SwaggerHub)","title":"Client Generation"},{"location":"cloud-client-generation/#api-client-generation","text":"If you need to integrate the twinsphere API into your application landscape, consider automatically generating a twinsphere API client from our OpenAPI definition. This approach allows you to use all endpoints of the twinsphere API with the programming language of your choice. Make sure you read and understand the Limitations of client generation section below.","title":"API Client Generation"},{"location":"cloud-client-generation/#general-code-generation","text":"There are multiple ways and tools to generate a client from the OpenAPI definition. We don't recommend any tool in particular, but here are a few options: https://github.com/swagger-api/swagger-codegen \u29c9 https://github.com/OpenAPITools/openapi-generator \u29c9 https://github.com/microsoft/kiota \u29c9","title":"General Code Generation"},{"location":"cloud-client-generation/#authentication","text":"Most generated clients support setting authentication headers directly in code. For example, here is the documentation on how to do it with Microsoft Kiota \u29c9 . Make sure to check the Authentication section for further info.","title":"Authentication"},{"location":"cloud-client-generation/#limitations-of-client-generation","text":"Our own twinsphere OpenAPI definition is 99% compliant with the official OpenAPI definitions (written by the IDTA and hosted in the SwaggerHub), but there are some things missing which are not possible for us to implement at this moment. We are working on a better long-term solution, and we can recommend two different approaches at this time: if you want to use our OpenAPI definition, it might be necessary to manually adjust some return types in the generated client code. if you only need the official IDTA endpoints, you can generate your client(s) from the official IDTA OpenAPI definition (hosted in the SwaggerHub)","title":"Limitations of client generation"},{"location":"cloud-documentation/","text":"API Documentation This documentation complements the swagger documentation of our API and contains addition information and background to the endpoints. Discovery Implicit Discovery We have introduced a proprietary comfort feature that allows asset links to be retrieved without or in addition to an existing \"standard\" discovery. Our Implicit Discovery works directly on the tenant's existing asset administration shell repository data and creates shell descriptors on-the-fly when called. The advantage of this feature is that all shells of your shell repository are hereby discoverable by default - without the need of explicitly entering lookup data into a discovery. The limitation of it is that only those \"local shell\" are discoverable and the quantity cannot be restricted or extended to shells of further (external) repositories. For distributed scenarios you need to use a standard discovery. The endpoints of our implicit discovery feature match IDTA's read service profile SSP-002 of the Discovery Service Specification and are located at the top level of our api path: https:// {twinsphereTenantURL} /api/ {api_version} /lookup/shells Standard (\"Explicit\") Discovery Of course twinsphere also offers the official discovery service as specified. It is even possible to have multiple instances of discoveries with different sets of shell descriptors within one tenants. All endpoints of our discovery feature match IDTA's full service profile SSP-001 of the Discovery Service Specification and are separated under a freely definable instance name: https:// {twinsphereTenantURL} / {instanceName} /api/ {api_version} /lookup/shells In order to obtain a new discovery instance please contact our support team . Shell Registry Implicit Shell Registry We have introduced a proprietary comfort feature that allows shell descriptors to be retrieved without or in addition to an existing \"standard\" shell registry. Our Implicit Shell Registry works directly on the tenant's existing asset administration shell repository data and creates basic shell descriptors on-the-fly when called. The advantage of this feature is that all shells of your shell repository are hereby registered by default - without the need of explicitly entering descriptors into a registry. The limitation of it is that only local shells are retrievable and their quantity cannot be restricted or extended to shells of further (external) repositories. For distributed scenarios you need to use a standard registry. You might think: What a pointless feature - after all, you are asking a twinsphere tenant where a shell is located that is hosted by this very tenant. So the answer you'll get will always be \"The shell is here with me!\". However, the advantage of this approach lies in simple client-centered use cases, where clients are able to follow the standard call procedure (Discovery => Registry => Shell => Submodel) without you having to deal with shell registrations. The endpoints of our Implicit Shell Registry feature correspond to the IDTA read service profile SSP-002 of the Discovery Service Specification and are located at the top level of our api path: https:// {twinsphereTenantURL} /api/ {api_version} /shell-descriptors Standard (\"Explicit\") Shell Registry Of course twinsphere also offers the official Asset Administration Shell Registry service as specified. It is even possible to have multiple instances of registries with different sets of shell descriptors within one tenants. All endpoints of our registry feature correspond to the IDTA full service profile SSP-001 of the Asset Administration Shell Registry Service Specification and are separated under a freely definable instance name: https:// {twinsphereTenantURL} / {instanceName} /api/ {api_version} /shell-descriptors In order to obtain such a new registry instance please contact our support team . Submodel Registry Implicit Submodel Registry We have introduced a proprietary comfort feature that allows submodel descriptors to be retrieved without or in addition to an existing \"standard\" submodel registry. Our Implicit Submodel Registry works directly on the tenant's existing submodel repository data and creates basic submodel descriptors on-the-fly when called. For the advantage and limitations of this feature are analog to those of our Implicit Shell Registry. Please refer there. The endpoints of our Implicit Submodel Registry feature correspond to the IDTA read service profile SSP-002 of the Discovery Service Specification and are located at the top level of our api path: https:// {twinsphereTenantURL} /api/ {api_version} /submodel-descriptors Standard (\"Explicit\") Submodel Registry Not yet available, coming soon... Shell Repository Enhanced GET /shells We have introduced an optional extra query parameter \"assetKind\" for filtering shells according to their asset kind. Presently, the available asset kinds include: Instance Type You can utilize this parameter within your existing /shells calls to filter based on the asset kind. If this parameter isn't provided, all shells, regardless of their asset kind, will be returned. Due to its optional nature, the parameter is a non-breaking extension of the standard. Submodel Repository Enhanced GET /submodels We have introduced an optional extra query parameter \"kind\" for filtering submodels according to their kind. Presently, the available kinds include: Instance Template You can utilize this parameter within your existing /submodels calls to filter based on the kind. If this parameter isn't provided, all submodels, regardless of their kind, will be returned. Due to its optional nature, the parameter is a non-breaking extension of the standard. Concept Description Repository Available and works :) Nothing special beyond the defined standard to document here. File Repository twinsphere is self-sufficiently capable of hosting and managing files and documents to be referenced from any submodel within your tenant. twinsphere File Paths The key concept behind the file repository are so called 'twinsphere file paths' (tfp). This feature enables clients to reuse and share files between shells and submodels, eliminating the need to upload the same files multiple times. A tfp follows a fixed format/pattern, for example: file:/dHdpbnNwaGVyZS1maWxl/cp/18ef5516-618b-4a97-ac4b-d47f5d5ee823/thumbnail.jpg . It follows the file URI scheme (as requested by the specifications in advance to v3.1) and consists of a static part, the tenant name, a unique documentId, and a file name. This tfp cannot be generated by the client. It is created by twinsphere when uploading a file to the repository (see Usage below) and should be (re)used in submodels when referencing a file resources. Please notice : A tfp is only valid in the context of a single tenant and is not reachable from outside this context. Usage of File API twinsphere's file repository is accessible via the \"files\" endpoints at https://{tenant_url}/api/v3.0/files\u2026 Once a file has been uploaded to the file repository it can be referenced by shells (as thumbnail) or submodels (as attachment) using its corresponding tfp. We recommend the following procedure: POST /files to upload a document, tfp is returned Remember the tfp and use it as File.value in submodels as required Please notice: There is currently no way to search for a tfp in the file repository, as no metadata about the file is stored apart from the file name - and this may not be unique in the repository. Replacing an existing file by PUT /files will replace the files content while keeping its filename and tfp. So all reference stay valid and now point to the new content. To remove a file physically from the repository, you have to use the DELETE /files interface. Please be aware that there is no check for existing references, so you may create invalid reference by deleting a file. You can attach meta information to a twinsphere file at https://{tenant_url}/sphere/api/v1.0/files/{tfp}/metadata endpoint. { \"displayName\": \"Document Display Name\", \"classification\": \"01-01\", \"attributes\": [ { \"key\": \"string\", \"value\": \"string\" }, { \"key\": \"string\", \"value\": \"string\" } ] } displayName : Custom name for the file classification : Must be a valid class ID as defined in VDI 2770 . For more information, refer for example to the IDTA Submodel Handover documentation Attributes : Custom key\u2013value metadata. Each key must be unique within the files meta data Attributes Limit : Up to 50 attributes per file Attribute Size : Keys and values can each be up to 2048 characters Adaption of standard operations The introduction of our file repository made it necessary to adapt the behavior of standard operations working with files: DELETE /attachment and DELETE /thumbnail Only removes file references from SM/AAS. Deletion of file itself is only possible via DELETE /files (see above) PUT /attachment and PUT /thumbnail Uploads new file to repo and updates this single reference with new twinsphere File Path. Former file stays unchanged, still exists on file repo and its twinsphere File Path is still valid. All other references to the former file stay untouched. GET /serialization for AASX packages Packs all referenced files of resolvable tfps (file exists in tenant's file repository) and ignores invalid twinsphere File Paths (non-existing files) Implications of this adapted behavior: If you (re-)upload a thumbnail or attachment via standard endpoints all referencing shells/submodels which used the previous file must be updated as well to use the updated file. A better way to update all references of an old file is to reupload the file via PUT /files. Its filename cannot be changed in this way though. If you update the thumbnail or attachment file value/path entry in the metamodel to something that does not resemble a twinsphere file path (e.g., file:/aasx/file/thumbnail.jpg ), the download of the file will no longer work. If you update references to a file in a single submodel element (with \"PUT attachment\" or \"PUT thumbnail\"), all other references will still be valid but are not updated and point to the former file. Import An AASX package can be uploaded via the import function. Currently, only one shell is supported. The import process is not transactional, so the shell, submodels, and files may be partially created even in the event of an error. It is important to note that an import always overwrites existing data. A package is considered valid if: Successful validation Exactly one shell Other elements are optional If a thumbnail is required, an asset thumbnail must be provided. Package thumbnails are ignored. Currently, there is a limitation in \"[Content_Types].xml\". All paths are case-sensitive and must exactly match the folder path within the package. Serialization /serialization The serialization endpoint returns an environment that contains specified asset administration shells, submodels and concept descriptions (see part 2 of the AAS specification \u29c9 ). The desired return type can be specified using the \"Accept\" header parameter of the request. Valid return types include application/xml (default), application/json , and application/asset-administration-shell-package+json . Packages currently contain the environment as JSON \u2013 XML coming soon. \u26a0\ufe0f Note If you use the serialization in the Swagger UI there is one problem, you cannot set the accept header in the UI. You have to go down to the Responses section and there, in the 200 section, choose the accept header value from the drop down and send the request. Now you will get your correct serialized shell. As mentioned in this issue on github \u29c9 , this is a Swagger UI / OpenApi problem and can not be fixed. As mentioned in this issue on github \u29c9 , Swagger UI produces an corrupt File on using the Accept Header \" application/asset-administration-shell-package+json \". Using the API direct with for example Postman or CURL gives the correct File. Serialization Modifiers Level Modifier Not yet available, coming soon... Content Modifier You can use special content modifiers to get special serializations of the requested data, e.g. only the metadata of an object. Metadata ($metadata) From IDTA Spec Part 2: \"Only metadata of an element or child elements is returned; the value is not.\" This is implemented for the following endpoints: GET /submodel/{submodelIdentifier}/$metadata Let us give you an example for this endpoint with the nameplate submodel. { \"idShort\": \"Nameplate\", \"id\": \"https://company.com/ids/sm/nameplate\", \"kind\": \"Instance\", \"semanticId\": { \"type\": \"ExternalReference\", \"keys\": [ { \"type\": \"GlobalReference\", \"value\": \"https://admin-shell.io/zvei/nameplate/2/0/Nameplate\" } ] }, \"modelType\": \"Submodel\" } Value ($value) Not yet available, coming soon... Reference ($reference) This gives you the Reference object of an object or a list of reference objects on endpoints which works with many objects. For example the shellIds of all shells in your repository. From IDTA Spec Part 2: \"Only applicable to Referables. Only the reference to the found element is returned; potential child elements are ignored.\" Actually it is not implemented for the for the Asset Administration Shell and Submodel endpoints /shells/{aasIdentifier}/$reference /shells/{aasIdentifier}/submodels/{submodelIdentifier}/$reference /shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$reference Path ($path) From IDTA Spec Part 2: \"Returns the idShort of the requested element and a list of idShort paths to child elements if the requested element is a Submodel, a SubmodelElementCollection, a SubmodelElementList, a AnnotatedRelationshipElement, or an Entity.\" This is implemented for the following endpoints: GET /submodel/{submodelIdentifier}/$path The return value for our Nameplate Submodel would be: [ \"URIOfTheProduct\", \"ManufacturerName\", \"ManufacturerProductDesignation\", \"ContactInformation\", \"ContactInformation.Company\", \"ContactInformation.CityTown\", \"ContactInformation.Phone\", \"ContactInformation.Phone.TelephoneNumber\", \"ContactInformation.Phone.TypeOfTelephone\", \"ContactInformation.Fax\", \"ContactInformation.Fax.FaxNumber\", \"ContactInformation.Fax.TypeOfFaxNumber\", \"ContactInformation.Street\", \"ContactInformation.Zipcode\", \"ContactInformation.AddressOfAdditionalLink\", \"ManufacturerProductRoot\", \"ManufacturerProductFamily\", \"OrderCodeOfManufacturer\", \"ProductArticleNumberOfManufacturer\", \"Markings\", \"Markings.Marking01\", \"Markings.Marking01.MarkingName\", \"Markings.Marking02\", \"Markings.Marking02.MarkingName\", \"Markings.Marking03\", \"Markings.Marking03.MarkingName\" ] Extent Modifier Only applicable to BLOB elements. The \"extent\" parameter controls whether embedded data is returned in base64 format or not. By default, if the parameter is not provided, no embedded data is returned. The possible values are \"WithBLOBValue\" and \"WithoutBLOBValue\". The default is \"WithoutBlobValue\". There are only a few submodels that have BLOBs inside. But we can give you a generally example how the result with this modifier will look like. The name of the BLOB is \"Library\". Please note that this modifier is given as a query parameter on the endpoints. This is implemented for the following endpoints: GET /submodel/{submodelIdentifier}?extent= WithoutBLOBValue { \"Library\": { \"contentType\": \"application/octet-stream\" } } WithBLOBValue { \"Library\": { \"contentType\": \"application/octet-stream\" \"value\": \"VGhpcyBpcyBteSBibG9i\" } } Pagination Some data can be retrieved page by page. For this, you can pass a limit and a cursor. The limit determines the maximum size of a page, and the cursor specifies the position from which data retrieval starts. The result object of such a request contains the cursor value for the next request/page under paging_metadata.cursor. Interface example: public async Task<IActionResult> GetAllAssetAdministrationShells( [FromQuery] List<string>? assetIds = null, [FromQuery] string? idShort = null, [FromQuery] int? limit = null, [FromQuery] string? cursor = null, [FromQuery] Core.AssetKind? assetKind = null) Result Model: { \"result\": {}, \"paging_metadata\": { \"cursor\": \"\" } }","title":"API Documentation"},{"location":"cloud-documentation/#api-documentation","text":"This documentation complements the swagger documentation of our API and contains addition information and background to the endpoints.","title":"API Documentation"},{"location":"cloud-documentation/#discovery","text":"","title":"Discovery"},{"location":"cloud-documentation/#implicit-discovery","text":"We have introduced a proprietary comfort feature that allows asset links to be retrieved without or in addition to an existing \"standard\" discovery. Our Implicit Discovery works directly on the tenant's existing asset administration shell repository data and creates shell descriptors on-the-fly when called. The advantage of this feature is that all shells of your shell repository are hereby discoverable by default - without the need of explicitly entering lookup data into a discovery. The limitation of it is that only those \"local shell\" are discoverable and the quantity cannot be restricted or extended to shells of further (external) repositories. For distributed scenarios you need to use a standard discovery. The endpoints of our implicit discovery feature match IDTA's read service profile SSP-002 of the Discovery Service Specification and are located at the top level of our api path: https:// {twinsphereTenantURL} /api/ {api_version} /lookup/shells","title":"Implicit Discovery"},{"location":"cloud-documentation/#standard-explicit-discovery","text":"Of course twinsphere also offers the official discovery service as specified. It is even possible to have multiple instances of discoveries with different sets of shell descriptors within one tenants. All endpoints of our discovery feature match IDTA's full service profile SSP-001 of the Discovery Service Specification and are separated under a freely definable instance name: https:// {twinsphereTenantURL} / {instanceName} /api/ {api_version} /lookup/shells In order to obtain a new discovery instance please contact our support team .","title":"Standard (\"Explicit\") Discovery"},{"location":"cloud-documentation/#shell-registry","text":"","title":"Shell Registry"},{"location":"cloud-documentation/#implicit-shell-registry","text":"We have introduced a proprietary comfort feature that allows shell descriptors to be retrieved without or in addition to an existing \"standard\" shell registry. Our Implicit Shell Registry works directly on the tenant's existing asset administration shell repository data and creates basic shell descriptors on-the-fly when called. The advantage of this feature is that all shells of your shell repository are hereby registered by default - without the need of explicitly entering descriptors into a registry. The limitation of it is that only local shells are retrievable and their quantity cannot be restricted or extended to shells of further (external) repositories. For distributed scenarios you need to use a standard registry. You might think: What a pointless feature - after all, you are asking a twinsphere tenant where a shell is located that is hosted by this very tenant. So the answer you'll get will always be \"The shell is here with me!\". However, the advantage of this approach lies in simple client-centered use cases, where clients are able to follow the standard call procedure (Discovery => Registry => Shell => Submodel) without you having to deal with shell registrations. The endpoints of our Implicit Shell Registry feature correspond to the IDTA read service profile SSP-002 of the Discovery Service Specification and are located at the top level of our api path: https:// {twinsphereTenantURL} /api/ {api_version} /shell-descriptors","title":"Implicit Shell Registry"},{"location":"cloud-documentation/#standard-explicit-shell-registry","text":"Of course twinsphere also offers the official Asset Administration Shell Registry service as specified. It is even possible to have multiple instances of registries with different sets of shell descriptors within one tenants. All endpoints of our registry feature correspond to the IDTA full service profile SSP-001 of the Asset Administration Shell Registry Service Specification and are separated under a freely definable instance name: https:// {twinsphereTenantURL} / {instanceName} /api/ {api_version} /shell-descriptors In order to obtain such a new registry instance please contact our support team .","title":"Standard (\"Explicit\") Shell Registry"},{"location":"cloud-documentation/#submodel-registry","text":"","title":"Submodel Registry"},{"location":"cloud-documentation/#implicit-submodel-registry","text":"We have introduced a proprietary comfort feature that allows submodel descriptors to be retrieved without or in addition to an existing \"standard\" submodel registry. Our Implicit Submodel Registry works directly on the tenant's existing submodel repository data and creates basic submodel descriptors on-the-fly when called. For the advantage and limitations of this feature are analog to those of our Implicit Shell Registry. Please refer there. The endpoints of our Implicit Submodel Registry feature correspond to the IDTA read service profile SSP-002 of the Discovery Service Specification and are located at the top level of our api path: https:// {twinsphereTenantURL} /api/ {api_version} /submodel-descriptors","title":"Implicit Submodel Registry"},{"location":"cloud-documentation/#standard-explicit-submodel-registry","text":"Not yet available, coming soon...","title":"Standard (\"Explicit\") Submodel Registry"},{"location":"cloud-documentation/#shell-repository","text":"","title":"Shell Repository"},{"location":"cloud-documentation/#enhanced-get-shells","text":"We have introduced an optional extra query parameter \"assetKind\" for filtering shells according to their asset kind. Presently, the available asset kinds include: Instance Type You can utilize this parameter within your existing /shells calls to filter based on the asset kind. If this parameter isn't provided, all shells, regardless of their asset kind, will be returned. Due to its optional nature, the parameter is a non-breaking extension of the standard.","title":"Enhanced GET /shells"},{"location":"cloud-documentation/#submodel-repository","text":"","title":"Submodel Repository"},{"location":"cloud-documentation/#enhanced-get-submodels","text":"We have introduced an optional extra query parameter \"kind\" for filtering submodels according to their kind. Presently, the available kinds include: Instance Template You can utilize this parameter within your existing /submodels calls to filter based on the kind. If this parameter isn't provided, all submodels, regardless of their kind, will be returned. Due to its optional nature, the parameter is a non-breaking extension of the standard.","title":"Enhanced GET /submodels"},{"location":"cloud-documentation/#concept-description-repository","text":"Available and works :) Nothing special beyond the defined standard to document here.","title":"Concept Description Repository"},{"location":"cloud-documentation/#file-repository","text":"twinsphere is self-sufficiently capable of hosting and managing files and documents to be referenced from any submodel within your tenant.","title":"File Repository"},{"location":"cloud-documentation/#twinsphere-file-paths","text":"The key concept behind the file repository are so called 'twinsphere file paths' (tfp). This feature enables clients to reuse and share files between shells and submodels, eliminating the need to upload the same files multiple times. A tfp follows a fixed format/pattern, for example: file:/dHdpbnNwaGVyZS1maWxl/cp/18ef5516-618b-4a97-ac4b-d47f5d5ee823/thumbnail.jpg . It follows the file URI scheme (as requested by the specifications in advance to v3.1) and consists of a static part, the tenant name, a unique documentId, and a file name. This tfp cannot be generated by the client. It is created by twinsphere when uploading a file to the repository (see Usage below) and should be (re)used in submodels when referencing a file resources. Please notice : A tfp is only valid in the context of a single tenant and is not reachable from outside this context.","title":"twinsphere File Paths"},{"location":"cloud-documentation/#usage-of-file-api","text":"twinsphere's file repository is accessible via the \"files\" endpoints at https://{tenant_url}/api/v3.0/files\u2026 Once a file has been uploaded to the file repository it can be referenced by shells (as thumbnail) or submodels (as attachment) using its corresponding tfp. We recommend the following procedure: POST /files to upload a document, tfp is returned Remember the tfp and use it as File.value in submodels as required Please notice: There is currently no way to search for a tfp in the file repository, as no metadata about the file is stored apart from the file name - and this may not be unique in the repository. Replacing an existing file by PUT /files will replace the files content while keeping its filename and tfp. So all reference stay valid and now point to the new content. To remove a file physically from the repository, you have to use the DELETE /files interface. Please be aware that there is no check for existing references, so you may create invalid reference by deleting a file. You can attach meta information to a twinsphere file at https://{tenant_url}/sphere/api/v1.0/files/{tfp}/metadata endpoint. { \"displayName\": \"Document Display Name\", \"classification\": \"01-01\", \"attributes\": [ { \"key\": \"string\", \"value\": \"string\" }, { \"key\": \"string\", \"value\": \"string\" } ] } displayName : Custom name for the file classification : Must be a valid class ID as defined in VDI 2770 . For more information, refer for example to the IDTA Submodel Handover documentation Attributes : Custom key\u2013value metadata. Each key must be unique within the files meta data Attributes Limit : Up to 50 attributes per file Attribute Size : Keys and values can each be up to 2048 characters","title":"Usage of File API"},{"location":"cloud-documentation/#adaption-of-standard-operations","text":"The introduction of our file repository made it necessary to adapt the behavior of standard operations working with files: DELETE /attachment and DELETE /thumbnail Only removes file references from SM/AAS. Deletion of file itself is only possible via DELETE /files (see above) PUT /attachment and PUT /thumbnail Uploads new file to repo and updates this single reference with new twinsphere File Path. Former file stays unchanged, still exists on file repo and its twinsphere File Path is still valid. All other references to the former file stay untouched. GET /serialization for AASX packages Packs all referenced files of resolvable tfps (file exists in tenant's file repository) and ignores invalid twinsphere File Paths (non-existing files) Implications of this adapted behavior: If you (re-)upload a thumbnail or attachment via standard endpoints all referencing shells/submodels which used the previous file must be updated as well to use the updated file. A better way to update all references of an old file is to reupload the file via PUT /files. Its filename cannot be changed in this way though. If you update the thumbnail or attachment file value/path entry in the metamodel to something that does not resemble a twinsphere file path (e.g., file:/aasx/file/thumbnail.jpg ), the download of the file will no longer work. If you update references to a file in a single submodel element (with \"PUT attachment\" or \"PUT thumbnail\"), all other references will still be valid but are not updated and point to the former file.","title":"Adaption of standard operations"},{"location":"cloud-documentation/#import","text":"An AASX package can be uploaded via the import function. Currently, only one shell is supported. The import process is not transactional, so the shell, submodels, and files may be partially created even in the event of an error. It is important to note that an import always overwrites existing data. A package is considered valid if: Successful validation Exactly one shell Other elements are optional If a thumbnail is required, an asset thumbnail must be provided. Package thumbnails are ignored. Currently, there is a limitation in \"[Content_Types].xml\". All paths are case-sensitive and must exactly match the folder path within the package.","title":"Import"},{"location":"cloud-documentation/#serialization","text":"","title":"Serialization"},{"location":"cloud-documentation/#serialization_1","text":"The serialization endpoint returns an environment that contains specified asset administration shells, submodels and concept descriptions (see part 2 of the AAS specification \u29c9 ). The desired return type can be specified using the \"Accept\" header parameter of the request. Valid return types include application/xml (default), application/json , and application/asset-administration-shell-package+json . Packages currently contain the environment as JSON \u2013 XML coming soon.","title":"/serialization"},{"location":"cloud-documentation/#note","text":"If you use the serialization in the Swagger UI there is one problem, you cannot set the accept header in the UI. You have to go down to the Responses section and there, in the 200 section, choose the accept header value from the drop down and send the request. Now you will get your correct serialized shell. As mentioned in this issue on github \u29c9 , this is a Swagger UI / OpenApi problem and can not be fixed. As mentioned in this issue on github \u29c9 , Swagger UI produces an corrupt File on using the Accept Header \" application/asset-administration-shell-package+json \". Using the API direct with for example Postman or CURL gives the correct File.","title":"\u26a0\ufe0f Note"},{"location":"cloud-documentation/#serialization-modifiers","text":"","title":"Serialization Modifiers"},{"location":"cloud-documentation/#level-modifier","text":"Not yet available, coming soon...","title":"Level Modifier"},{"location":"cloud-documentation/#content-modifier","text":"You can use special content modifiers to get special serializations of the requested data, e.g. only the metadata of an object.","title":"Content Modifier"},{"location":"cloud-documentation/#metadata-metadata","text":"From IDTA Spec Part 2: \"Only metadata of an element or child elements is returned; the value is not.\" This is implemented for the following endpoints: GET /submodel/{submodelIdentifier}/$metadata Let us give you an example for this endpoint with the nameplate submodel. { \"idShort\": \"Nameplate\", \"id\": \"https://company.com/ids/sm/nameplate\", \"kind\": \"Instance\", \"semanticId\": { \"type\": \"ExternalReference\", \"keys\": [ { \"type\": \"GlobalReference\", \"value\": \"https://admin-shell.io/zvei/nameplate/2/0/Nameplate\" } ] }, \"modelType\": \"Submodel\" }","title":"Metadata ($metadata)"},{"location":"cloud-documentation/#value-value","text":"Not yet available, coming soon...","title":"Value ($value)"},{"location":"cloud-documentation/#reference-reference","text":"This gives you the Reference object of an object or a list of reference objects on endpoints which works with many objects. For example the shellIds of all shells in your repository. From IDTA Spec Part 2: \"Only applicable to Referables. Only the reference to the found element is returned; potential child elements are ignored.\" Actually it is not implemented for the for the Asset Administration Shell and Submodel endpoints /shells/{aasIdentifier}/$reference /shells/{aasIdentifier}/submodels/{submodelIdentifier}/$reference /shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$reference","title":"Reference ($reference)"},{"location":"cloud-documentation/#path-path","text":"From IDTA Spec Part 2: \"Returns the idShort of the requested element and a list of idShort paths to child elements if the requested element is a Submodel, a SubmodelElementCollection, a SubmodelElementList, a AnnotatedRelationshipElement, or an Entity.\" This is implemented for the following endpoints: GET /submodel/{submodelIdentifier}/$path The return value for our Nameplate Submodel would be: [ \"URIOfTheProduct\", \"ManufacturerName\", \"ManufacturerProductDesignation\", \"ContactInformation\", \"ContactInformation.Company\", \"ContactInformation.CityTown\", \"ContactInformation.Phone\", \"ContactInformation.Phone.TelephoneNumber\", \"ContactInformation.Phone.TypeOfTelephone\", \"ContactInformation.Fax\", \"ContactInformation.Fax.FaxNumber\", \"ContactInformation.Fax.TypeOfFaxNumber\", \"ContactInformation.Street\", \"ContactInformation.Zipcode\", \"ContactInformation.AddressOfAdditionalLink\", \"ManufacturerProductRoot\", \"ManufacturerProductFamily\", \"OrderCodeOfManufacturer\", \"ProductArticleNumberOfManufacturer\", \"Markings\", \"Markings.Marking01\", \"Markings.Marking01.MarkingName\", \"Markings.Marking02\", \"Markings.Marking02.MarkingName\", \"Markings.Marking03\", \"Markings.Marking03.MarkingName\" ]","title":"Path ($path)"},{"location":"cloud-documentation/#extent-modifier","text":"Only applicable to BLOB elements. The \"extent\" parameter controls whether embedded data is returned in base64 format or not. By default, if the parameter is not provided, no embedded data is returned. The possible values are \"WithBLOBValue\" and \"WithoutBLOBValue\". The default is \"WithoutBlobValue\". There are only a few submodels that have BLOBs inside. But we can give you a generally example how the result with this modifier will look like. The name of the BLOB is \"Library\". Please note that this modifier is given as a query parameter on the endpoints. This is implemented for the following endpoints: GET /submodel/{submodelIdentifier}?extent= WithoutBLOBValue { \"Library\": { \"contentType\": \"application/octet-stream\" } } WithBLOBValue { \"Library\": { \"contentType\": \"application/octet-stream\" \"value\": \"VGhpcyBpcyBteSBibG9i\" } }","title":"Extent Modifier"},{"location":"cloud-documentation/#pagination","text":"Some data can be retrieved page by page. For this, you can pass a limit and a cursor. The limit determines the maximum size of a page, and the cursor specifies the position from which data retrieval starts. The result object of such a request contains the cursor value for the next request/page under paging_metadata.cursor. Interface example: public async Task<IActionResult> GetAllAssetAdministrationShells( [FromQuery] List<string>? assetIds = null, [FromQuery] string? idShort = null, [FromQuery] int? limit = null, [FromQuery] string? cursor = null, [FromQuery] Core.AssetKind? assetKind = null) Result Model: { \"result\": {}, \"paging_metadata\": { \"cursor\": \"\" } }","title":"Pagination"},{"location":"cloud-file-filter-queries/","text":"File Filter Queries The Twinsphere File Filter Queries allows for simplified searching of files. It uses a straightforward search model where you can specify supported meta data properties. Based on this input, the filter returns the files that match your criteria. Request Url /sphere/api/v1.0/filter/files Query Parameters Limit Cursor Request Body Include only the properties relevant to your request. Omit any fields that are unnecessary, empty, or set to their default values (as these are treated as omitted). All provided filter parameters are combined using a logical AND. { \"fileName\": \"string\", \"displayName\": \"string\", \"contentType\": \"string\", \"minimumFileSize\": 0, \"maximumFileSize\": 0, \"creationDateStart\": \"2025-10-27T13:56:19.594Z\", \"creationDateEnd\": \"2025-10-27T13:56:19.594Z\", \"updatedDateStart\": \"2025-10-27T13:56:19.594Z\", \"updatedDateEnd\": \"2025-10-27T13:56:19.594Z\", \"createdByPrincipal\": \"string\", \"updatedByPrincipal\": \"string\", \"documentClassification\": \"string\", \"customAttributes\": [ { \"key\": \"string\", \"value\": \"string\" } ] } Properties with expected format or options : File Sizes: Value in bytes Creation and Updated Dates: RFC 3339 Principals: Full principal value, e.g. an e-mail address Document Classification: Classification ID according to VDI 2770. For more information, refer for example to the IDTA Submodel Handover documentation Custom Attributes: Any key\u2013value pairs. Each key must be unique within the files meta data Regex Support To use regular expressions instead of exact matches, prefix your regex with \" $regex= \" and provide it as a property value. For example: $regex= conplement.* Regex Support File Name Display Name","title":"File Filter Queries"},{"location":"cloud-file-filter-queries/#file-filter-queries","text":"The Twinsphere File Filter Queries allows for simplified searching of files. It uses a straightforward search model where you can specify supported meta data properties. Based on this input, the filter returns the files that match your criteria.","title":"File Filter Queries"},{"location":"cloud-file-filter-queries/#request","text":"","title":"Request"},{"location":"cloud-file-filter-queries/#url","text":"/sphere/api/v1.0/filter/files","title":"Url"},{"location":"cloud-file-filter-queries/#query-parameters","text":"Limit Cursor","title":"Query Parameters"},{"location":"cloud-file-filter-queries/#request-body","text":"Include only the properties relevant to your request. Omit any fields that are unnecessary, empty, or set to their default values (as these are treated as omitted). All provided filter parameters are combined using a logical AND. { \"fileName\": \"string\", \"displayName\": \"string\", \"contentType\": \"string\", \"minimumFileSize\": 0, \"maximumFileSize\": 0, \"creationDateStart\": \"2025-10-27T13:56:19.594Z\", \"creationDateEnd\": \"2025-10-27T13:56:19.594Z\", \"updatedDateStart\": \"2025-10-27T13:56:19.594Z\", \"updatedDateEnd\": \"2025-10-27T13:56:19.594Z\", \"createdByPrincipal\": \"string\", \"updatedByPrincipal\": \"string\", \"documentClassification\": \"string\", \"customAttributes\": [ { \"key\": \"string\", \"value\": \"string\" } ] } Properties with expected format or options : File Sizes: Value in bytes Creation and Updated Dates: RFC 3339 Principals: Full principal value, e.g. an e-mail address Document Classification: Classification ID according to VDI 2770. For more information, refer for example to the IDTA Submodel Handover documentation Custom Attributes: Any key\u2013value pairs. Each key must be unique within the files meta data","title":"Request Body"},{"location":"cloud-file-filter-queries/#regex-support","text":"To use regular expressions instead of exact matches, prefix your regex with \" $regex= \" and provide it as a property value. For example: $regex= conplement.*","title":"Regex Support"},{"location":"cloud-file-filter-queries/#regex-support_1","text":"File Name Display Name","title":"Regex Support"},{"location":"cloud-filter-queries/","text":"Shell Filter Queries The Twinsphere Shell Filter Queries allows for simplified searching of shells. It uses a straightforward search model where you can specify supported shell and submodel properties. Based on this input, the filter returns the shells that match your criteria. Request Url /sphere/api/v1.0/filter/shells Query Parameters Limit Cursor Request Body Include only the properties relevant to your request. Omit any fields that are unnecessary, empty, or set to their default values (as these are treated as omitted). All provided filter parameters are combined using a logical AND. { \"language\": \"string\", \"shellFilter\": { \"id\": \"string\", \"globalAssetId\": \"string\", \"idShort\": \"string\", \"assetKind\": \"Type\", \"displayName\": \"string\" }, \"submodelFilter\": { \"semanticId\": \"string\", \"nameplateFilter\": { \"productArticleNumberOfManufacturer\": \"string\", \"orderCodeOfManufacturer\": \"string\", \"manufacturerProductDesignation\": \"string\", \"serialNumber\": \"string\", \"yearOfConstructionMin\": 0, \"yearOfConstructionMax\": 0, \"manufacturerName\": \"string\" } } } Properties with expected format or options : language: Accepts any language key, such as \"en-US\", \"en\", \"us\", or \"de\". If no language is specified, the search will be performed across all languages assetKind: \"Instance\" or \"Type\" yearOfConstructionMin: Positive Number e.g: 2025 yearOfConstructionMax: Positive Number e.g: 2025 Regex Support To use regular expressions instead of exact matches, prefix your regex with \" $regex= \" and provide it as a property value. For example: $regex= conplement.* Shell Regex Support id idshort displayname globalAssetId semanticId Nameplate Regex Support productArticleNumberOfManufacturer orderCodeOfManufacturer manufacturerProductDesignation serialNumber manufacturerName","title":"Shell Filter Queries"},{"location":"cloud-filter-queries/#shell-filter-queries","text":"The Twinsphere Shell Filter Queries allows for simplified searching of shells. It uses a straightforward search model where you can specify supported shell and submodel properties. Based on this input, the filter returns the shells that match your criteria.","title":"Shell Filter Queries"},{"location":"cloud-filter-queries/#request","text":"","title":"Request"},{"location":"cloud-filter-queries/#url","text":"/sphere/api/v1.0/filter/shells","title":"Url"},{"location":"cloud-filter-queries/#query-parameters","text":"Limit Cursor","title":"Query Parameters"},{"location":"cloud-filter-queries/#request-body","text":"Include only the properties relevant to your request. Omit any fields that are unnecessary, empty, or set to their default values (as these are treated as omitted). All provided filter parameters are combined using a logical AND. { \"language\": \"string\", \"shellFilter\": { \"id\": \"string\", \"globalAssetId\": \"string\", \"idShort\": \"string\", \"assetKind\": \"Type\", \"displayName\": \"string\" }, \"submodelFilter\": { \"semanticId\": \"string\", \"nameplateFilter\": { \"productArticleNumberOfManufacturer\": \"string\", \"orderCodeOfManufacturer\": \"string\", \"manufacturerProductDesignation\": \"string\", \"serialNumber\": \"string\", \"yearOfConstructionMin\": 0, \"yearOfConstructionMax\": 0, \"manufacturerName\": \"string\" } } } Properties with expected format or options : language: Accepts any language key, such as \"en-US\", \"en\", \"us\", or \"de\". If no language is specified, the search will be performed across all languages assetKind: \"Instance\" or \"Type\" yearOfConstructionMin: Positive Number e.g: 2025 yearOfConstructionMax: Positive Number e.g: 2025","title":"Request Body"},{"location":"cloud-filter-queries/#regex-support","text":"To use regular expressions instead of exact matches, prefix your regex with \" $regex= \" and provide it as a property value. For example: $regex= conplement.*","title":"Regex Support"},{"location":"cloud-filter-queries/#shell-regex-support","text":"id idshort displayname globalAssetId semanticId","title":"Shell Regex Support"},{"location":"cloud-filter-queries/#nameplate-regex-support","text":"productArticleNumberOfManufacturer orderCodeOfManufacturer manufacturerProductDesignation serialNumber manufacturerName","title":"Nameplate Regex Support"},{"location":"cloud-proprietary-features/","text":"Proprietary Features In addition to the IDTA AAS API Specification, twinsphere offers supplementary proprietary features: Import of AASX packages Enhanced GET /shells Enhanced GET /submodels File Repository Implicit Discovery Implicit AAS & Submodel Registry Change Events Search Semantic Connector Filter Queries","title":"Overview"},{"location":"cloud-proprietary-features/#proprietary-features","text":"In addition to the IDTA AAS API Specification, twinsphere offers supplementary proprietary features: Import of AASX packages Enhanced GET /shells Enhanced GET /submodels File Repository Implicit Discovery Implicit AAS & Submodel Registry Change Events Search Semantic Connector Filter Queries","title":"Proprietary Features"},{"location":"cloud-push-service/","text":"Push Service The twinsphere push service allows you to push serialized asset administration shells from your twinsphere tenant to any of the configurable endpoints. Take a look at the Swagger for more API documentation around each parameter and return value. To send AAS data to a desired target, the following procedure must be followed: Create a valid target via the API Create a new push job with the IDs of the shells and submodels you want to push Target management Target management is performed through /sphere/push/targets/* endpoints. To create or update a target, use the /sphere/push/targets/{name} endpoint (you need to choose a name for the target yourself), and post the JSON configuration as the body depending on the target itself (see supported targets below). Note Please make sure that the target is reachable from the internet! Supported Targets Azure Blob Storage To connect to the Azure Blob Storage, you need to create a Blob container in advance. Please issue a Shared access token with full rights and insert the \"Blob SAS URL\" with the configuration body as in the example below: { \"name\": \"...\", \"type\": \"azure-blob-storage\", \"configuration\": { \"blobContainerSasUrl\": \"...\" } } Note blobContainerSasUrl should include the http target, blob container name and the secret required for the connection! Make sure to use the URL value starting with https . For more information on how to obtain your container SAS URL visit: Azure Storage SAS Overview \u29c9 Connection information will be handled as secret and stored in encrypted form. AASX File Server To connect to the AASX File Server, you need to create the following configuration as in the example below: { \"name\": \"...\", \"type\": \"aasx-file-server\", \"configuration\": { \"credentials\": { \"accessTokenUrl\": \"...\", \"clientId\": \"...\", \"clientSecret\": \"...\" }, \"destination\": { \"endpointUrl\": \"...\" } } } Note The AASX File Server only supports the application/asset-administration-shell-package+json serialization format. All URLs must be absolute and point to your access token or push target resource. A name is not required in the request body when calling the update target endpoint. Job management To perform a push from twinsphere repository to one of your targets, you have to create a push job. Push jobs are managed through /sphere/push/jobs/* endpoints. Since push jobs can take longer time to perform, asynchronous REST pattern is used. Job you POST on /sphere/push/jobs will return an identifier, which you can use with GET on /sphere/push/jobs/{id} to query the state of the job. Refer to Swagger documentation (on /swagger/index.html ) for the push job configuration options. We currently support pushing of shells, submodels and concept descriptions. Output serialization formats supported are: application/json application/xml application/asset-administration-shell-package+json If the job failed, you can see the reason inside the message property. Most issue occur due to invalid target configuration parameters or network connectivity issues between the twinsphere service and the target itself. If you can not do anything with the error in the message, please contact our support and ask for more detailed help.","title":"Push Service"},{"location":"cloud-push-service/#push-service","text":"The twinsphere push service allows you to push serialized asset administration shells from your twinsphere tenant to any of the configurable endpoints. Take a look at the Swagger for more API documentation around each parameter and return value. To send AAS data to a desired target, the following procedure must be followed: Create a valid target via the API Create a new push job with the IDs of the shells and submodels you want to push","title":"Push Service"},{"location":"cloud-push-service/#target-management","text":"Target management is performed through /sphere/push/targets/* endpoints. To create or update a target, use the /sphere/push/targets/{name} endpoint (you need to choose a name for the target yourself), and post the JSON configuration as the body depending on the target itself (see supported targets below). Note Please make sure that the target is reachable from the internet!","title":"Target management"},{"location":"cloud-push-service/#supported-targets","text":"","title":"Supported Targets"},{"location":"cloud-push-service/#azure-blob-storage","text":"To connect to the Azure Blob Storage, you need to create a Blob container in advance. Please issue a Shared access token with full rights and insert the \"Blob SAS URL\" with the configuration body as in the example below: { \"name\": \"...\", \"type\": \"azure-blob-storage\", \"configuration\": { \"blobContainerSasUrl\": \"...\" } } Note blobContainerSasUrl should include the http target, blob container name and the secret required for the connection! Make sure to use the URL value starting with https . For more information on how to obtain your container SAS URL visit: Azure Storage SAS Overview \u29c9 Connection information will be handled as secret and stored in encrypted form.","title":"Azure Blob Storage"},{"location":"cloud-push-service/#aasx-file-server","text":"To connect to the AASX File Server, you need to create the following configuration as in the example below: { \"name\": \"...\", \"type\": \"aasx-file-server\", \"configuration\": { \"credentials\": { \"accessTokenUrl\": \"...\", \"clientId\": \"...\", \"clientSecret\": \"...\" }, \"destination\": { \"endpointUrl\": \"...\" } } } Note The AASX File Server only supports the application/asset-administration-shell-package+json serialization format. All URLs must be absolute and point to your access token or push target resource. A name is not required in the request body when calling the update target endpoint.","title":"AASX File Server"},{"location":"cloud-push-service/#job-management","text":"To perform a push from twinsphere repository to one of your targets, you have to create a push job. Push jobs are managed through /sphere/push/jobs/* endpoints. Since push jobs can take longer time to perform, asynchronous REST pattern is used. Job you POST on /sphere/push/jobs will return an identifier, which you can use with GET on /sphere/push/jobs/{id} to query the state of the job. Refer to Swagger documentation (on /swagger/index.html ) for the push job configuration options. We currently support pushing of shells, submodels and concept descriptions. Output serialization formats supported are: application/json application/xml application/asset-administration-shell-package+json If the job failed, you can see the reason inside the message property. Most issue occur due to invalid target configuration parameters or network connectivity issues between the twinsphere service and the target itself. If you can not do anything with the error in the message, please contact our support and ask for more detailed help.","title":"Job management"},{"location":"cloud-release-notes/","text":"Release Notes of twinsphere Server / API The twinsphere Server follows the semantic versioning format in the form major.minor.patch: https://semver.org/ \u29c9 . Cloud 1.20 23-Oct-2025 [Files] Automatic capture of metadata on twinsphere files during file upload [Files] Data migration of existing twinsphere files to adhere to new metadata concept [Files] Introduced new file metadata API endpoints for adding even more (custom) metadata to twinsphere files Cloud 1.19.1 22-Oct-2025 [DevOps] Cluster Optimization: Introduced \"tiers\" tenant level for an optimized resource request/limit configuration [DataMgmt] Introduced optimistic concurrency handling for most of our CRUD operations [ManageAPI] Added /me endpoint showing organizations and tenant assignments of logged in user Cloud 1.19 20-Oct-2025 [OrgMgmt] Unified RBAC: New roles added for fine-grained authorization at the endpoint level [ManageAPI] Added role assignment endpoints [ManageAPI] Added user invite functionality to assign users to organizations [ManageAPI] Added service account functionality (with basic secret rotation) [Bugfix] Fixed /import validation to ignore File SME with empty value (was too strict before) Cloud 1.18 12-Aug-2025 [IDTA] Now supporting meta-model specification V3.0.2 [IDTA] Now supporting API specification V3.0.4 [Push] Added POST endpoint to sphere API for registration of new Push Targets [Push] Added new Push Target support for AASX File Servers [Files] Redesign of twinsphere's file handling including support for external file references - finally :) Added support for Blob SME to the /attachment endpoints Kept functionality with twinsphere file paths (TFS) in File SME for /attachment and package serialization External file links are treated as such and not as files (package serialization includes link not file and /attachment supports blobs and TFS only) [Bugfix] Fixed encoding of location header value in operation PostSubmodel Cloud 1.17 11-Jul-2025 [OrgMgmt] Introduced organizations to group and manage users and tenants Initial setup of organizations Migration of all existing users to organizations [OrgMgmt] New internal Principal context service Keeps the centralized info on \"principals\" (users and service accounts) Informs about assigned organizations, tenants, roles, etc. [ManageAPI] New twinsphere Management Service Public API which exposes automation endpoints for customers (for all product areas) New get tenants endpoint [Cloud] New internal Cloud Automation Service Used internally for tenant management and automation [Security] Established secure inter-service communication between all twinsphere services Cloud 1.16.1 09-Jul-2025 [Filter] Added further shell properties displayName, idShort and aas-id to Filter Queries Cloud 1.16 13-Jun-2025 [Filter] Introduction of Filter Queries feature, see documentation for more information Archive Cloud 1.15 24-Apr-2025 [SemConn] Introduction of Semantic Connector feature, see documentation for more information Cloud 1.14 10-Mar-2025 [Security] New \"showcase mode\" removes security layer/need for authentication on a tenant (useful for hackathons etc.) [Docs] Viewer Release Notes are now separated and not included anymore to these Server release notes [Docs] Updated viewer and validator pages Cloud 1.13 06-Feb-2025 [Auth] Added support for Azure Entra ID authentication federation (enabling SSO for customers) [Auth] Enhanced twinsphere ID login screen with twinsphere branding (logo, colors, ...) [API] Introduced content Modifier $value for a value only representation of submodels / submodel elements [API] Extended the SM repository with an optional kind filter enabling querying of templates or instances only [Push] Introduced push feature for pushing shells, submodels & concept descriptions to configurable targets Currently only Azure blob storage targets supported (MVP) more target types to be added soon (like remote shell/submodel repositories) [Docs] Added technical documentation on twinsphere ID [Docs] Documented reason and workaround for creation of invalid package files by AASX serialization [Bugfix] Prevented returning status code 500 on not decodable twinsphere file paths on file GET, PUT, DELETE endpoints Cloud 1.12 28-Nov-2024 [Viewer] Authentication by twinsphere ID Basic Auth was removed and replaced by a login button (twinsphere ID user needed) Initial default user created for every tenant [API] Content modifier $metadata, $reference and $path are now fully available [Search] Enhanced security by filtering undesired requests [Auth] Added branding to twinsphere ID login screen and emails [Viewer] Redesigned app navigation [Bugfix] Input parameter(s) assetIds of following endpoints GET /lookup/shells and GET /shells now only accepts valid JSON of type specificAssetId as specified (accepted direct assetId value before) [Bugfix] Adapted viewer to respect input format serialization of assetIds Parameter(s) for discovery endpoint GET /lookup/shells Cloud 1.11.1 07-Nov-2024 [Bugfix] Viewer now correctly displays internal segments of time series submodels Cloud 1.11 06-Nov-2024 [API] Introduction of API-Endpoints to interact with submodels on submodel element level (CRUD) Please be aware that change events will not yet be fired when changes on element level take place. [API] Removed SM-Superpaths for now due to Issue #260 \u00b7 admin-shell-io/aas-specs-api Cloud 1.10.1 29-Oct-2024 [Viewer] Added rendering of Entity and RelationshipElement types to generic view enabling display of BoM submodels Cloud 1.10 09-Oct-2024 [Auth] Added the possibility for twinsphere ID human users to login to twinsphere's Swagger UI [Security] Introduced Patch & Update Management Process to keep all component up to date Cloud 1.9.4 12-Sep-2024 [Search] Added complete end-to-end example for building a search based UI and pagination example in docs [Search] Introduced language specific indexing, increased indexing performance and optimized of index disk size Cloud 1.9.3 11-Sep-2024 [DevOps] Moved all twinsphere production cloud (shared) tenants to a dedicated kubernetes cluster Cloud 1.9.2 28-Aug-2024 [Search] We added the real names of the properties in all available languages and the unit of the value from the linked concept description to the collection object [Bugfix] /serialization now complies to the specified file name convention by naming the aas-spec file inside a created package /aasx/data.{xml|json} Cloud 1.9.1 13-Aug-2024 [API] Introduction of proprietary Implicit Shell Registry for on-the-fly generation of basic shell descriptors based on existing shell repo data [API] Introduction of proprietary Implicit Submodel Registry for on-the-fly generation of basic submodel descriptors based on existing submodel repo data [API] Made some input params optional for GET /shell-descriptors (assetIds) and GET /lookup/shells (assetKind and assetType) see Registry-Lookup should not expect assetKind and assetType as mandatory input - Issue #298 - admin-shell-io/aas-specs-api (github.com) see Discovery-Lookup not consistently specified in Part 2 and OpenAPI spec- Issue #301 - admin-shell-io/aas-specs-api (github.com) Cloud 1.9 07-Aug-2024 [Bugfix] /import now ignores package thumbnails. Instead default thumbnails of assets are used. [Security] Introduced vulnerability & patch level scanning [Search] Extended search index now supports user-defined aggregations on Properties and MultiLanguageProperties of Technical Data submodel [Auth] Introduction of OAuth2 JWT authentication (in addition to Basic Auth) based on a twinsphere ID identity provider using Azure Entra ID make it possible to use machine identity login with OAuth2 client credentials grant server swagger UI now accepts an JWT token to authenticate (human login via client credentials grant) [Auth] Introduction of mandatory role based authorization for the server (RBAC) added \"reader\" and \"contributor\" roles in case of basic auth usage, the granted authorization is \"contributor\". This enables the the further usage of all server api endpoints [Security] Enabled twinsphere ID security logging Cloud 1.8 18-Jul-2024 Added logging of all access to key store Introduction of twinsphere's search feature First index on type shell classifications of technical data submodels available (more to follow) New API endpoint /search for posting MongoDB queries based on available indexes Change Events are now an optional tenant feature and deactivated by default (opt-in, saves resource costs) Cloud 1.7 23-May-2024 Introduction of File Repository for management of files (endpoints /api/v3.0/files\u2026) Files are identified by a so called twinsphere File Path which is valid in the context of a twinsphere tenant Files can be referenced by shells or submodels using their twinsphere File Path Adaption of existing file endpoints DELETE /attachment and DELETE /thumbnail now only remove file references from SM/AAS Deletion of file itself is only possible via DELETE /files (attention: no check for existing references) PUT /attachment and PUT /thumbnail Upload new file and update reference with its new twinsphere File Path Former referenced file stays unchanged and its twinsphere File Path is still valid GET /serialization for AASX packages Packs file which can be found and ignores invalid twinsphere File Paths (non-existing files) Cloud 1.6 22-Apr-2024 New optional query parameter in GET /shells enables filtering by asset type (e.g. only type shells) Restriction of endpoints with pagination to return a maximum of 250 list elements each (limit parameter) [Bugfix] Endpoints with pagination now no longer return a cursor attribute in the PagingMetadata object when the end of the result has been reached. Cloud 1.5.1 15-Apr-2024 Introduction of \u201cfriendly\u201d tenant names in the URLs: .cloud.twinsphere.io By default, Tenant was accessible via a maximum 6-character Alternatively, now any can be assigned to the URL When using such a , the previous URL remains temporarily accessible until 10-May-2024 [Bugfix] /serialization now also generates valid AASX packages in the case of AAS/SM without referenced files Cloud 1.5 09-Apr-2024 Accessibility of the twinsphere Server API under new domain .cloud.twinsphere.io Previous URL .aas.conplement.cloud remains temporarily accessible until 10-May-2024 AAS Registry Service Multiple independent instances can be used, each with a separate database Optional service, must first be set up by the twinsphere team under a freely selectable instance name API accessible at .cloud.twinsphere.io/{instance}/api/v3.0/shell-descriptors Discovery Service Multiple independent instances can be used, each with a separate database Optional service, must first be set up by the twinsphere team under a freely selectable instance name API accessible at .cloud.twinsphere.io/{instance}/api/v3.0/lookup/shells Runs in parallel to \u201cimplicit discovery\u201d, which enables a lookup of all assets/AAS contained in the AAS repository (\u201cDiscoveryRead\u201d) [Bugfix] Preflight with direct API access from the browser now possible without any problems Cloud 1.4 27-Mar-2024 Separation of the submodel repository and conversion of the SM repo superpaths to the original root paths Original SM repo superpaths are still temporarily available via redirects Introduction of referable file paths to reuse uploaded files and avoid file duplicates HTTP Access Headers of the API now allow access from any Origins (Access-Control-Allow-Origin: *) Facilitates the direct integration of the twinsphere API into frontend applications Cloud 1.3.1 15-Mar-2024 Gzip compression of the message payload of the change events Allows the transport of larger submodels beyond the Azure Event Grid MQTT message size limit of 512kB For usage and notes see Change Events Update of the aas-core-works metamodel to v1.0.1 [Bugfix] for Origin URL in packaging (see release aas-package3-csharp 1.0.1 ) relevant for validation of the metamodel (see release aas-core3.0-csharp 1.0.1 ) Cloud 1.3 13-Mar-2024 Change event mechanism for cyclical information about changes to AAS & SM For setup and usage please refer to Change Events Payload of the event contains changed state of the changed AAS /SMs [Bugfix] GET /shells/ /submodels now returns none instead of incorrectly all available SMs for shells without SMs Cloud 1.2.1 28-Feb-2024 [Bugfix] Fixed GetThumbnail operation for existing thumbnails (no more 404 \"Document mapping was not found...\" ) Cloud 1.2 27-Feb-2024 Introduction of a change log Logging of any creation, modification and deletion of AAS and SM Purely internal function required by the change events mechanism Job Scheduler component \u201cWeaver\u201d Necessary structures for setting up regularly running jobs e.g. in preparation for the change events mechanism Change Log Cleanup Job Regularly cleans up the change log and thus saves storage costs Extension of internal service monitoring Improved validation by updating to the latest metamodel aas-core3.0-csharp v1.0 [Bugfix] Prevention of multiple output of file attachments during serialization [Bugfix] Exclusive inclusion of referenced concept descriptions in serialized AASX packages [Bugfix] Extent modifier now only filters blobs and no more Base64 strings (\u201cStatusValue\u201d bug) [Bugfix] AASX package serialization no longer returns a 404 error code for assets without thumbnail Cloud 1.1.3 15-Feb-2024 [Bugfix] Fixed missing query param assetIds for API endpoint /shells/$references Cloud 1.1.2 12-Feb-2024 [Bugfix] /serialization now produces correct results for request on only AAS- or SM-IDs [Bugfix] a revised swagger.json now also enables automated client generation with NSwag Cloud 1.1.1 07-Feb-2024 [Bugfix] Correction of our monitoring components (only internal) Cloud 1.1 15-Feb-2024 Serialization interface to output specific asset administration shells and submodels in the desired format Return formats include JSON, XML and AASX Realizes the download of AASX packages, including those that only (should) contain a subset of SMs Returned either with or without concept descriptions Pagination for page-by-page retrieval of list data All GET operations that can potentially return larger data sets have been equipped with pagination Extent modifier for filtering BLOB elements for certain requests Binary data embedded in submodels does not have to be retrieved/serialized if required Content modifier $metadata Only returns meta information of an element, not its value. Content modifier $reference Only returns the reference to found elements Content modifier $path Returns the idShort of the requested element and a list of idShort paths to subordinate elements. Cloud 1.0.2 16-Jan-2024 [Bugfix] Spec-compliant result objects are now returned for unsuccessful API requests [Bugfix] API now supports Base64URL-encoded identifiers with and (new) also without padding See Base64 with padding or not - Issue #42 - admin-shell-io/aas-specs-api (github.com) Usage note: When using in Swagger, please specify the padding characters (=) non-url-encoded if required, as this client performs url-safe-encoding anyway - it is best to omit them altogether. Cloud 1.0 22-Dez-2023 Creation and deletion of submodel references in an existing AAS Concept Description Repository Create, modify, delete and retrieve concept descriptions Import endpoint now also processes the concept descriptions of an AASX package [Bugfix] POST/PUT methods produce an error 500 with invalid JSON (e.g. only {}) in case of an error Cloud 0.4 12-Dez-2023 Creation, modification and deletion of asset administration shells Retrieving and changing the asset information of an AAS Creation, modification and deletion of submodels Modification and deletion of thumbnails and other files/documents Cloud 0.3.4 10-Nov-2023 [Bugfix] Optional XML prolog in aas-spec file within AASX package now possible Cloud 0.3.3 07-Nov-2023 [Bugfix] Sphere import endpoint does now overwrite shell/submodel data. Cloud 0.3.2 06-Nov-2023 [Bugfix] return pageable at GetAllSubmodellReferences Enhanced Swagger API documentation Cloud 0.3 31-Oct-2023 AASX Import (Part 2: without Concept Descriptions) Included AAS, submodels and files are imported Currently no processing of concept descriptions Discovery from globalAssetId or specificAssetId to aasId (for QR code resolution) Retrieval of AAS, submodels, thumbnails and other files/documents Cloud 0.2 20-Oct-2023 Basic Auth for (initially simple) access protection of the API Upload and retrieval of AAS Import AASX package (part 1: processing of AAS and SM only) Proprietary endpoint for upload via SDK Cloud 0.1 09-Oct-2023 Architecture of the platform Automation of the infrastructure as infrastructure-as-code Setting up build servers and CI/CD pipelines","title":"Release Notes"},{"location":"cloud-release-notes/#release-notes-of-twinsphere-server-api","text":"The twinsphere Server follows the semantic versioning format in the form major.minor.patch: https://semver.org/ \u29c9 .","title":"Release Notes of twinsphere Server / API"},{"location":"cloud-release-notes/#cloud-120","text":"23-Oct-2025 [Files] Automatic capture of metadata on twinsphere files during file upload [Files] Data migration of existing twinsphere files to adhere to new metadata concept [Files] Introduced new file metadata API endpoints for adding even more (custom) metadata to twinsphere files","title":"Cloud 1.20"},{"location":"cloud-release-notes/#cloud-1191","text":"22-Oct-2025 [DevOps] Cluster Optimization: Introduced \"tiers\" tenant level for an optimized resource request/limit configuration [DataMgmt] Introduced optimistic concurrency handling for most of our CRUD operations [ManageAPI] Added /me endpoint showing organizations and tenant assignments of logged in user","title":"Cloud 1.19.1"},{"location":"cloud-release-notes/#cloud-119","text":"20-Oct-2025 [OrgMgmt] Unified RBAC: New roles added for fine-grained authorization at the endpoint level [ManageAPI] Added role assignment endpoints [ManageAPI] Added user invite functionality to assign users to organizations [ManageAPI] Added service account functionality (with basic secret rotation) [Bugfix] Fixed /import validation to ignore File SME with empty value (was too strict before)","title":"Cloud 1.19"},{"location":"cloud-release-notes/#cloud-118","text":"12-Aug-2025 [IDTA] Now supporting meta-model specification V3.0.2 [IDTA] Now supporting API specification V3.0.4 [Push] Added POST endpoint to sphere API for registration of new Push Targets [Push] Added new Push Target support for AASX File Servers [Files] Redesign of twinsphere's file handling including support for external file references - finally :) Added support for Blob SME to the /attachment endpoints Kept functionality with twinsphere file paths (TFS) in File SME for /attachment and package serialization External file links are treated as such and not as files (package serialization includes link not file and /attachment supports blobs and TFS only) [Bugfix] Fixed encoding of location header value in operation PostSubmodel","title":"Cloud 1.18"},{"location":"cloud-release-notes/#cloud-117","text":"11-Jul-2025 [OrgMgmt] Introduced organizations to group and manage users and tenants Initial setup of organizations Migration of all existing users to organizations [OrgMgmt] New internal Principal context service Keeps the centralized info on \"principals\" (users and service accounts) Informs about assigned organizations, tenants, roles, etc. [ManageAPI] New twinsphere Management Service Public API which exposes automation endpoints for customers (for all product areas) New get tenants endpoint [Cloud] New internal Cloud Automation Service Used internally for tenant management and automation [Security] Established secure inter-service communication between all twinsphere services","title":"Cloud 1.17"},{"location":"cloud-release-notes/#cloud-1161","text":"09-Jul-2025 [Filter] Added further shell properties displayName, idShort and aas-id to Filter Queries","title":"Cloud 1.16.1"},{"location":"cloud-release-notes/#cloud-116","text":"13-Jun-2025 [Filter] Introduction of Filter Queries feature, see documentation for more information","title":"Cloud 1.16"},{"location":"cloud-release-notes/#archive","text":"","title":"Archive"},{"location":"cloud-release-notes/#cloud-115","text":"24-Apr-2025 [SemConn] Introduction of Semantic Connector feature, see documentation for more information","title":"Cloud 1.15"},{"location":"cloud-release-notes/#cloud-114","text":"10-Mar-2025 [Security] New \"showcase mode\" removes security layer/need for authentication on a tenant (useful for hackathons etc.) [Docs] Viewer Release Notes are now separated and not included anymore to these Server release notes [Docs] Updated viewer and validator pages","title":"Cloud 1.14"},{"location":"cloud-release-notes/#cloud-113","text":"06-Feb-2025 [Auth] Added support for Azure Entra ID authentication federation (enabling SSO for customers) [Auth] Enhanced twinsphere ID login screen with twinsphere branding (logo, colors, ...) [API] Introduced content Modifier $value for a value only representation of submodels / submodel elements [API] Extended the SM repository with an optional kind filter enabling querying of templates or instances only [Push] Introduced push feature for pushing shells, submodels & concept descriptions to configurable targets Currently only Azure blob storage targets supported (MVP) more target types to be added soon (like remote shell/submodel repositories) [Docs] Added technical documentation on twinsphere ID [Docs] Documented reason and workaround for creation of invalid package files by AASX serialization [Bugfix] Prevented returning status code 500 on not decodable twinsphere file paths on file GET, PUT, DELETE endpoints","title":"Cloud 1.13"},{"location":"cloud-release-notes/#cloud-112","text":"28-Nov-2024 [Viewer] Authentication by twinsphere ID Basic Auth was removed and replaced by a login button (twinsphere ID user needed) Initial default user created for every tenant [API] Content modifier $metadata, $reference and $path are now fully available [Search] Enhanced security by filtering undesired requests [Auth] Added branding to twinsphere ID login screen and emails [Viewer] Redesigned app navigation [Bugfix] Input parameter(s) assetIds of following endpoints GET /lookup/shells and GET /shells now only accepts valid JSON of type specificAssetId as specified (accepted direct assetId value before) [Bugfix] Adapted viewer to respect input format serialization of assetIds Parameter(s) for discovery endpoint GET /lookup/shells","title":"Cloud 1.12"},{"location":"cloud-release-notes/#cloud-1111","text":"07-Nov-2024 [Bugfix] Viewer now correctly displays internal segments of time series submodels","title":"Cloud 1.11.1"},{"location":"cloud-release-notes/#cloud-111","text":"06-Nov-2024 [API] Introduction of API-Endpoints to interact with submodels on submodel element level (CRUD) Please be aware that change events will not yet be fired when changes on element level take place. [API] Removed SM-Superpaths for now due to Issue #260 \u00b7 admin-shell-io/aas-specs-api","title":"Cloud 1.11"},{"location":"cloud-release-notes/#cloud-1101","text":"29-Oct-2024 [Viewer] Added rendering of Entity and RelationshipElement types to generic view enabling display of BoM submodels","title":"Cloud 1.10.1"},{"location":"cloud-release-notes/#cloud-110","text":"09-Oct-2024 [Auth] Added the possibility for twinsphere ID human users to login to twinsphere's Swagger UI [Security] Introduced Patch & Update Management Process to keep all component up to date","title":"Cloud 1.10"},{"location":"cloud-release-notes/#cloud-194","text":"12-Sep-2024 [Search] Added complete end-to-end example for building a search based UI and pagination example in docs [Search] Introduced language specific indexing, increased indexing performance and optimized of index disk size","title":"Cloud 1.9.4"},{"location":"cloud-release-notes/#cloud-193","text":"11-Sep-2024 [DevOps] Moved all twinsphere production cloud (shared) tenants to a dedicated kubernetes cluster","title":"Cloud 1.9.3"},{"location":"cloud-release-notes/#cloud-192","text":"28-Aug-2024 [Search] We added the real names of the properties in all available languages and the unit of the value from the linked concept description to the collection object [Bugfix] /serialization now complies to the specified file name convention by naming the aas-spec file inside a created package /aasx/data.{xml|json}","title":"Cloud 1.9.2"},{"location":"cloud-release-notes/#cloud-191","text":"13-Aug-2024 [API] Introduction of proprietary Implicit Shell Registry for on-the-fly generation of basic shell descriptors based on existing shell repo data [API] Introduction of proprietary Implicit Submodel Registry for on-the-fly generation of basic submodel descriptors based on existing submodel repo data [API] Made some input params optional for GET /shell-descriptors (assetIds) and GET /lookup/shells (assetKind and assetType) see Registry-Lookup should not expect assetKind and assetType as mandatory input - Issue #298 - admin-shell-io/aas-specs-api (github.com) see Discovery-Lookup not consistently specified in Part 2 and OpenAPI spec- Issue #301 - admin-shell-io/aas-specs-api (github.com)","title":"Cloud 1.9.1"},{"location":"cloud-release-notes/#cloud-19","text":"07-Aug-2024 [Bugfix] /import now ignores package thumbnails. Instead default thumbnails of assets are used. [Security] Introduced vulnerability & patch level scanning [Search] Extended search index now supports user-defined aggregations on Properties and MultiLanguageProperties of Technical Data submodel [Auth] Introduction of OAuth2 JWT authentication (in addition to Basic Auth) based on a twinsphere ID identity provider using Azure Entra ID make it possible to use machine identity login with OAuth2 client credentials grant server swagger UI now accepts an JWT token to authenticate (human login via client credentials grant) [Auth] Introduction of mandatory role based authorization for the server (RBAC) added \"reader\" and \"contributor\" roles in case of basic auth usage, the granted authorization is \"contributor\". This enables the the further usage of all server api endpoints [Security] Enabled twinsphere ID security logging","title":"Cloud 1.9"},{"location":"cloud-release-notes/#cloud-18","text":"18-Jul-2024 Added logging of all access to key store Introduction of twinsphere's search feature First index on type shell classifications of technical data submodels available (more to follow) New API endpoint /search for posting MongoDB queries based on available indexes Change Events are now an optional tenant feature and deactivated by default (opt-in, saves resource costs)","title":"Cloud 1.8"},{"location":"cloud-release-notes/#cloud-17","text":"23-May-2024 Introduction of File Repository for management of files (endpoints /api/v3.0/files\u2026) Files are identified by a so called twinsphere File Path which is valid in the context of a twinsphere tenant Files can be referenced by shells or submodels using their twinsphere File Path Adaption of existing file endpoints DELETE /attachment and DELETE /thumbnail now only remove file references from SM/AAS Deletion of file itself is only possible via DELETE /files (attention: no check for existing references) PUT /attachment and PUT /thumbnail Upload new file and update reference with its new twinsphere File Path Former referenced file stays unchanged and its twinsphere File Path is still valid GET /serialization for AASX packages Packs file which can be found and ignores invalid twinsphere File Paths (non-existing files)","title":"Cloud 1.7"},{"location":"cloud-release-notes/#cloud-16","text":"22-Apr-2024 New optional query parameter in GET /shells enables filtering by asset type (e.g. only type shells) Restriction of endpoints with pagination to return a maximum of 250 list elements each (limit parameter) [Bugfix] Endpoints with pagination now no longer return a cursor attribute in the PagingMetadata object when the end of the result has been reached.","title":"Cloud 1.6"},{"location":"cloud-release-notes/#cloud-151","text":"15-Apr-2024 Introduction of \u201cfriendly\u201d tenant names in the URLs: .cloud.twinsphere.io By default, Tenant was accessible via a maximum 6-character Alternatively, now any can be assigned to the URL When using such a , the previous URL remains temporarily accessible until 10-May-2024 [Bugfix] /serialization now also generates valid AASX packages in the case of AAS/SM without referenced files","title":"Cloud 1.5.1"},{"location":"cloud-release-notes/#cloud-15","text":"09-Apr-2024 Accessibility of the twinsphere Server API under new domain .cloud.twinsphere.io Previous URL .aas.conplement.cloud remains temporarily accessible until 10-May-2024 AAS Registry Service Multiple independent instances can be used, each with a separate database Optional service, must first be set up by the twinsphere team under a freely selectable instance name API accessible at .cloud.twinsphere.io/{instance}/api/v3.0/shell-descriptors Discovery Service Multiple independent instances can be used, each with a separate database Optional service, must first be set up by the twinsphere team under a freely selectable instance name API accessible at .cloud.twinsphere.io/{instance}/api/v3.0/lookup/shells Runs in parallel to \u201cimplicit discovery\u201d, which enables a lookup of all assets/AAS contained in the AAS repository (\u201cDiscoveryRead\u201d) [Bugfix] Preflight with direct API access from the browser now possible without any problems","title":"Cloud 1.5"},{"location":"cloud-release-notes/#cloud-14","text":"27-Mar-2024 Separation of the submodel repository and conversion of the SM repo superpaths to the original root paths Original SM repo superpaths are still temporarily available via redirects Introduction of referable file paths to reuse uploaded files and avoid file duplicates HTTP Access Headers of the API now allow access from any Origins (Access-Control-Allow-Origin: *) Facilitates the direct integration of the twinsphere API into frontend applications","title":"Cloud 1.4"},{"location":"cloud-release-notes/#cloud-131","text":"15-Mar-2024 Gzip compression of the message payload of the change events Allows the transport of larger submodels beyond the Azure Event Grid MQTT message size limit of 512kB For usage and notes see Change Events Update of the aas-core-works metamodel to v1.0.1 [Bugfix] for Origin URL in packaging (see release aas-package3-csharp 1.0.1 ) relevant for validation of the metamodel (see release aas-core3.0-csharp 1.0.1 )","title":"Cloud 1.3.1"},{"location":"cloud-release-notes/#cloud-13","text":"13-Mar-2024 Change event mechanism for cyclical information about changes to AAS & SM For setup and usage please refer to Change Events Payload of the event contains changed state of the changed AAS /SMs [Bugfix] GET /shells/ /submodels now returns none instead of incorrectly all available SMs for shells without SMs","title":"Cloud 1.3"},{"location":"cloud-release-notes/#cloud-121","text":"28-Feb-2024 [Bugfix] Fixed GetThumbnail operation for existing thumbnails (no more 404 \"Document mapping was not found...\" )","title":"Cloud 1.2.1"},{"location":"cloud-release-notes/#cloud-12","text":"27-Feb-2024 Introduction of a change log Logging of any creation, modification and deletion of AAS and SM Purely internal function required by the change events mechanism Job Scheduler component \u201cWeaver\u201d Necessary structures for setting up regularly running jobs e.g. in preparation for the change events mechanism Change Log Cleanup Job Regularly cleans up the change log and thus saves storage costs Extension of internal service monitoring Improved validation by updating to the latest metamodel aas-core3.0-csharp v1.0 [Bugfix] Prevention of multiple output of file attachments during serialization [Bugfix] Exclusive inclusion of referenced concept descriptions in serialized AASX packages [Bugfix] Extent modifier now only filters blobs and no more Base64 strings (\u201cStatusValue\u201d bug) [Bugfix] AASX package serialization no longer returns a 404 error code for assets without thumbnail","title":"Cloud 1.2"},{"location":"cloud-release-notes/#cloud-113_1","text":"15-Feb-2024 [Bugfix] Fixed missing query param assetIds for API endpoint /shells/$references","title":"Cloud 1.1.3"},{"location":"cloud-release-notes/#cloud-112_1","text":"12-Feb-2024 [Bugfix] /serialization now produces correct results for request on only AAS- or SM-IDs [Bugfix] a revised swagger.json now also enables automated client generation with NSwag","title":"Cloud 1.1.2"},{"location":"cloud-release-notes/#cloud-111_1","text":"07-Feb-2024 [Bugfix] Correction of our monitoring components (only internal)","title":"Cloud 1.1.1"},{"location":"cloud-release-notes/#cloud-11","text":"15-Feb-2024 Serialization interface to output specific asset administration shells and submodels in the desired format Return formats include JSON, XML and AASX Realizes the download of AASX packages, including those that only (should) contain a subset of SMs Returned either with or without concept descriptions Pagination for page-by-page retrieval of list data All GET operations that can potentially return larger data sets have been equipped with pagination Extent modifier for filtering BLOB elements for certain requests Binary data embedded in submodels does not have to be retrieved/serialized if required Content modifier $metadata Only returns meta information of an element, not its value. Content modifier $reference Only returns the reference to found elements Content modifier $path Returns the idShort of the requested element and a list of idShort paths to subordinate elements.","title":"Cloud 1.1"},{"location":"cloud-release-notes/#cloud-102","text":"16-Jan-2024 [Bugfix] Spec-compliant result objects are now returned for unsuccessful API requests [Bugfix] API now supports Base64URL-encoded identifiers with and (new) also without padding See Base64 with padding or not - Issue #42 - admin-shell-io/aas-specs-api (github.com) Usage note: When using in Swagger, please specify the padding characters (=) non-url-encoded if required, as this client performs url-safe-encoding anyway - it is best to omit them altogether.","title":"Cloud 1.0.2"},{"location":"cloud-release-notes/#cloud-10","text":"22-Dez-2023 Creation and deletion of submodel references in an existing AAS Concept Description Repository Create, modify, delete and retrieve concept descriptions Import endpoint now also processes the concept descriptions of an AASX package [Bugfix] POST/PUT methods produce an error 500 with invalid JSON (e.g. only {}) in case of an error","title":"Cloud 1.0"},{"location":"cloud-release-notes/#cloud-04","text":"12-Dez-2023 Creation, modification and deletion of asset administration shells Retrieving and changing the asset information of an AAS Creation, modification and deletion of submodels Modification and deletion of thumbnails and other files/documents","title":"Cloud 0.4"},{"location":"cloud-release-notes/#cloud-034","text":"10-Nov-2023 [Bugfix] Optional XML prolog in aas-spec file within AASX package now possible","title":"Cloud 0.3.4"},{"location":"cloud-release-notes/#cloud-033","text":"07-Nov-2023 [Bugfix] Sphere import endpoint does now overwrite shell/submodel data.","title":"Cloud 0.3.3"},{"location":"cloud-release-notes/#cloud-032","text":"06-Nov-2023 [Bugfix] return pageable at GetAllSubmodellReferences Enhanced Swagger API documentation","title":"Cloud 0.3.2"},{"location":"cloud-release-notes/#cloud-03","text":"31-Oct-2023 AASX Import (Part 2: without Concept Descriptions) Included AAS, submodels and files are imported Currently no processing of concept descriptions Discovery from globalAssetId or specificAssetId to aasId (for QR code resolution) Retrieval of AAS, submodels, thumbnails and other files/documents","title":"Cloud 0.3"},{"location":"cloud-release-notes/#cloud-02","text":"20-Oct-2023 Basic Auth for (initially simple) access protection of the API Upload and retrieval of AAS Import AASX package (part 1: processing of AAS and SM only) Proprietary endpoint for upload via SDK","title":"Cloud 0.2"},{"location":"cloud-release-notes/#cloud-01","text":"09-Oct-2023 Architecture of the platform Automation of the infrastructure as infrastructure-as-code Setting up build servers and CI/CD pipelines","title":"Cloud 0.1"},{"location":"cloud-search/","text":"Search twinsphere search is a feature that allows you to use Mongo Atlas Search queries to search for shells based on their submodel data. A list of defined indexes and their schema is given below. Each index is language-specific and contains only strings in a given language. We currently support English (en-US) and German (de-DE) languages only. To search using one of the indexes, send a query via POST on the /api/v3/sphere/search endpoint. Take a look at the Swagger for more API documentation around each parameter and return value. Shell Technical classifications Index names: English: search_shell_technical_classifications_en_index German: search_shell_technical_classifications_de_index When writing queries, you need to include the language in both the index name and as a query string parameter for the HTTP request! Defined mappings : name field type explanation classifications token Classifications is an array of string identifiers. properties stringFacet Properties in an array so that you can perform facet queries to find most used properties. 0 ... N properties extracted from the technical data submodels token, stringFacet Indexed as token to be used for filtering, and as a stringFacet to enable facets for each property. Data returned in the queries as results looks something like this (based on the language, example for German): { \"_id\": \"shell-id-1\", \"classifications\": [ \"24-11\", \"24-12\", \"24-15-22\" ], \"Breite\": \"17,6 mm\", \"L\u00e4nge\": \"128,0 mm\", \"Nennstrom\": \"50,0 mA\", // further properties ... \"properties\": [ \"Breite\", \"L\u00e4nge\", \"Nennstrom\" // all properties are also listed here in this list by their name ] }, { \"_id\": \"shell-id-2\", \"classifications\": [ \"2-16\", \"24-12\", \"ABC\" ], \"Breite\": \"12,0 mm\", \"L\u00e4nge\": \"12,0 mm\", \"Einbautiefe\": \"138,3 mm\", // further properties ... \"properties\": [ \"Breite\", \"L\u00e4nge\", \"Einbautiefe\" ] }, // ... ... General querying guidelines You can use $search or $searchMeta pipeline operators. $search returns the source objects, while $searchMeta only returns the metadata like facet counts. You can use aggregation pipelines in your queries, simply provide an JSON array: [ // stage 1 { \"$search\":{ \"index\":\"...\" } }, // stage 2 { \"$project\":{ \"_id\":1 } }, // ... ] Example building a product search Let's say you want to build a classical product search, in which you want to show top used properties on the left side of the screen in a tree view, and the results on the right side. Most used properties First, you could run a query to find all most used property for a given classification: { \"$searchMeta\": { \"index\": \"search_shell_technical_classifications_de_index\", \"facet\": { \"operator\": { \"in\": { \"path\": \"classifications\", \"value\": \"24-11\" } }, \"facets\": { \"mostUsedProperties\": { \"type\": \"string\", \"path\": \"properties\" } } } } } Count the hits per property Then, based on the results, you could calculate facets by including these N most used properties in a new query like this: { \"$searchMeta\": { \"index\": \"search_shell_technical_classifications_de_index\", \"facet\": { \"operator\": { \"in\": { \"path\": \"classifications\", \"value\": \"24-11\", }, }, \"facets\": { \"Breite\": { \"type\": \"string\", \"path\": \"Breite\", }, \"L\u00e4nge\": { \"type\": \"string\", \"path\": \"L\u00e4nge\", }, \"Nennstrom\": { \"type\": \"string\", \"path\": \"Nennstrom\", }, }, }, } } To get the actual data and not only facets, you can run the same exact query with the $search operator. However, for performance reasons, you can actually fetch both the data and the metadata in a single query like this: [ { \"$search\": { \"index\": \"search_shell_technical_classifications_de_index\", \"facet\": { \"operator\": { \"in\": { \"path\": \"classifications\", \"value\": \"24-11\", }, }, \"facets\": { \"Breite\": { \"type\": \"string\", \"path\": \"Breite\", }, \"L\u00e4nge\": { \"type\": \"string\", \"path\": \"L\u00e4nge\", }, \"Nennstrom\": { \"type\": \"string\", \"path\": \"Nennstrom\", }, }, }, }, }, { \"$facet\": { \"docs\": [ { \"$replaceRoot\": { \"newRoot\": \"$$ROOT\", }, }, ], \"meta\": [ { \"$replaceWith\": \"$$SEARCH_META\", }, { \"$limit\": 1, }, ], }, }, { \"$set\": { \"meta\": { \"$arrayElemAt\": [\"$meta\", 0], }, }, }, ] Please check the Mongo Atlas Search facet documentation \u29c9 for reference. Further subquerying If you allow the user to apply further criteria to search, such as a combination of AND and OR conditions on certain properties and values, then you can construct your queries using multiple nested compound operators. The query below uses should for OR conditions and nests them under a must operator to perform an AND condition. All hits where L\u00e4nge is either 101 mm or 105 mm and Breite is 50 mm are returned. // ... \"facet\": { \"operator\": { \"compound\": { \"filter\": { \"in\": { \"path\": \"classifications\", \"value\": \"24-11\", }, }, \"must\": [ { \"compound\": { \"should\": [ { \"equals\": { \"path\": \"L\u00e4nge\", \"value\": \"101 mm\", }, }, { \"equals\": { \"path\": \"L\u00e4nge\", \"value\": \"105 mm\", }, }, ], \"minimumShouldMatch\": 1, }, }, { \"compound\": { \"should\": [ { \"equals\": { \"path\": \"Breite\", \"value\": \"50 mm\", }, }, ], \"minimumShouldMatch\": 1, }, }, ], }, }, \"facets\": { // ... Pagination To get only certain amount of docs but all of the metadata, in-build search pagination feature can be used. Mongo search pagination is cursor-based, which means that every returned document has an unique position which you could use in your next query to request searching before or after this position. To extend on our last query from above, we could use pagination like this: [ { \"$search\": { \"index\": \"search_shell_technical_classifications_de_index\", // this is a token from a document retrieved in the previous query (can be the last document on the last page) \"searchAfter\": \"CABCVABCCAPw==\", \"facet\": { \"operator\": { \"in\": { \"path\": \"classifications\", \"value\": \"24-11\", }, }, \"facets\": { \"Breite\": { \"type\": \"string\", \"path\": \"L\u00e4nge\", }, \"L\u00e4nge\": { \"type\": \"string\", \"path\": \"L\u00e4nge\", }, \"Nennstrom\": { \"type\": \"string\", \"path\": \"Nennstrom\", }, }, }, }, }, { // for each of the returned documents we want to also include the cursor in a new field called paginationToken \"$addFields\": { \"paginationToken\" : { \"$meta\" : \"searchSequenceToken\" } } }, { // page of 20 documents \"$limit\": 20 }, { \"$facet\": { \"docs\": [ { \"$replaceRoot\": { \"newRoot\": \"$$ROOT\", }, }, ], \"meta\": [ { \"$replaceWith\": \"$$SEARCH_META\", }, { \"$limit\": 1, }, ], }, }, { \"$set\": { \"meta\": { \"$arrayElemAt\": [\"$meta\", 0], }, }, }, ] Formatting of values Values delivered by search are preformatted for the language requested. For example, \"de\" index would deliver 100.000,99 and \"en\" index would deliver \"100,000.99\". Formatting rules are based on the XSD data type declared on the valueType property (of the SubmodelElement). Our logic is implemented as follows: Values are formatted depending on the target culture numerical, datetime and other settings. We keep all the decimals, no rounding will be performed. We drop the trailing zeroes (e.g. 100.000,00 becomes 100.000) for all numerical types. Unit of measure from the concept descriptions is always added on the end of the value. Special cases Indexing We currently only support Property and MultiLanguageProperty submodel elements. For property names, concept descriptions data from the repository is used. Matching is done based on the semantic identifier of each of the properties. For values we use the value from the property itself and combine it with the unit from the concept description data. Multiple properties with the same property name are NOT supported. This situation could occur for several reasons: shell reference multiple technical data submodels with same properties two properties with different semantic identifiers have same text in a given language if same properties are found, only the first one will be used and the rest will not be indexed Querying When querying, it is important to note that the property names could contain special Mongo symbols such as . or $ . Most queries should work without problem since Mongo supports such property names, but some operators, like $project might not work correctly.","title":"Search"},{"location":"cloud-search/#search","text":"twinsphere search is a feature that allows you to use Mongo Atlas Search queries to search for shells based on their submodel data. A list of defined indexes and their schema is given below. Each index is language-specific and contains only strings in a given language. We currently support English (en-US) and German (de-DE) languages only. To search using one of the indexes, send a query via POST on the /api/v3/sphere/search endpoint. Take a look at the Swagger for more API documentation around each parameter and return value.","title":"Search"},{"location":"cloud-search/#shell-technical-classifications","text":"Index names: English: search_shell_technical_classifications_en_index German: search_shell_technical_classifications_de_index When writing queries, you need to include the language in both the index name and as a query string parameter for the HTTP request! Defined mappings : name field type explanation classifications token Classifications is an array of string identifiers. properties stringFacet Properties in an array so that you can perform facet queries to find most used properties. 0 ... N properties extracted from the technical data submodels token, stringFacet Indexed as token to be used for filtering, and as a stringFacet to enable facets for each property. Data returned in the queries as results looks something like this (based on the language, example for German): { \"_id\": \"shell-id-1\", \"classifications\": [ \"24-11\", \"24-12\", \"24-15-22\" ], \"Breite\": \"17,6 mm\", \"L\u00e4nge\": \"128,0 mm\", \"Nennstrom\": \"50,0 mA\", // further properties ... \"properties\": [ \"Breite\", \"L\u00e4nge\", \"Nennstrom\" // all properties are also listed here in this list by their name ] }, { \"_id\": \"shell-id-2\", \"classifications\": [ \"2-16\", \"24-12\", \"ABC\" ], \"Breite\": \"12,0 mm\", \"L\u00e4nge\": \"12,0 mm\", \"Einbautiefe\": \"138,3 mm\", // further properties ... \"properties\": [ \"Breite\", \"L\u00e4nge\", \"Einbautiefe\" ] }, // ... ...","title":"Shell Technical classifications"},{"location":"cloud-search/#general-querying-guidelines","text":"You can use $search or $searchMeta pipeline operators. $search returns the source objects, while $searchMeta only returns the metadata like facet counts. You can use aggregation pipelines in your queries, simply provide an JSON array: [ // stage 1 { \"$search\":{ \"index\":\"...\" } }, // stage 2 { \"$project\":{ \"_id\":1 } }, // ... ]","title":"General querying guidelines"},{"location":"cloud-search/#example-building-a-product-search","text":"Let's say you want to build a classical product search, in which you want to show top used properties on the left side of the screen in a tree view, and the results on the right side.","title":"Example building a product search"},{"location":"cloud-search/#most-used-properties","text":"First, you could run a query to find all most used property for a given classification: { \"$searchMeta\": { \"index\": \"search_shell_technical_classifications_de_index\", \"facet\": { \"operator\": { \"in\": { \"path\": \"classifications\", \"value\": \"24-11\" } }, \"facets\": { \"mostUsedProperties\": { \"type\": \"string\", \"path\": \"properties\" } } } } }","title":"Most used properties"},{"location":"cloud-search/#count-the-hits-per-property","text":"Then, based on the results, you could calculate facets by including these N most used properties in a new query like this: { \"$searchMeta\": { \"index\": \"search_shell_technical_classifications_de_index\", \"facet\": { \"operator\": { \"in\": { \"path\": \"classifications\", \"value\": \"24-11\", }, }, \"facets\": { \"Breite\": { \"type\": \"string\", \"path\": \"Breite\", }, \"L\u00e4nge\": { \"type\": \"string\", \"path\": \"L\u00e4nge\", }, \"Nennstrom\": { \"type\": \"string\", \"path\": \"Nennstrom\", }, }, }, } } To get the actual data and not only facets, you can run the same exact query with the $search operator. However, for performance reasons, you can actually fetch both the data and the metadata in a single query like this: [ { \"$search\": { \"index\": \"search_shell_technical_classifications_de_index\", \"facet\": { \"operator\": { \"in\": { \"path\": \"classifications\", \"value\": \"24-11\", }, }, \"facets\": { \"Breite\": { \"type\": \"string\", \"path\": \"Breite\", }, \"L\u00e4nge\": { \"type\": \"string\", \"path\": \"L\u00e4nge\", }, \"Nennstrom\": { \"type\": \"string\", \"path\": \"Nennstrom\", }, }, }, }, }, { \"$facet\": { \"docs\": [ { \"$replaceRoot\": { \"newRoot\": \"$$ROOT\", }, }, ], \"meta\": [ { \"$replaceWith\": \"$$SEARCH_META\", }, { \"$limit\": 1, }, ], }, }, { \"$set\": { \"meta\": { \"$arrayElemAt\": [\"$meta\", 0], }, }, }, ] Please check the Mongo Atlas Search facet documentation \u29c9 for reference.","title":"Count the hits per property"},{"location":"cloud-search/#further-subquerying","text":"If you allow the user to apply further criteria to search, such as a combination of AND and OR conditions on certain properties and values, then you can construct your queries using multiple nested compound operators. The query below uses should for OR conditions and nests them under a must operator to perform an AND condition. All hits where L\u00e4nge is either 101 mm or 105 mm and Breite is 50 mm are returned. // ... \"facet\": { \"operator\": { \"compound\": { \"filter\": { \"in\": { \"path\": \"classifications\", \"value\": \"24-11\", }, }, \"must\": [ { \"compound\": { \"should\": [ { \"equals\": { \"path\": \"L\u00e4nge\", \"value\": \"101 mm\", }, }, { \"equals\": { \"path\": \"L\u00e4nge\", \"value\": \"105 mm\", }, }, ], \"minimumShouldMatch\": 1, }, }, { \"compound\": { \"should\": [ { \"equals\": { \"path\": \"Breite\", \"value\": \"50 mm\", }, }, ], \"minimumShouldMatch\": 1, }, }, ], }, }, \"facets\": { // ...","title":"Further subquerying"},{"location":"cloud-search/#pagination","text":"To get only certain amount of docs but all of the metadata, in-build search pagination feature can be used. Mongo search pagination is cursor-based, which means that every returned document has an unique position which you could use in your next query to request searching before or after this position. To extend on our last query from above, we could use pagination like this: [ { \"$search\": { \"index\": \"search_shell_technical_classifications_de_index\", // this is a token from a document retrieved in the previous query (can be the last document on the last page) \"searchAfter\": \"CABCVABCCAPw==\", \"facet\": { \"operator\": { \"in\": { \"path\": \"classifications\", \"value\": \"24-11\", }, }, \"facets\": { \"Breite\": { \"type\": \"string\", \"path\": \"L\u00e4nge\", }, \"L\u00e4nge\": { \"type\": \"string\", \"path\": \"L\u00e4nge\", }, \"Nennstrom\": { \"type\": \"string\", \"path\": \"Nennstrom\", }, }, }, }, }, { // for each of the returned documents we want to also include the cursor in a new field called paginationToken \"$addFields\": { \"paginationToken\" : { \"$meta\" : \"searchSequenceToken\" } } }, { // page of 20 documents \"$limit\": 20 }, { \"$facet\": { \"docs\": [ { \"$replaceRoot\": { \"newRoot\": \"$$ROOT\", }, }, ], \"meta\": [ { \"$replaceWith\": \"$$SEARCH_META\", }, { \"$limit\": 1, }, ], }, }, { \"$set\": { \"meta\": { \"$arrayElemAt\": [\"$meta\", 0], }, }, }, ]","title":"Pagination"},{"location":"cloud-search/#formatting-of-values","text":"Values delivered by search are preformatted for the language requested. For example, \"de\" index would deliver 100.000,99 and \"en\" index would deliver \"100,000.99\". Formatting rules are based on the XSD data type declared on the valueType property (of the SubmodelElement). Our logic is implemented as follows: Values are formatted depending on the target culture numerical, datetime and other settings. We keep all the decimals, no rounding will be performed. We drop the trailing zeroes (e.g. 100.000,00 becomes 100.000) for all numerical types. Unit of measure from the concept descriptions is always added on the end of the value.","title":"Formatting of values"},{"location":"cloud-search/#special-cases","text":"","title":"Special cases"},{"location":"cloud-search/#indexing","text":"We currently only support Property and MultiLanguageProperty submodel elements. For property names, concept descriptions data from the repository is used. Matching is done based on the semantic identifier of each of the properties. For values we use the value from the property itself and combine it with the unit from the concept description data. Multiple properties with the same property name are NOT supported. This situation could occur for several reasons: shell reference multiple technical data submodels with same properties two properties with different semantic identifiers have same text in a given language if same properties are found, only the first one will be used and the rest will not be indexed","title":"Indexing"},{"location":"cloud-search/#querying","text":"When querying, it is important to note that the property names could contain special Mongo symbols such as . or $ . Most queries should work without problem since Mongo supports such property names, but some operators, like $project might not work correctly.","title":"Querying"},{"location":"cloud-semantic-connector/","text":"Semantic Connector The twinsphere Semantic Connector enables a simplified generation of submodels. It offers a simplified format of submodel templates which makes mapping of your data to submodel properties much easier. The resulting mapped data is then converted back to a standard conform, valid submodel instances and stored in the twinsphere repository. Here is an example of some properties of the digital nameplate submodel, first in the original form of the metamodel and then in our semantic representation. Standard JSON twinsphere Semantic XML { \"idShort\": \"Markings\", \"semanticId\": { \"type\": \"ExternalReference\", \"keys\": [ { \"type\": \"GlobalReference\", \"value\": \"0173-1#01-AGZ673#001\" } ] }, \"value\": [ { \"idShort\": \"Marking00\", \"semanticId\": { \"type\": \"ExternalReference\", \"keys\": [ { \"type\": \"GlobalReference\", \"value\": \"0173-1#01-AHD206#001\" } ] }, \"value\": [ { \"idShort\": \"MarkingName\", \"semanticId\": { \"type\": \"ExternalReference\", \"keys\": [ { \"type\": \"GlobalReference\", \"value\": \"https://admin-shell.io/zvei/nameplate/2/0/Nameplate/Markings/Marking/MarkingName\" } ] }, \"valueType\": \"xs:string\", \"value\": \"0173-1#07-DAA603#004\", \"modelType\": \"Property\" }, { \"idShort\": \"IssueDate\", \"semanticId\": { \"type\": \"ExternalReference\", \"keys\": [ { \"type\": \"GlobalReference\", \"value\": \"https://admin-shell.io/zvei/nameplate/2/0/Nameplate/Markings/Marking/IssueDate\" } ] }, \"valueType\": \"xs:date\", \"value\": \"2022-01-01\", \"modelType\": \"Property\" }, { \"idShort\": \"ExpiryDate\", \"semanticId\": { \"type\": \"ExternalReference\", \"keys\": [ { \"type\": \"GlobalReference\", \"value\": \"https://admin-shell.io/zvei/nameplate/2/0/Nameplate/Markings/Marking/ExpiryDate\" } ] }, \"valueType\": \"xs:date\", \"value\": \"2022-01-01\", \"modelType\": \"Property\" } ... ], \"modelType\": \"SubmodelElementCollection\" } ], \"modelType\": \"SubmodelElementCollection\" } <Markings> <Marking> <MarkingName>0173-1#07-DAA603#004</MarkingName> <IssueDate>2022-01-01</IssueDate> <ExpiryDate>2022-01-01</ExpiryDate> ... </Marking> </Markings> As you can see all complex AAS metadata information is hidden to make the semantic format (which we call \"semantic submodels\" or \"semantic submodel instances\") easy to understand - even for non AAS experts. Simple key/value pairs. We believe that mapping data to this more comprehensive form should be much easier. REMARK Semantic submodels and the value-only serialization of the AAS standard are not the same - even if they look similar. The value-only format can not be converted back to its original form, our semantic submodels can! Semantic Submodels are described via XML schemas (which we call \"semantic submodel schemas\"). We derive these schemas from the structure and rules defined in the submodel templates. An example of such schema is given below: ... <xs:complexType name=\"MarkingsMarkingItem_t\"> <xs:sequence> <xs:element name=\"MarkingName\" type=\"xs:string\" maxOccurs=\"1\" minOccurs=\"1\"/> <xs:element name=\"DesignationOfCertificateOrApproval\" type=\"xs:string\" maxOccurs=\"1\" minOccurs=\"0\"/> <xs:element name=\"IssueDate\" type=\"xs:string\" maxOccurs=\"1\" minOccurs=\"0\"/> <xs:element name=\"ExpiryDate\" type=\"xs:string\" maxOccurs=\"1\" minOccurs=\"0\"/> <xs:element name=\"MarkingFile\" type=\"File_t\" maxOccurs=\"1\" minOccurs=\"1\"/> <xs:element name=\"MarkingAdditionalText\" type=\"MarkingMarkingAdditionalText_t\" maxOccurs=\"1\" minOccurs=\"1\"/> <xs:element name=\"ExplosionSafeties\" type=\"MarkingExplosionSafeties_t\" maxOccurs=\"1\" minOccurs=\"0\"/> </xs:sequence> </xs:complexType> <xs:element name=\"Marking\" type=\"MarkingsMarkingItem_t\"/> <xs:complexType name=\"MarkingsMarking_t\"> <xs:sequence> <xs:element name=\"Value\" type=\"MarkingsMarkingItem_t\" minOccurs=\"1\" maxOccurs=\"unbounded\"/> </xs:sequence> </xs:complexType> <xs:complexType name=\"DigitalNameplateMarkings_t\"> <xs:sequence> <xs:element name=\"Marking\" type=\"MarkingsMarking_t\" maxOccurs=\"1\" minOccurs=\"1\"/> </xs:sequence> </xs:complexType> <xs:element name=\"Markings\" type=\"DigitalNameplateMarkings_t\"/> ... These schemas are especially useful in workflow / mapping tools to create automatic connectors. API The API follows url-based versioning semantics, for example: /sphere/api/ v1.0 /semantic-connector Semantic connector is available under /sphere/api/{api-version}/semantic-connector . Take a look at the Swagger for more API documentation around each parameter and return value. Swagger for the semantic connector is available under /sphere/swagger/index.html . Semantic Schemas The derived schemas, which we call semantic schemas, are available under sphere/api/{api-version}/semantic-connector/schemas . Supported Submodel Templates With the first release of our Semantic Connector we offer (bi-directional) support for the following standard submodel templates: Digital Nameplate 2.0 Contact Information 1.0 Technical Data 1.2 Carbon Footprint 0.9 Handover Documentation 1.2 Hierarchical Structures enabling Bills of Material 1.1 We are already working on the support of any submodel templates stored in the twinsphere repository - be it published standard templates or user-defined templates. This feature will be available in Q3 2025. Semantic Schema Identifiers Each schema is identified via its targetNamespace attribute of the top level xs:schema element. The identifier is structured as follows: schema-engine-version/base64(submodel-template-semantic-id) For example: https://twinsphere.io/semantics/1/0/aHR0cHM6Ly9hZG1pbi1zaGVsbC5pby9aVkVJL1RlY2huaWNhbERhdGEvU3VibW9kZWwvMS8y the https://twinsphere.io/semantics/1/0 is the schema engine version (produced by twinsphere semantics in version 1.0) the base64 part ( aHR0c...ZWwvMS8y ) is the submodel template semantic id, decoded with value https://admin-shell.io/ZVEI/TechnicalData/Submodel/1/2 . therefore, this semantic schema is derived from submodel template Technical Data in version 1.2. IMPORTANT The semantic schema uses the semantic ID of the submodel template, and not the ID field of the submodel template (these two are often the same, but in some cases they can differ). Semantic Instances Based on the semantic schemas, you can now read and write submodels in the \"semantic\" form using the semantic connector. To perform validation and serialization / deserialization correctly, you just need to always remember to reference the semantic schema via the xmlns attribute on the root element of the hierarchy, as in the example below: <?xml version=\"1.0\" encoding=\"utf-16\"?> <DigitalNameplate xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns=\"https://twinsphere.io/semantics/aHR0cHM6Ly9hZG1pbi1zaGVsbC5pby96dmVpL25hbWVwbGF0ZS8yLzAvTmFtZXBsYXRl\"> <Id>testsubmodel</Id> <UriOfTheProduct>https://www.domain-abc.com/Model-Nr-1234/Serial-Nr-5678</UriOfTheProduct> <ManufacturerName> <LanguageString> <Language>de</Language> <Value>Muster AG</Value> </LanguageString> </ManufacturerName> ... </DigitalNameplate>","title":"Semantic Connector"},{"location":"cloud-semantic-connector/#semantic-connector","text":"The twinsphere Semantic Connector enables a simplified generation of submodels. It offers a simplified format of submodel templates which makes mapping of your data to submodel properties much easier. The resulting mapped data is then converted back to a standard conform, valid submodel instances and stored in the twinsphere repository. Here is an example of some properties of the digital nameplate submodel, first in the original form of the metamodel and then in our semantic representation. Standard JSON twinsphere Semantic XML { \"idShort\": \"Markings\", \"semanticId\": { \"type\": \"ExternalReference\", \"keys\": [ { \"type\": \"GlobalReference\", \"value\": \"0173-1#01-AGZ673#001\" } ] }, \"value\": [ { \"idShort\": \"Marking00\", \"semanticId\": { \"type\": \"ExternalReference\", \"keys\": [ { \"type\": \"GlobalReference\", \"value\": \"0173-1#01-AHD206#001\" } ] }, \"value\": [ { \"idShort\": \"MarkingName\", \"semanticId\": { \"type\": \"ExternalReference\", \"keys\": [ { \"type\": \"GlobalReference\", \"value\": \"https://admin-shell.io/zvei/nameplate/2/0/Nameplate/Markings/Marking/MarkingName\" } ] }, \"valueType\": \"xs:string\", \"value\": \"0173-1#07-DAA603#004\", \"modelType\": \"Property\" }, { \"idShort\": \"IssueDate\", \"semanticId\": { \"type\": \"ExternalReference\", \"keys\": [ { \"type\": \"GlobalReference\", \"value\": \"https://admin-shell.io/zvei/nameplate/2/0/Nameplate/Markings/Marking/IssueDate\" } ] }, \"valueType\": \"xs:date\", \"value\": \"2022-01-01\", \"modelType\": \"Property\" }, { \"idShort\": \"ExpiryDate\", \"semanticId\": { \"type\": \"ExternalReference\", \"keys\": [ { \"type\": \"GlobalReference\", \"value\": \"https://admin-shell.io/zvei/nameplate/2/0/Nameplate/Markings/Marking/ExpiryDate\" } ] }, \"valueType\": \"xs:date\", \"value\": \"2022-01-01\", \"modelType\": \"Property\" } ... ], \"modelType\": \"SubmodelElementCollection\" } ], \"modelType\": \"SubmodelElementCollection\" } <Markings> <Marking> <MarkingName>0173-1#07-DAA603#004</MarkingName> <IssueDate>2022-01-01</IssueDate> <ExpiryDate>2022-01-01</ExpiryDate> ... </Marking> </Markings> As you can see all complex AAS metadata information is hidden to make the semantic format (which we call \"semantic submodels\" or \"semantic submodel instances\") easy to understand - even for non AAS experts. Simple key/value pairs. We believe that mapping data to this more comprehensive form should be much easier. REMARK Semantic submodels and the value-only serialization of the AAS standard are not the same - even if they look similar. The value-only format can not be converted back to its original form, our semantic submodels can! Semantic Submodels are described via XML schemas (which we call \"semantic submodel schemas\"). We derive these schemas from the structure and rules defined in the submodel templates. An example of such schema is given below: ... <xs:complexType name=\"MarkingsMarkingItem_t\"> <xs:sequence> <xs:element name=\"MarkingName\" type=\"xs:string\" maxOccurs=\"1\" minOccurs=\"1\"/> <xs:element name=\"DesignationOfCertificateOrApproval\" type=\"xs:string\" maxOccurs=\"1\" minOccurs=\"0\"/> <xs:element name=\"IssueDate\" type=\"xs:string\" maxOccurs=\"1\" minOccurs=\"0\"/> <xs:element name=\"ExpiryDate\" type=\"xs:string\" maxOccurs=\"1\" minOccurs=\"0\"/> <xs:element name=\"MarkingFile\" type=\"File_t\" maxOccurs=\"1\" minOccurs=\"1\"/> <xs:element name=\"MarkingAdditionalText\" type=\"MarkingMarkingAdditionalText_t\" maxOccurs=\"1\" minOccurs=\"1\"/> <xs:element name=\"ExplosionSafeties\" type=\"MarkingExplosionSafeties_t\" maxOccurs=\"1\" minOccurs=\"0\"/> </xs:sequence> </xs:complexType> <xs:element name=\"Marking\" type=\"MarkingsMarkingItem_t\"/> <xs:complexType name=\"MarkingsMarking_t\"> <xs:sequence> <xs:element name=\"Value\" type=\"MarkingsMarkingItem_t\" minOccurs=\"1\" maxOccurs=\"unbounded\"/> </xs:sequence> </xs:complexType> <xs:complexType name=\"DigitalNameplateMarkings_t\"> <xs:sequence> <xs:element name=\"Marking\" type=\"MarkingsMarking_t\" maxOccurs=\"1\" minOccurs=\"1\"/> </xs:sequence> </xs:complexType> <xs:element name=\"Markings\" type=\"DigitalNameplateMarkings_t\"/> ... These schemas are especially useful in workflow / mapping tools to create automatic connectors.","title":"Semantic Connector"},{"location":"cloud-semantic-connector/#api","text":"The API follows url-based versioning semantics, for example: /sphere/api/ v1.0 /semantic-connector Semantic connector is available under /sphere/api/{api-version}/semantic-connector . Take a look at the Swagger for more API documentation around each parameter and return value. Swagger for the semantic connector is available under /sphere/swagger/index.html .","title":"API"},{"location":"cloud-semantic-connector/#semantic-schemas","text":"The derived schemas, which we call semantic schemas, are available under sphere/api/{api-version}/semantic-connector/schemas .","title":"Semantic Schemas"},{"location":"cloud-semantic-connector/#supported-submodel-templates","text":"With the first release of our Semantic Connector we offer (bi-directional) support for the following standard submodel templates: Digital Nameplate 2.0 Contact Information 1.0 Technical Data 1.2 Carbon Footprint 0.9 Handover Documentation 1.2 Hierarchical Structures enabling Bills of Material 1.1 We are already working on the support of any submodel templates stored in the twinsphere repository - be it published standard templates or user-defined templates. This feature will be available in Q3 2025.","title":"Supported Submodel Templates"},{"location":"cloud-semantic-connector/#semantic-schema-identifiers","text":"Each schema is identified via its targetNamespace attribute of the top level xs:schema element. The identifier is structured as follows: schema-engine-version/base64(submodel-template-semantic-id) For example: https://twinsphere.io/semantics/1/0/aHR0cHM6Ly9hZG1pbi1zaGVsbC5pby9aVkVJL1RlY2huaWNhbERhdGEvU3VibW9kZWwvMS8y the https://twinsphere.io/semantics/1/0 is the schema engine version (produced by twinsphere semantics in version 1.0) the base64 part ( aHR0c...ZWwvMS8y ) is the submodel template semantic id, decoded with value https://admin-shell.io/ZVEI/TechnicalData/Submodel/1/2 . therefore, this semantic schema is derived from submodel template Technical Data in version 1.2. IMPORTANT The semantic schema uses the semantic ID of the submodel template, and not the ID field of the submodel template (these two are often the same, but in some cases they can differ).","title":"Semantic Schema Identifiers"},{"location":"cloud-semantic-connector/#semantic-instances","text":"Based on the semantic schemas, you can now read and write submodels in the \"semantic\" form using the semantic connector. To perform validation and serialization / deserialization correctly, you just need to always remember to reference the semantic schema via the xmlns attribute on the root element of the hierarchy, as in the example below: <?xml version=\"1.0\" encoding=\"utf-16\"?> <DigitalNameplate xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns=\"https://twinsphere.io/semantics/aHR0cHM6Ly9hZG1pbi1zaGVsbC5pby96dmVpL25hbWVwbGF0ZS8yLzAvTmFtZXBsYXRl\"> <Id>testsubmodel</Id> <UriOfTheProduct>https://www.domain-abc.com/Model-Nr-1234/Serial-Nr-5678</UriOfTheProduct> <ManufacturerName> <LanguageString> <Language>de</Language> <Value>Muster AG</Value> </LanguageString> </ManufacturerName> ... </DigitalNameplate>","title":"Semantic Instances"},{"location":"contact/","text":"Contact Support Channels In case you need assistance you're able to reach us in the following ways: Open ticket by web interface twinsphere's Support Portal \u29c9 Open ticket by email twinsphere@conplement-support.atlassian.net \u2709 We're looking forward to receive your issue reports, questions and service requests. Secure communication For sensitive info, we prefer secure encrypted e-mail communication at this time. You can provide us you e-mail address via the ticket system. Product information twinsphere Landing Page https://www.conplement.de/twinsphere \u29c9 twinsphere insights (webinar series) https://www.conplement.de/webinar-twinsphere-insights \u29c9 Swagger UI of twinsphere's API https://conplement.cloud.twinsphere.io/swagger/index.html \u29c9 https://conplement.cloud.twinsphere.io/sphere/swagger/index.html \u29c9","title":"Contact us"},{"location":"contact/#contact","text":"","title":"Contact"},{"location":"contact/#support-channels","text":"In case you need assistance you're able to reach us in the following ways: Open ticket by web interface twinsphere's Support Portal \u29c9 Open ticket by email twinsphere@conplement-support.atlassian.net \u2709 We're looking forward to receive your issue reports, questions and service requests.","title":"Support Channels"},{"location":"contact/#secure-communication","text":"For sensitive info, we prefer secure encrypted e-mail communication at this time. You can provide us you e-mail address via the ticket system.","title":"Secure communication"},{"location":"contact/#product-information","text":"twinsphere Landing Page https://www.conplement.de/twinsphere \u29c9 twinsphere insights (webinar series) https://www.conplement.de/webinar-twinsphere-insights \u29c9 Swagger UI of twinsphere's API https://conplement.cloud.twinsphere.io/swagger/index.html \u29c9 https://conplement.cloud.twinsphere.io/sphere/swagger/index.html \u29c9","title":"Product information"},{"location":"id-overview/","text":"twinsphere ID twinsphere ID is the central identity management solution of the twinsphere platform. Using twinsphere ID allows single sign-on for all the twinsphere applications, and is built on modern OAuth 2.0 / OIDC standards. Both user (human) and service accounts (machine) accounts are supported. Users Registering In order to obtain a new user in twinsphere ID, please contact our support team and provide an e-mail address for this user. You will receive an E-Mail invitation shorty. Usage All our applications provide login functionality for users, in which you will be redirected to our identity provider for login. Our APIs also provide a user-friendly interface based on the Swagger UI. Simply use the Authorize button to log in (and use the last option on the bottom in the pop-up window). Note that via Authorize you can also set access token directly, which might be useful in some testing scenarios. Password reset If you need to change your password, simply use the \"forget password\" function on the login screen. Service accounts Service accounts can be created via the Management API . Usage Service accounts user the common client-credentials \u29c9 OAuth 2.0 flow type, which means that you have to call a special endpoint to get an access token for the certain application you are trying to access (also called scope ). Once you create your service account through Management API , you will get a list of available scopes as well as the endpoint ( tokenUri ) where you can get your token(s). { \"id\": \"27...26\", \"createdAt\": \"2025-10-01T12:01:01\", \"tokenUri\": \"https://twinsphere.ciamlogin.com/ag...25/oauth2/v2.0/token\", \"grantType\": \"client_credentials\", \"description\": \"To construct a proper requesting using this service account, refer to the twinsphere official documentation on https://docs.twinsphere.io\", \"scopes\": [ { \"serviceName\": \"ManagementAPI\", \"scope\": \"api://...app/.default\" }, { \"serviceName\": \"Tenant-A\", \"scope\": \"api://.../.default\" }, { \"serviceName\": \"Tenant-B\", \"scope\": \"api://.../.default\" } ] } Consult the Management API documentation on how to create secrets which are also required for the client_credentials flow. Both client ID and client secret are confidential and should be kept secret! Testing the tokens Simplest way to receive a token using the credentials above would be to simply perform a cURL request: curl \\ --data grant_type=\"client_credentials\" \\ --data client_id=\"7a...ee\" \\ --data client_secret=\"IPq...T\" \\ --data scope=\"api://twinsphere-server-...-api/.default\" \\ https://twinsphere.ciamlogin.com/..../oauth2/v2.0/token Response will be similar to: { \"token_type\":\"Bearer\", \"expires_in\":3599, \"ext_expires_in\":3599, \"access_token\":\"eyJ0e...A\" } The access_token field is the token you need to provide as an authorization header to every twinsphere API request, formatted as Authorization: Bearer eyJ0e...A . Integration into your services While cURL might be nice for testing purposes, in your real services you will need to use a HTTP or auth library you have available in the programming language that you are using. \u26a0\ufe0f IMPORTANT: Make sure to properly cache the tokens and not request a new token with each twinsphere API request. Many standard libraries provide you this functionality out of the box. If you issue too many tokens, you might get rate limited!","title":"Overview"},{"location":"id-overview/#twinsphere-id","text":"twinsphere ID is the central identity management solution of the twinsphere platform. Using twinsphere ID allows single sign-on for all the twinsphere applications, and is built on modern OAuth 2.0 / OIDC standards. Both user (human) and service accounts (machine) accounts are supported.","title":"twinsphere ID"},{"location":"id-overview/#users","text":"","title":"Users"},{"location":"id-overview/#registering","text":"In order to obtain a new user in twinsphere ID, please contact our support team and provide an e-mail address for this user. You will receive an E-Mail invitation shorty.","title":"Registering"},{"location":"id-overview/#usage","text":"All our applications provide login functionality for users, in which you will be redirected to our identity provider for login. Our APIs also provide a user-friendly interface based on the Swagger UI. Simply use the Authorize button to log in (and use the last option on the bottom in the pop-up window). Note that via Authorize you can also set access token directly, which might be useful in some testing scenarios.","title":"Usage"},{"location":"id-overview/#password-reset","text":"If you need to change your password, simply use the \"forget password\" function on the login screen.","title":"Password reset"},{"location":"id-overview/#service-accounts","text":"Service accounts can be created via the Management API .","title":"Service accounts"},{"location":"id-overview/#usage_1","text":"Service accounts user the common client-credentials \u29c9 OAuth 2.0 flow type, which means that you have to call a special endpoint to get an access token for the certain application you are trying to access (also called scope ). Once you create your service account through Management API , you will get a list of available scopes as well as the endpoint ( tokenUri ) where you can get your token(s). { \"id\": \"27...26\", \"createdAt\": \"2025-10-01T12:01:01\", \"tokenUri\": \"https://twinsphere.ciamlogin.com/ag...25/oauth2/v2.0/token\", \"grantType\": \"client_credentials\", \"description\": \"To construct a proper requesting using this service account, refer to the twinsphere official documentation on https://docs.twinsphere.io\", \"scopes\": [ { \"serviceName\": \"ManagementAPI\", \"scope\": \"api://...app/.default\" }, { \"serviceName\": \"Tenant-A\", \"scope\": \"api://.../.default\" }, { \"serviceName\": \"Tenant-B\", \"scope\": \"api://.../.default\" } ] } Consult the Management API documentation on how to create secrets which are also required for the client_credentials flow. Both client ID and client secret are confidential and should be kept secret!","title":"Usage"},{"location":"id-overview/#testing-the-tokens","text":"Simplest way to receive a token using the credentials above would be to simply perform a cURL request: curl \\ --data grant_type=\"client_credentials\" \\ --data client_id=\"7a...ee\" \\ --data client_secret=\"IPq...T\" \\ --data scope=\"api://twinsphere-server-...-api/.default\" \\ https://twinsphere.ciamlogin.com/..../oauth2/v2.0/token Response will be similar to: { \"token_type\":\"Bearer\", \"expires_in\":3599, \"ext_expires_in\":3599, \"access_token\":\"eyJ0e...A\" } The access_token field is the token you need to provide as an authorization header to every twinsphere API request, formatted as Authorization: Bearer eyJ0e...A .","title":"Testing the tokens"},{"location":"id-overview/#integration-into-your-services","text":"While cURL might be nice for testing purposes, in your real services you will need to use a HTTP or auth library you have available in the programming language that you are using. \u26a0\ufe0f IMPORTANT: Make sure to properly cache the tokens and not request a new token with each twinsphere API request. Many standard libraries provide you this functionality out of the box. If you issue too many tokens, you might get rate limited!","title":"Integration into your services"},{"location":"management-overview/","text":"twinsphere Management API The Management API enables secure automation of core RBAC, identity, tenant, user, and service account operations within an organization. This API is designed for two audiences: twinsphere administrators who use the in-browser UI to manage their organization engineering teams integrating twinsphere capabilities into internal platforms, provisioning workflows or infrastructure automation pipelines Getting Started Important endpoints: the API itself is available under: https://manage.twinsphere.io/api \u29c9 OpenAPI specification: https://manage.twinsphere.io/openapi/v1.json \u29c9 Swagger UI (browser-based): https://manage.twinsphere.io/swagger/index.html \u29c9 For each API request you need: the API version (currently only v1 : https://manage.twinsphere.io/api/v1 \u29c9 ) an authenticated principal (user or service account) your organization ID Initially, each organization has a single user with rights to invite other users and create service accounts. Self check via /me endpoint To check your currently assigned organizations, tenants and roles simply use the /me endpoint. Features The Management API currently allows: user management within an organization service account management (including secrets) organizing users and service accounts via user groups RBAC at organization and cloud (per cloud tenant) levels on users and service accounts on user groups Authentication Open the Management API Swagger UI in your browser: https://manage.twinsphere.io/swagger/index.html \u29c9 Use the Authorize (green) button on the right Choose one of the available authentication methods: Bearer: paste an existing bearer token (useful when testing service accounts) OAuth2: authenticate using your twinsphere ID account You can also call the API with any HTTP client (e.g., curl). Using the Swagger UI is optional. Inviting users You can invite any user to your organization using their twinsphere ID. If the user does not yet have one, please submit a support ticket . User self-registration in twinsphere ID is coming soon. To invite a user, use: POST /api/v{version}/organizations/{organizationId}/users/invite Role-based access control (RBAC) For any organization member (user) or any service account you created, you can create role assignments to define their access. Roles can be assigned at: organization (global) level cloud level (per cloud tenant) Organization-level roles implicitly grant access to all cloud tenants and should be limited to administrators or super-users. List available roles: GET /api/v{version}/organizations/{organizationId}/roles GET /api/v{version}/organizations/{organizationId}/cloud/roles Assign the organization-owner role: POST /api/v{version}/organizations/{organizationId}/role-assignments Assign a role for a single cloud tenant (e.g., read-only AAS data): POST /api/v{version}/organizations/{organizationId}/cloud/{tenantId}/role-assignments Service accounts Service accounts provide headless (machine-to-machine) access. Create a service account: POST /api/v{version}/organizations/{organizationId}/service-accounts Add a secret to a service account: POST /api/v{version}/organizations/{organizationId}/service-accounts/{serviceAccountId}/secrets \u26a0\ufe0f IMPORTANT: The secret value is shown only once at creation time. Store it securely immediately; you cannot retrieve it again later. \u2139\ufe0f More about authentication: To learn more about authentication flows, consult the detailed guide in cloud-auth.md . User groups User groups provide an easier way to assign roles to multiple users or service accounts at once. Create a user group: POST /api/v{version}/organizations/{organizationId}/user-groups Add members to a user group: POST /api/v{version}/organizations/{organizationId}/user-groups/{groupId}/members","title":"Overview"},{"location":"management-overview/#twinsphere-management-api","text":"The Management API enables secure automation of core RBAC, identity, tenant, user, and service account operations within an organization. This API is designed for two audiences: twinsphere administrators who use the in-browser UI to manage their organization engineering teams integrating twinsphere capabilities into internal platforms, provisioning workflows or infrastructure automation pipelines","title":"twinsphere Management API"},{"location":"management-overview/#getting-started","text":"Important endpoints: the API itself is available under: https://manage.twinsphere.io/api \u29c9 OpenAPI specification: https://manage.twinsphere.io/openapi/v1.json \u29c9 Swagger UI (browser-based): https://manage.twinsphere.io/swagger/index.html \u29c9 For each API request you need: the API version (currently only v1 : https://manage.twinsphere.io/api/v1 \u29c9 ) an authenticated principal (user or service account) your organization ID Initially, each organization has a single user with rights to invite other users and create service accounts.","title":"Getting Started"},{"location":"management-overview/#self-check-via-me-endpoint","text":"To check your currently assigned organizations, tenants and roles simply use the /me endpoint.","title":"Self check via /me endpoint"},{"location":"management-overview/#features","text":"The Management API currently allows: user management within an organization service account management (including secrets) organizing users and service accounts via user groups RBAC at organization and cloud (per cloud tenant) levels on users and service accounts on user groups","title":"Features"},{"location":"management-overview/#authentication","text":"Open the Management API Swagger UI in your browser: https://manage.twinsphere.io/swagger/index.html \u29c9 Use the Authorize (green) button on the right Choose one of the available authentication methods: Bearer: paste an existing bearer token (useful when testing service accounts) OAuth2: authenticate using your twinsphere ID account You can also call the API with any HTTP client (e.g., curl). Using the Swagger UI is optional.","title":"Authentication"},{"location":"management-overview/#inviting-users","text":"You can invite any user to your organization using their twinsphere ID. If the user does not yet have one, please submit a support ticket . User self-registration in twinsphere ID is coming soon. To invite a user, use: POST /api/v{version}/organizations/{organizationId}/users/invite","title":"Inviting users"},{"location":"management-overview/#role-based-access-control-rbac","text":"For any organization member (user) or any service account you created, you can create role assignments to define their access. Roles can be assigned at: organization (global) level cloud level (per cloud tenant) Organization-level roles implicitly grant access to all cloud tenants and should be limited to administrators or super-users. List available roles: GET /api/v{version}/organizations/{organizationId}/roles GET /api/v{version}/organizations/{organizationId}/cloud/roles Assign the organization-owner role: POST /api/v{version}/organizations/{organizationId}/role-assignments Assign a role for a single cloud tenant (e.g., read-only AAS data): POST /api/v{version}/organizations/{organizationId}/cloud/{tenantId}/role-assignments","title":"Role-based access control (RBAC)"},{"location":"management-overview/#service-accounts","text":"Service accounts provide headless (machine-to-machine) access. Create a service account: POST /api/v{version}/organizations/{organizationId}/service-accounts Add a secret to a service account: POST /api/v{version}/organizations/{organizationId}/service-accounts/{serviceAccountId}/secrets \u26a0\ufe0f IMPORTANT: The secret value is shown only once at creation time. Store it securely immediately; you cannot retrieve it again later. \u2139\ufe0f More about authentication: To learn more about authentication flows, consult the detailed guide in cloud-auth.md .","title":"Service accounts"},{"location":"management-overview/#user-groups","text":"User groups provide an easier way to assign roles to multiple users or service accounts at once. Create a user group: POST /api/v{version}/organizations/{organizationId}/user-groups Add members to a user group: POST /api/v{version}/organizations/{organizationId}/user-groups/{groupId}/members","title":"User groups"},{"location":"management-roles/","text":"twinsphere Roles Here is a list of all available roles and their permissions, that you can set through Management API role assignment APIs. Role Scope Explanation organization-owner organization Full access rights across the organization tenant-administrator cloud tenant Full access rights for a given tenant tenant-global-writer cloud tenant Read and write permissions on all endpoints tenant-global-reader cloud tenant Read permissions on all endpoints tenant-metadata-writer cloud tenant Read and write permissions on all registry, discovery and concept descriptions endpoints (AAS metadata) tenant-metadata-reader cloud tenant Read permissions on all registry, discovery and concept descriptions endpoints (AAS metadata) tenant-push-service-writer cloud tenant Read and write permissions for push service feature endpoints tenant-push-service-reader cloud tenant Read permissions for push service feature endpoints tenant-search-user cloud tenant Permissions on all search feature endpoints tenant-semantic-connector-reader cloud tenant Read permissions for the semantic connector feature endpoints tenant-semantic-connector-writer cloud tenant Read and write permissions for the semantic connector feature endpoints","title":"Roles"},{"location":"management-roles/#twinsphere-roles","text":"Here is a list of all available roles and their permissions, that you can set through Management API role assignment APIs. Role Scope Explanation organization-owner organization Full access rights across the organization tenant-administrator cloud tenant Full access rights for a given tenant tenant-global-writer cloud tenant Read and write permissions on all endpoints tenant-global-reader cloud tenant Read permissions on all endpoints tenant-metadata-writer cloud tenant Read and write permissions on all registry, discovery and concept descriptions endpoints (AAS metadata) tenant-metadata-reader cloud tenant Read permissions on all registry, discovery and concept descriptions endpoints (AAS metadata) tenant-push-service-writer cloud tenant Read and write permissions for push service feature endpoints tenant-push-service-reader cloud tenant Read permissions for push service feature endpoints tenant-search-user cloud tenant Permissions on all search feature endpoints tenant-semantic-connector-reader cloud tenant Read permissions for the semantic connector feature endpoints tenant-semantic-connector-writer cloud tenant Read and write permissions for the semantic connector feature endpoints","title":"twinsphere Roles"},{"location":"studio-overview/","text":"twinstudio - Coming 2025 twinstudio is a new component of our twinsphere suite, launching in 2025. It is: Fast & easy: Guided processes and templates enable effortless creation of administration shells and submodels \u2013 no in-depth technical knowledge required. This saves time, costs, and reduces errors. Standards-compliant & future-proof: Compliant with the IDTA standard for seamless, cross-company collaboration and maximum process efficiency. Scalable & reusable: Blueprints and submodel templates ensure a consistent Digital Twin strategy and simplify expansion to new products and business areas. For more information please visit our twinsphere landing page \u29c9 .","title":"Coming 2025"},{"location":"studio-overview/#twinstudio-coming-2025","text":"twinstudio is a new component of our twinsphere suite, launching in 2025. It is: Fast & easy: Guided processes and templates enable effortless creation of administration shells and submodels \u2013 no in-depth technical knowledge required. This saves time, costs, and reduces errors. Standards-compliant & future-proof: Compliant with the IDTA standard for seamless, cross-company collaboration and maximum process efficiency. Scalable & reusable: Blueprints and submodel templates ensure a consistent Digital Twin strategy and simplify expansion to new products and business areas. For more information please visit our twinsphere landing page \u29c9 .","title":"twinstudio - Coming 2025"},{"location":"tips-common-validation-errors/","text":"Common Validation Errors of AAS A guide to understand, avoid and handle AAS validation errors. by Fabian Gumbrecht and Christian K\u00f6rber Version 1.1 (06-Aug-2024) Introduction Asset Administration Shell (AAS) is a fairly complex data standard that is still evolving and maturing. The tools that support it are also still in development and, in some cases, do not yet have support for the latest specification. The creators of AAS are under immense pressure in this situation. They must adapt their data using incomplete tools to a standard that is both difficult to access and constantly changing. Not surprisingly, data quality problems emerge. At conplement AG, we are proud to provide twinsphere, a software suite for the creation, hosting, and distribution of asset administration shells. As its provider, we often encounter data quality issues when customers try to upload their AAS to our platform. The purpose of this guide is to explain the meaning and reason behind validation errors in terms of the AAS specification and to provide support for handling them. It focuses on the most commonly encountered validation errors on our end, but it is not exhaustive. Additional errors may be added in the future. We hope this guide will assist you on your Asset Administration Shell journey! Table of Content Errors with the Metamodel General Metamodel Errors Supported Version Common Attributes idShort Asset Information Asset Identifier Submodel SubmodelIdss Submodel Elements Data Element File Property MultiLanguageProperty References Submodels References Errors with Specific Submodels Handover Documentation General Errors Errors with SubmodelElements of Document Errors with SubmodelElements of DocumentID Errors with SubmodelElements of DocumentVersion Errors related to Exchange Data Formats XML Serialization Empty XML Nodes Package File Format AASX Relationships Supplemental Files aas-suppl Document Change History Errors with the Metamodel General Metamodel Errors Supported Version twinsphere only supports AAS in the recent version 3 Problem Description twinsphere is a platform for asset administration shells conform to the metamodel specification version 3. If you try to upload an asset administration shell of an earlier version the platform will deny it. Specification Reference Product Description twinsphere \u29c9 Part 1 v3.0 \u29c9 Recommended Solution The Eclipse AASX Package Explorer is able to convert v2 packages into the v3 format. Try to upgrade your package with the current Eclipse AASX Package Explorer \u29c9 Open the Asset Administration Shell with the AasxPackageExplorer Save the Asset Administration Shell as a new Asset Administration Shell Re-Upload the converted AASX package to twinsphere Common Attributes idShort idShort has to be unique within the same namespace Error Message Constraint AASd-022: ID-short of non-identifiable referables within the same name space shall be unique (case-sensitive). Specification Reference Part 1 v3.0, 5.3.2.10 Referable Attributes, P. 56 \u29c9 Part 1 v3.0, 5.3.12.2 Constraints for Referables and Identifiables, Constraint AASd-022, P. 105 \u29c9 Remarks idShort is case-sensitive. A name space is defined as the parent element(s), which an element is part of and that is either referable or identifiable. Constraint is necessary in order to address an element via API by an unique idShortPath . Recommended Solution Change idShort to a unique value or number identical values from 01 to n (i.e. DigitalFile -> DigitalFile01). idShort of Referables shall only feature letters, digits, underscore Error Message ID-Short of Referables shall only feature letters, digits, underscore ( _ ); starting mandatory with a letter, i.e. [a-zA-Z][a-zA-Z0-9_]*. Specification Reference Part 1 v3.0, 5.3.2.10 Referable Attributes, Constraint AASd-002, P.57 Remarks Hyphen is NOT allowed as of v3.0.1 of the specification. Hyphen will be allowed with upcoming version v3.1 of the specification, see Issue #295 of aas-specs-metamodel in Github for details. Recommended Solution Replace separators like hyphens, dots or commas in the idShort with an underscore. Asset Information Asset Identifier At least one Asset Identifier has to be defined Error Message Constraint AASd-131: Either the global asset ID shall be defined or at least one specific asset ID. Specification Reference Part 1 v3.0, 5.3.4 Asset Information Attributes, Constraint AASd-131, P. 60 ) Remarks Since globalAssetId and (the value of) specificAssetId are both identifiers they have to be GLOBALLY unique. Recommended Solution Define one globalAssetId or add at least a specificAssetId to the asset information. Submodel SubmodelIdss Do not use SemanticId as SubmodelId of Submodel Problem Description Submodels require to have globally unique ids to be identifiable in any given scenario. Sometimes we encounter the semanticId of the submodel template being used as SubmodelId for a concrete submodel instance. This is not valid since the semanticId does not identify a single submodel instance and therefore is not a valid identifier. Specification Reference Part 1 v3.0, 5.3.5 Submodel Attributes, P. 62 Remarks Submodels are Identifiables and therefore must have globally unique ids. Recommended Solution You should use URNs (e.g. urn:GMA:7.20:contractnegotiation:1:1#001) or URIs (e.g. http://www.vdi.de/gma720/ \u29c9 contractnegotiation/1/1#001) to create such a (submodel) identifier. See Part 1, Annex A, How Are New Identifiers Created? and Best Practice for Creating URI Identifiers , P. 124 for more information. Submodel Elements Data Element Valid values for Data Element Category Error Message Constraint AASd-090: For data elements category shall be one of the following values: CONSTANT, PARAMETER or VARIABLE.: {position} Specification Reference Part 1 v3.0, 5.3.7.6 Data Element and Overview of Data Element Types, Constraint AASd-090, P. 69 Remarks Default value is VARIABLE. Categories are deprecated and should no longer be used. Recommended Solution Remove the category attribute from the data element. File Wrong URI Scheme for referenced files Error Message The value must represent a valid file URI scheme according to RFC 8089. Specification Reference Part 1 v3.0, 5.3.11.2 Primitive Data Types, Primitive \"PathType\", P. 97 RFC 8089 - The \"file\" URI Scheme \u29c9 Remarks All submodel elements \"file\" have to use the PathType which demand a URI according to RFC 8089. This also applies to the path of defaultThumbnail within AssetInformation . RFC 8089 or \"The 'file' URI Scheme\" demands a leading file-scheme for an URI, so it has to start with \"file:\". AASX Package Explorer (v2023-11-17 and earlier) is not able to handle PathTypes with correctly referenced files (file:/...) and will not be shown them. The specification currently is not consistent since the examples for PathType given in Part 1 v3.0 are not all valid (./Specification.pdf). The upcoming specification Part 1 v3.1 will address this issue by allowing more generic URIs. See Issue #299 of aas-specs-metamodel on Github for details. Recommended Solution For now: Change the file path from /aasx/files/example.pdf to file:/aasx/files/example.pdf. Empty File Path Error Message Filepath can not be null Specification Reference Part 1 v3.0, 5.3.11.2 Primitive Data Types, Primitive \"PathType\", P. 97 \u29c9 Remarks Since the PathType of a file value is an identifier, it must contain a valid reference identifying something. Same applies to the path attribute on a defaultThumbnail in AssetInformation . Recommended Solution Add a valid and existing file path to the file property or remove the property. Valid Content Type of File Error Message The value must represent a valid content MIME type according to RFC 2046. Specification Reference Part 1 v3.0, 5.3.7.9 File Attributes, P. 71 Part 1 v3.0, 5.3.11.2 Primitive Data Types, Primitive \"ContentType\", P. 96 Remarks Valid MIME types for the contentType attribute are defined in RFC 2046 \u29c9 . Recommended Solution Assign a MIME type to the file that is RFC 2046 compliant. Property Value must be consistent with the value type of the property Error Message Value must be consistent with the value type. Specification Reference Part 1 v3.0, 5.3.11 Primitive and Simple Data Types, P. 95 Remarks Part 1's chapter on primitive and simple data types helps to determine the data type of the respective property. Recommended Solution Apply values with the right data type to the property. MultiLanguageProperty Value specifies duplicate languages Error Message Value specifies no duplicate languages. Specification Reference Part 1 v3.0, 5.3.7.10 Multi Language Property Attributes, P. 72 Part 1 v3.0, 5.3.11.2 Primitive Data Types, Primitive \"MultiLanguageTextType\", P. 97 Part 1 v3.0, 5.3.11.2 Primitive Data Types, Primitive \"LangStringSet\", P. 96 Remarks The value of the MultiLanguageProperty depends on the serialization and has a similar structure like a dictionary. So the indices in the multi language value have to be unique. The error message is currently somewhat misleading. A corresponding aas-core-works issue has already been created. Recommended Solution Check that the langStrings do not have overlapping languages. Remove entries with duplicate keys so each language has exactly one entry. Valid language tags Error Message The value must represent a value language tag conformant to BCP 47. Specification Reference Part 1 v3.0, 5.3.11.3 Enumeration for Submodel Element Value Types, Enumeration \"DataTypeDefRdf\", P. 103f \u29c9 Remarks RDF requires IETF BCP 4729 language tags \u29c9 . Simple two-letter language tags for locales like \"de\" conformant to ISO 639-1 are allowed, as well as language tags plus extension like \"de-DE\" for country code, dialect, etc. like in \"en-US\" for English (United States) or \"en-GB\" for English (United Kingdom). Recommended Solution Make sure that all uses language tags in the MultiLanguageProperty value are valid as described above. References Empty Keys Error Message Keys must contain at least one item. Specification Reference Part 1 v3.0, 5.3.10.2 Reference Attributes, P. 81 Remarks Cardinality of attribute 'key' is 1..*. Recommended Solution Add at least one key to the reference or remove the whole reference. Submodels References All submodel references must be model references to a submodel Error Message All submodels must be model references to a submodel. Specification Reference Part 1 v3.0, 5.3.3 Asset Administration Shell Attributes, P. 59 Recommended Solution Make sure that the type of every submodel reference is set to ModelReference . Make sure that the type of every key of the submodel reference is set to Submodel . Valid types of first reference key Error Message Constraint AASd-121: For References the value of type of the first key of keys shall be one of Globally Identifiables Specification Reference Part 1, 5.3.10.4 Constraints, Constraint AASd-121, P. 93 Part 1, 5.3.10.3 Key Attributes, Enumeration \"GloballyIdentifiables\", P. 88 Remarks For References , the value of Key/type of the first key of Reference/keys shall be one of GloballyIdentifiables . Part 1 v3.0.1 specifies the following literals in the enumeration GloballyIdentifiables : \"AssetAdministrationShell\", \"ConceptDescription\", \"GlobalReference\", \"Identifiable\" and \"Submodel\". Be aware that more restrictive constraints exist for other, more specific reference types , i.e. external or model references. Recommended Solution Make sure the type value of the first key of your reference is one of the afore mentioned literals. Type of first external reference key has to be 'GlobalReference' Error Message Constraint AASd-122: For external references the value of type of the first key of keys shall be one of Generic Globally Identifiables. Specification Reference Part 1, 5.3.10.4 Constraints, Constraint AASd-122, P. 93 Part 1, 5.3.10.3 Key Attributes, Enumeration \"GenericGloballyIdentifiables\", P. 93 Remarks For external references, i.e. References with Reference/type = ExternalReference , the value of Key/type of the first key of Reference/keys shall be one of GenericGloballyIdentifiables . Part 1 v3.0.1 defines exactly one literal in the enumeration GenericGloballyIdentifiables which is \"GlobalReference\". Recommended Solution Make sure the first key of your external reference is of type GlobalReference . Valid types of first model reference key Error Message Constraint AASd-123: For model references the value of type of the first key of keys shall be one of AAS identifiables. Specification Reference Part 1, 5.3.10.4 Constraints, Constraint AASd-123, P. 93 Part 1, 5.3.10.3 Key Attributes, Enumeration \"AasIdentifiables\", P. 92 Remarks For model references, i.e. References with Reference/type = ModelReference , the value of Key/type of the first key of Reference/keys shall be one of AasIdentifiables . Part 1 v3.0.1 specifies the following literals in the enumeration AasIdentifiables : \"AssetAdministrationShell\", \"ConceptDescription\", \"Identifiable\" and \"Submodel\". Recommended Solution Make sure the type value of the first key of your model reference is one of the afore mentioned literals. Valid types of last external reference key Error Message Constraint AASd-124: For external references the last key of keys shall be either one of Generic Globally Identifiables or one of Generic Fragment Keys. Specification Reference Part 1, 5.3.10.4 Constraints, Constraint AASd-124, P. 93 Part 1, 5.3.10.3 Key Attributes, Enumeration \"GenericFragmentKeys\", P. 92 Remarks For external references, i.e. References with Reference/type = ExternalReference , the last key of Reference/keys shall be either one of GenericGloballyIdentifiables or one of GenericFragmentKeys . Part 1 v3.0.1 defines exactly one literal in the enumeration GenericGloballyIdentifiables which is \"GlobalReference\". Part 1 v3.0.1 defines exactly one literal in the enumeration GenericFragmentKeys which is \"FragmentReference\". Recommended Solution Make sure the type value of the last key of your external reference is one of the mentioned two literals. Errors with Specific Submodels Handover Documentation General Errors No Cardinality Counters in ECLASS IRDI Path of SemanticIds Problem Description The semanticId of a Submodel Elements like DocumentId , DocumentClassification or DocumentVersion has a defined ECLASS IRDI path. This is a fixed exact value in each case, e.g. \"0173-1#02-ABI501#001/0173-1#01- AHF580#001\", \" 0173-1#02-ABI502#001/0173-1#01-AHF581#001\" or \"0173-1#02-ABI503#001/0173-1#01-AHF582#001\". Sometimes we encounter a semanticId for those elements with an additional attached string like \"0173-1#02-ABI501#001/0173-1#01-AHF580#001*01\", \"0173-1#02-ABI502#001/0173-1#01-AHF581#001*01\" or \"0173-1#02-ABI503#001/0173-1#01-AHF582#001*01\". These are no valid semanticId as specified in the Handover Documentation submodel template. Specification Reference Handover Documentation v1.2, 2.6 SubmodelElements of DocumentID, P. 16 Handover Documentation v1.2, 2.7 SubmodelElements of DocumentClassification, P. 17 Handover Documentation v1.2, 2.8 SubmodelElements of DocumentVersion, P. 19 Remarks According to ECLASS's IRDI Path definition \u29c9 the star character (*) is a separator between reference property and cardinality counter. Recommended Solution Do not use cardinality counters in semanticIds . Make sure the semanticId of each Submodel Element has the exact value as defined in the submodel template specification. Errors with SubmodelElements of Document SemanticId of SubmodelElement Document Problem Description The semanticId of a Document should be 0173-1#02-ABI500#001/0173-1#01-AHF579#001. Sometimes it is mistaken with the ECLASS IRDI for number of DocumentIds 0173-1#02-ABH990#001. Specification Reference Handover Documentation v1.2, 2.4 Attributes of the Submodel instance, idShort \"Document{00}\", P. 13 Remarks 0173-1#02-ABI500#001 (property) is defined as \"This SubmodelElementCollection holds the information for a document entity\" 0173-1#01-AHF579#001 (class) is defined as \"Each SubmodelElementCollection describes a document by standard, which is associated to the particular Asset Administration Shell\" 0173-1#02-ABH990#001 (property) is defined as \"Number of documents (handover documentation)\" Recommended Solution Make sure the semanticId of the Document Submodel Element Collection has the value \"0173-1#02-ABI500#001/0173-1#01-AHF579#001\". Errors with SubmodelElements of DocumentID Mandatory property ValueId in Submodel Element DocumentId Problem Description ValueId is a required value in the DocumentId . Sometimes we encounter handover documentation submodel instances where ValueId is missing in some or all DocumentIds . Specification Reference Handover Documentation v1.2, 2.6 SubmodelElements of DocumentID, shortId \"ValueId\", P. 16 Remarks ValueId is an identification number of the Document within a given domain, e.g. the providing organization Example values for ValueId : 1213455566, XF90-884 Recommended Solution Make sure there is a value set for each ValueId of each DocumentId representing an identifier which clearly identifies the document within your organization. Errors with SubmodelElements of DocumentVersion SemanticId of SubmodelElement DigitalFile Problem Description The semanticId of a digital file should be 0173-1#02-ABI504#001/0173-1#01-AHF583#001. Sometimes it is mistaken with the ECLASS IRDI for the document path 0173-1#02-ABI005#001, which doesn't describe the whole file. Specification Reference Handover Documentation v1.2, 2.8 SubmodelElements of DocumentVersion, idShort \"DigitalFile{00}\", P. 21 Remarks 0173-1#02-ABI504#001 (property) is defined as \"MIME-Type, file name and file contents given by the file SubmodelElement\". 0173-1#01-AHF583#001 (class) is defined as \"MIME-Type, file name and file contents given by the file SubmodelElement\". 0173-1#02-ABI005#001 (property) is defined as \"Path of the document\". Recommended Solution Replace the semanticId of the DigitalFile element with the IRDI path \"0173-1#02-ABI504#001/0173-1#01-AHF583#001\". IdShort of SubmodelElement DigitalFile Problem Description IdShorts for digital files have to be unique within the DocumentVersion. It is recommended to name them \"DigitalFile\" with a following two-digit number. Specification Reference Handover Documentation v1.2, 2.8 SubmodelElements of DocumentVersion, idShort \"DigitalFile{00}\", P. 21 Handover Documentation v1.2, Annex A. Explanations of table formats used, 2. Tables on Submodels and SubmodelElements, P. 23 Remarks IdShorts for digital files have to be unique within the DocumentVersion. It is recommended to name them \"DigitalFile\" with a following two-digit number: DigitalFile{00}. If an idShort ends with \u2018{00}\u2019, this indicates a suffix of the respective length (here: 2) of decimal digits to make the idShort unique. A different idShort might be chosen, as long as it is unique in the parent\u2019s context. Recommended Solution Name the idShort of digital files of one document version \"DigitalFile\" and add a number from 01 to XX. Example: DigitalFile01, DigitalFile02, ... Errors related to Exchange Data Formats XML Serialization Relevant if you use XML in the aas-spec file of your AASX package, e.g. by using the AASX Package Explorer to generate packages. Empty XML Nodes Main error source here is that the official XML schema is demanding that most XML nodes need to contain something (item/value) or be non-existent. So, in many cases empty XML nodes are not allowed by the schema. Empty EmbeddedDataSpecification Error Message Embedded data specifications must be either not set or have at least one item.: {position} Specification Reference Issue #296 of admin-shell-io/aas-specs on Github \u29c9 Part 1 v3.0, 7.2.5 Embedded Data Specifications, Figure 58 Realization of Embedded Data Specifications, P. 115 Part 1 v3.0, Annex D. Templates for UML Tables, Template for Classes, Note 3, P. 135 XML-Schema v3.0.7, , line 278 ff. Remarks EmbeddedDataSpecifications must contain both, a DataSpecification and a DataSpecificationContent node. Cardinality is wrongly documented in Part 1 v3.0, see linked issue. Recommended Solution Remove the empty node from the XML file or add DataSpecificationContent to it. Empty SubmodelElementCollection/Value Error Message Value must be either not set or have at least one item. Specification Reference Part 1 v3.0, 5.3.7.16 Submodel Element Collection Attributes, P. 76 Part 1 v3.0, Annex D. Templates for UML Tables, Template for Classes, Note 3, P. 135 XML-Schema v3.0.7, , line 869 ff. Remarks The attribute value of a SubmodelElementCollection is optional. But if there is a value it must contain at least one SubmodelElement item to it. Recommended Solution Remove the empty SubmodelElementCollection node from the XML file or add at least one SubmodelElement to it. Empty SubmodelElement/Description Error Message Description must be either not set or have at least one item. Specification Reference Part 1 v3.0, 5.3.2.10 Referable Attributes, P. 56 Part 1 v3.0, Annex D. Templates for UML Tables, Template for Classes, Note 3, P. 135 XML-Schema v3.0.7, , line 739 ff. Remarks The attribute description of any Referable is optional. Among others all SubmodelElements (like Properties) are Referables . If the description attribute is set it must contain at least one item. Recommended Solution Remove the empty description node from the XML file or add at least one item to it. Empty Entity/Statements Error Message Statements must be either not set or have at least one item. Specification Reference Part 1 v3.0, 5.3.7.7 Entity Attributes, P. 70 Part 1 v3.0, Annex D. Templates for UML Tables, Template for Classes, Note 3, P. 135 XML-Schema v3.0.7, , line 293 ff. Remarks The attribute statements of an entity is optional. If the statements attribute is set it must contain at least one statement. Recommended Solution Remove the empty statements node from submodel in the XML file or add at least one statement item to it. Empty Qualifiers Error Message Qualifiers must be either not set or have at least one item. Specification Reference Part 1 v3.0, 5.3.2.8 Qualifiable Attributes, P. 53 XML-Schema v3.0.7, , line 659 ff. Remarks \"A qualifiable element may be further qualified by one or more qualifiers. \" The XML element qualifiers of a submodel element is optional. If the qualifiers element is present it must contain at least one qualifier element. Recommended Solution Remove the empty qualifiers node from the submodel in the XML file or add at least one qualifier element to it. Empty (Language) Strings Error Message The value must not be empty. Specification Reference Part 1 v3.0, Annex D. Templates for UML Tables, Template for Classes, Note 2, P. 135 XML-Schema v3.0.7, , line 659 ff. Remarks Please note that the above schema reference is just one example among many. ALL occurrences of \"xs:string\" in the XML schema are provided with a restriction of minLength=1. Recommended Solution Add a content of at least 1 character length to the attribute or remove it completely from the XML file. Package File Format (AASX) The AASX package file format is based on the Open Packaging Conventions and specified in Specification of the Asset Administration Shell, Part 5: Package File Format (AASX) . Relationships Relationships are used within an AASX package to connect the package to files, and to connect various files in the package. They form the logical model of the package. No origin part found for aasx-origin Error Message No origin part found Specification Reference Part 5 v3.0.1, 5.2 Conventions for the Asset Administration Shell Package File Format (AASX), P. 16 Remarks 'aasx-origin' is the entry point when processing an AASX package. It is defined in the relationship file /_rels/.rels within the package and has to be of relationship type ' http://admin-shell.io/aasx/relationships/aasx-origin \u29c9 '. It has been ' http://www.admin-shell.io/aasx/relationships \u29c9 ' in advance to v3, but this type with 'www.' is now deprecated and will lead to the stated error for v3 packages. See also Fix URIs for V3 by mristin \u00b7 Pull Request #40 \u00b7 aas-core-works/aas-package3-csharp . Be aware that the AASX Package Explorer didn't handle the relationship type for v3 packages correctly for some time. This issue should fixed by now, see v2024-03-05.alpha release reintroduces bug that was fixed in v2024-02-27.alpha \u00b7 Issue #184 \u00b7 eclipse-aaspe/package-explorer (github.com) . Recommended Solution Make sure that the relationship type for the aasx-origin in the /_rels/.rels file is ' http://admin-shell.io/aasx/relationships/aasx-origin \u29c9 ' (without 'www.'). Make sure that the target property is filled with the correct relative path. Supplemental Files (aas-suppl) Incorrect File Path Error Message Document with value {filepath} could not be found in the aasx package Specification Reference Part 5 v3.0, 5.3 ECMA-376 Relationships, Relationship Type \"aas-suppl\", P. 20 Remarks When a relative URI is used to reference a file from within the data of an AAS this file has to be part of the AASX package (must exists). Recommended Solution Make sure all referenced files exist in the package and the folder and file names are correct. Make sure that all relatively referenced files are listed as aas-suppl targets in the relationship part file (e.g. /aasx/_rels/data.json.rels) of the aasx package. Check if unused references exist in the relationship file. Document Change History Version 1.1 (06-Aug-2024) Added 'No origin part found for aasx-origin' error and its containing 'Relationships' chapter. Version 1.0 (15-Jan-2024) Initial Version by Fabian Gumbrecht and Christian K\u00f6rber.","title":"Common Validation Errors"},{"location":"tips-common-validation-errors/#common-validation-errors-of-aas","text":"A guide to understand, avoid and handle AAS validation errors. by Fabian Gumbrecht and Christian K\u00f6rber Version 1.1 (06-Aug-2024)","title":"Common Validation Errors of AAS"},{"location":"tips-common-validation-errors/#introduction","text":"Asset Administration Shell (AAS) is a fairly complex data standard that is still evolving and maturing. The tools that support it are also still in development and, in some cases, do not yet have support for the latest specification. The creators of AAS are under immense pressure in this situation. They must adapt their data using incomplete tools to a standard that is both difficult to access and constantly changing. Not surprisingly, data quality problems emerge. At conplement AG, we are proud to provide twinsphere, a software suite for the creation, hosting, and distribution of asset administration shells. As its provider, we often encounter data quality issues when customers try to upload their AAS to our platform. The purpose of this guide is to explain the meaning and reason behind validation errors in terms of the AAS specification and to provide support for handling them. It focuses on the most commonly encountered validation errors on our end, but it is not exhaustive. Additional errors may be added in the future. We hope this guide will assist you on your Asset Administration Shell journey!","title":"Introduction"},{"location":"tips-common-validation-errors/#table-of-content","text":"Errors with the Metamodel General Metamodel Errors Supported Version Common Attributes idShort Asset Information Asset Identifier Submodel SubmodelIdss Submodel Elements Data Element File Property MultiLanguageProperty References Submodels References Errors with Specific Submodels Handover Documentation General Errors Errors with SubmodelElements of Document Errors with SubmodelElements of DocumentID Errors with SubmodelElements of DocumentVersion Errors related to Exchange Data Formats XML Serialization Empty XML Nodes Package File Format AASX Relationships Supplemental Files aas-suppl Document Change History","title":"Table of Content"},{"location":"tips-common-validation-errors/#errors-with-the-metamodel","text":"","title":"Errors with the Metamodel"},{"location":"tips-common-validation-errors/#general-metamodel-errors","text":"","title":"General Metamodel Errors"},{"location":"tips-common-validation-errors/#supported-version","text":"","title":"Supported Version"},{"location":"tips-common-validation-errors/#twinsphere-only-supports-aas-in-the-recent-version-3","text":"","title":"twinsphere only supports AAS in the recent version 3"},{"location":"tips-common-validation-errors/#problem-description","text":"twinsphere is a platform for asset administration shells conform to the metamodel specification version 3. If you try to upload an asset administration shell of an earlier version the platform will deny it.","title":"Problem Description"},{"location":"tips-common-validation-errors/#specification-reference","text":"Product Description twinsphere \u29c9 Part 1 v3.0 \u29c9","title":"Specification Reference"},{"location":"tips-common-validation-errors/#recommended-solution","text":"The Eclipse AASX Package Explorer is able to convert v2 packages into the v3 format. Try to upgrade your package with the current Eclipse AASX Package Explorer \u29c9 Open the Asset Administration Shell with the AasxPackageExplorer Save the Asset Administration Shell as a new Asset Administration Shell Re-Upload the converted AASX package to twinsphere","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#common-attributes","text":"","title":"Common Attributes"},{"location":"tips-common-validation-errors/#idshort","text":"","title":"idShort"},{"location":"tips-common-validation-errors/#idshort-has-to-be-unique-within-the-same-namespace","text":"","title":"idShort has to be unique within the same namespace"},{"location":"tips-common-validation-errors/#error-message","text":"Constraint AASd-022: ID-short of non-identifiable referables within the same name space shall be unique (case-sensitive).","title":"Error Message"},{"location":"tips-common-validation-errors/#specification-reference_1","text":"Part 1 v3.0, 5.3.2.10 Referable Attributes, P. 56 \u29c9 Part 1 v3.0, 5.3.12.2 Constraints for Referables and Identifiables, Constraint AASd-022, P. 105 \u29c9","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks","text":"idShort is case-sensitive. A name space is defined as the parent element(s), which an element is part of and that is either referable or identifiable. Constraint is necessary in order to address an element via API by an unique idShortPath .","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_1","text":"Change idShort to a unique value or number identical values from 01 to n (i.e. DigitalFile -> DigitalFile01).","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#idshort-of-referables-shall-only-feature-letters-digits-underscore","text":"","title":"idShort of Referables shall only feature letters, digits, underscore"},{"location":"tips-common-validation-errors/#error-message_1","text":"ID-Short of Referables shall only feature letters, digits, underscore ( _ ); starting mandatory with a letter, i.e. [a-zA-Z][a-zA-Z0-9_]*.","title":"Error Message"},{"location":"tips-common-validation-errors/#specification-reference_2","text":"Part 1 v3.0, 5.3.2.10 Referable Attributes, Constraint AASd-002, P.57","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_1","text":"Hyphen is NOT allowed as of v3.0.1 of the specification. Hyphen will be allowed with upcoming version v3.1 of the specification, see Issue #295 of aas-specs-metamodel in Github for details.","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_2","text":"Replace separators like hyphens, dots or commas in the idShort with an underscore.","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#asset-information","text":"","title":"Asset Information"},{"location":"tips-common-validation-errors/#asset-identifier","text":"","title":"Asset Identifier"},{"location":"tips-common-validation-errors/#at-least-one-asset-identifier-has-to-be-defined","text":"","title":"At least one Asset Identifier has to be defined"},{"location":"tips-common-validation-errors/#error-message_2","text":"Constraint AASd-131: Either the global asset ID shall be defined or at least one specific asset ID.","title":"Error Message"},{"location":"tips-common-validation-errors/#specification-reference_3","text":"Part 1 v3.0, 5.3.4 Asset Information Attributes, Constraint AASd-131, P. 60 )","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_2","text":"Since globalAssetId and (the value of) specificAssetId are both identifiers they have to be GLOBALLY unique.","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_3","text":"Define one globalAssetId or add at least a specificAssetId to the asset information.","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#submodel","text":"","title":"Submodel"},{"location":"tips-common-validation-errors/#submodelidss","text":"","title":"SubmodelIdss"},{"location":"tips-common-validation-errors/#do-not-use-semanticid-as-submodelid-of-submodel","text":"","title":"Do not use SemanticId as SubmodelId of Submodel"},{"location":"tips-common-validation-errors/#problem-description_1","text":"Submodels require to have globally unique ids to be identifiable in any given scenario. Sometimes we encounter the semanticId of the submodel template being used as SubmodelId for a concrete submodel instance. This is not valid since the semanticId does not identify a single submodel instance and therefore is not a valid identifier.","title":"Problem Description"},{"location":"tips-common-validation-errors/#specification-reference_4","text":"Part 1 v3.0, 5.3.5 Submodel Attributes, P. 62","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_3","text":"Submodels are Identifiables and therefore must have globally unique ids.","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_4","text":"You should use URNs (e.g. urn:GMA:7.20:contractnegotiation:1:1#001) or URIs (e.g. http://www.vdi.de/gma720/ \u29c9 contractnegotiation/1/1#001) to create such a (submodel) identifier. See Part 1, Annex A, How Are New Identifiers Created? and Best Practice for Creating URI Identifiers , P. 124 for more information.","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#submodel-elements","text":"","title":"Submodel Elements"},{"location":"tips-common-validation-errors/#data-element","text":"","title":"Data Element"},{"location":"tips-common-validation-errors/#valid-values-for-data-element-category","text":"","title":"Valid values for Data Element Category"},{"location":"tips-common-validation-errors/#error-message_3","text":"Constraint AASd-090: For data elements category shall be one of the following values: CONSTANT, PARAMETER or VARIABLE.: {position}","title":"Error Message"},{"location":"tips-common-validation-errors/#specification-reference_5","text":"Part 1 v3.0, 5.3.7.6 Data Element and Overview of Data Element Types, Constraint AASd-090, P. 69","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_4","text":"Default value is VARIABLE. Categories are deprecated and should no longer be used.","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_5","text":"Remove the category attribute from the data element.","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#file","text":"","title":"File"},{"location":"tips-common-validation-errors/#wrong-uri-scheme-for-referenced-files","text":"","title":"Wrong URI Scheme for referenced files"},{"location":"tips-common-validation-errors/#error-message_4","text":"The value must represent a valid file URI scheme according to RFC 8089.","title":"Error Message"},{"location":"tips-common-validation-errors/#specification-reference_6","text":"Part 1 v3.0, 5.3.11.2 Primitive Data Types, Primitive \"PathType\", P. 97 RFC 8089 - The \"file\" URI Scheme \u29c9","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_5","text":"All submodel elements \"file\" have to use the PathType which demand a URI according to RFC 8089. This also applies to the path of defaultThumbnail within AssetInformation . RFC 8089 or \"The 'file' URI Scheme\" demands a leading file-scheme for an URI, so it has to start with \"file:\". AASX Package Explorer (v2023-11-17 and earlier) is not able to handle PathTypes with correctly referenced files (file:/...) and will not be shown them. The specification currently is not consistent since the examples for PathType given in Part 1 v3.0 are not all valid (./Specification.pdf). The upcoming specification Part 1 v3.1 will address this issue by allowing more generic URIs. See Issue #299 of aas-specs-metamodel on Github for details.","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_6","text":"For now: Change the file path from /aasx/files/example.pdf to file:/aasx/files/example.pdf.","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#empty-file-path","text":"","title":"Empty File Path"},{"location":"tips-common-validation-errors/#error-message_5","text":"Filepath can not be null","title":"Error Message"},{"location":"tips-common-validation-errors/#specification-reference_7","text":"Part 1 v3.0, 5.3.11.2 Primitive Data Types, Primitive \"PathType\", P. 97 \u29c9","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_6","text":"Since the PathType of a file value is an identifier, it must contain a valid reference identifying something. Same applies to the path attribute on a defaultThumbnail in AssetInformation .","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_7","text":"Add a valid and existing file path to the file property or remove the property.","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#valid-content-type-of-file","text":"","title":"Valid Content Type of File"},{"location":"tips-common-validation-errors/#error-message_6","text":"The value must represent a valid content MIME type according to RFC 2046.","title":"Error Message"},{"location":"tips-common-validation-errors/#specification-reference_8","text":"Part 1 v3.0, 5.3.7.9 File Attributes, P. 71 Part 1 v3.0, 5.3.11.2 Primitive Data Types, Primitive \"ContentType\", P. 96","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_7","text":"Valid MIME types for the contentType attribute are defined in RFC 2046 \u29c9 .","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_8","text":"Assign a MIME type to the file that is RFC 2046 compliant.","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#property","text":"","title":"Property"},{"location":"tips-common-validation-errors/#value-must-be-consistent-with-the-value-type-of-the-property","text":"","title":"Value must be consistent with the value type of the property"},{"location":"tips-common-validation-errors/#error-message_7","text":"Value must be consistent with the value type.","title":"Error Message"},{"location":"tips-common-validation-errors/#specification-reference_9","text":"Part 1 v3.0, 5.3.11 Primitive and Simple Data Types, P. 95","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_8","text":"Part 1's chapter on primitive and simple data types helps to determine the data type of the respective property.","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_9","text":"Apply values with the right data type to the property.","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#multilanguageproperty","text":"","title":"MultiLanguageProperty"},{"location":"tips-common-validation-errors/#value-specifies-duplicate-languages","text":"","title":"Value specifies duplicate languages"},{"location":"tips-common-validation-errors/#error-message_8","text":"Value specifies no duplicate languages.","title":"Error Message"},{"location":"tips-common-validation-errors/#specification-reference_10","text":"Part 1 v3.0, 5.3.7.10 Multi Language Property Attributes, P. 72 Part 1 v3.0, 5.3.11.2 Primitive Data Types, Primitive \"MultiLanguageTextType\", P. 97 Part 1 v3.0, 5.3.11.2 Primitive Data Types, Primitive \"LangStringSet\", P. 96","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_9","text":"The value of the MultiLanguageProperty depends on the serialization and has a similar structure like a dictionary. So the indices in the multi language value have to be unique. The error message is currently somewhat misleading. A corresponding aas-core-works issue has already been created.","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_10","text":"Check that the langStrings do not have overlapping languages. Remove entries with duplicate keys so each language has exactly one entry.","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#valid-language-tags","text":"","title":"Valid language tags"},{"location":"tips-common-validation-errors/#error-message_9","text":"The value must represent a value language tag conformant to BCP 47.","title":"Error Message"},{"location":"tips-common-validation-errors/#specification-reference_11","text":"Part 1 v3.0, 5.3.11.3 Enumeration for Submodel Element Value Types, Enumeration \"DataTypeDefRdf\", P. 103f \u29c9","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_10","text":"RDF requires IETF BCP 4729 language tags \u29c9 . Simple two-letter language tags for locales like \"de\" conformant to ISO 639-1 are allowed, as well as language tags plus extension like \"de-DE\" for country code, dialect, etc. like in \"en-US\" for English (United States) or \"en-GB\" for English (United Kingdom).","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_11","text":"Make sure that all uses language tags in the MultiLanguageProperty value are valid as described above.","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#references","text":"","title":"References"},{"location":"tips-common-validation-errors/#empty-keys","text":"","title":"Empty Keys"},{"location":"tips-common-validation-errors/#error-message_10","text":"Keys must contain at least one item.","title":"Error Message"},{"location":"tips-common-validation-errors/#specification-reference_12","text":"Part 1 v3.0, 5.3.10.2 Reference Attributes, P. 81","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_11","text":"Cardinality of attribute 'key' is 1..*.","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_12","text":"Add at least one key to the reference or remove the whole reference.","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#submodels-references","text":"","title":"Submodels References"},{"location":"tips-common-validation-errors/#all-submodel-references-must-be-model-references-to-a-submodel","text":"","title":"All submodel references must be model references to a submodel"},{"location":"tips-common-validation-errors/#error-message_11","text":"All submodels must be model references to a submodel.","title":"Error Message"},{"location":"tips-common-validation-errors/#specification-reference_13","text":"Part 1 v3.0, 5.3.3 Asset Administration Shell Attributes, P. 59","title":"Specification Reference"},{"location":"tips-common-validation-errors/#recommended-solution_13","text":"Make sure that the type of every submodel reference is set to ModelReference . Make sure that the type of every key of the submodel reference is set to Submodel .","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#valid-types-of-first-reference-key","text":"","title":"Valid types of first reference key"},{"location":"tips-common-validation-errors/#error-message_12","text":"Constraint AASd-121: For References the value of type of the first key of keys shall be one of Globally Identifiables","title":"Error Message"},{"location":"tips-common-validation-errors/#specification-reference_14","text":"Part 1, 5.3.10.4 Constraints, Constraint AASd-121, P. 93 Part 1, 5.3.10.3 Key Attributes, Enumeration \"GloballyIdentifiables\", P. 88","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_12","text":"For References , the value of Key/type of the first key of Reference/keys shall be one of GloballyIdentifiables . Part 1 v3.0.1 specifies the following literals in the enumeration GloballyIdentifiables : \"AssetAdministrationShell\", \"ConceptDescription\", \"GlobalReference\", \"Identifiable\" and \"Submodel\". Be aware that more restrictive constraints exist for other, more specific reference types , i.e. external or model references.","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_14","text":"Make sure the type value of the first key of your reference is one of the afore mentioned literals.","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#type-of-first-external-reference-key-has-to-be-globalreference","text":"","title":"Type of first external reference key has to be 'GlobalReference'"},{"location":"tips-common-validation-errors/#error-message_13","text":"Constraint AASd-122: For external references the value of type of the first key of keys shall be one of Generic Globally Identifiables.","title":"Error Message"},{"location":"tips-common-validation-errors/#specification-reference_15","text":"Part 1, 5.3.10.4 Constraints, Constraint AASd-122, P. 93 Part 1, 5.3.10.3 Key Attributes, Enumeration \"GenericGloballyIdentifiables\", P. 93","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_13","text":"For external references, i.e. References with Reference/type = ExternalReference , the value of Key/type of the first key of Reference/keys shall be one of GenericGloballyIdentifiables . Part 1 v3.0.1 defines exactly one literal in the enumeration GenericGloballyIdentifiables which is \"GlobalReference\".","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_15","text":"Make sure the first key of your external reference is of type GlobalReference .","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#valid-types-of-first-model-reference-key","text":"","title":"Valid types of first model reference key"},{"location":"tips-common-validation-errors/#error-message_14","text":"Constraint AASd-123: For model references the value of type of the first key of keys shall be one of AAS identifiables.","title":"Error Message"},{"location":"tips-common-validation-errors/#specification-reference_16","text":"Part 1, 5.3.10.4 Constraints, Constraint AASd-123, P. 93 Part 1, 5.3.10.3 Key Attributes, Enumeration \"AasIdentifiables\", P. 92","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_14","text":"For model references, i.e. References with Reference/type = ModelReference , the value of Key/type of the first key of Reference/keys shall be one of AasIdentifiables . Part 1 v3.0.1 specifies the following literals in the enumeration AasIdentifiables : \"AssetAdministrationShell\", \"ConceptDescription\", \"Identifiable\" and \"Submodel\".","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_16","text":"Make sure the type value of the first key of your model reference is one of the afore mentioned literals.","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#valid-types-of-last-external-reference-key","text":"","title":"Valid types of last external reference key"},{"location":"tips-common-validation-errors/#error-message_15","text":"Constraint AASd-124: For external references the last key of keys shall be either one of Generic Globally Identifiables or one of Generic Fragment Keys.","title":"Error Message"},{"location":"tips-common-validation-errors/#specification-reference_17","text":"Part 1, 5.3.10.4 Constraints, Constraint AASd-124, P. 93 Part 1, 5.3.10.3 Key Attributes, Enumeration \"GenericFragmentKeys\", P. 92","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_15","text":"For external references, i.e. References with Reference/type = ExternalReference , the last key of Reference/keys shall be either one of GenericGloballyIdentifiables or one of GenericFragmentKeys . Part 1 v3.0.1 defines exactly one literal in the enumeration GenericGloballyIdentifiables which is \"GlobalReference\". Part 1 v3.0.1 defines exactly one literal in the enumeration GenericFragmentKeys which is \"FragmentReference\".","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_17","text":"Make sure the type value of the last key of your external reference is one of the mentioned two literals.","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#errors-with-specific-submodels","text":"","title":"Errors with Specific Submodels"},{"location":"tips-common-validation-errors/#handover-documentation","text":"","title":"Handover Documentation"},{"location":"tips-common-validation-errors/#general-errors","text":"","title":"General Errors"},{"location":"tips-common-validation-errors/#no-cardinality-counters-in-eclass-irdi-path-of-semanticids","text":"","title":"No Cardinality Counters in ECLASS IRDI Path of SemanticIds"},{"location":"tips-common-validation-errors/#problem-description_2","text":"The semanticId of a Submodel Elements like DocumentId , DocumentClassification or DocumentVersion has a defined ECLASS IRDI path. This is a fixed exact value in each case, e.g. \"0173-1#02-ABI501#001/0173-1#01- AHF580#001\", \" 0173-1#02-ABI502#001/0173-1#01-AHF581#001\" or \"0173-1#02-ABI503#001/0173-1#01-AHF582#001\". Sometimes we encounter a semanticId for those elements with an additional attached string like \"0173-1#02-ABI501#001/0173-1#01-AHF580#001*01\", \"0173-1#02-ABI502#001/0173-1#01-AHF581#001*01\" or \"0173-1#02-ABI503#001/0173-1#01-AHF582#001*01\". These are no valid semanticId as specified in the Handover Documentation submodel template.","title":"Problem Description"},{"location":"tips-common-validation-errors/#specification-reference_18","text":"Handover Documentation v1.2, 2.6 SubmodelElements of DocumentID, P. 16 Handover Documentation v1.2, 2.7 SubmodelElements of DocumentClassification, P. 17 Handover Documentation v1.2, 2.8 SubmodelElements of DocumentVersion, P. 19","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_16","text":"According to ECLASS's IRDI Path definition \u29c9 the star character (*) is a separator between reference property and cardinality counter.","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_18","text":"Do not use cardinality counters in semanticIds . Make sure the semanticId of each Submodel Element has the exact value as defined in the submodel template specification.","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#errors-with-submodelelements-of-document","text":"","title":"Errors with SubmodelElements of Document"},{"location":"tips-common-validation-errors/#semanticid-of-submodelelement-document","text":"","title":"SemanticId of SubmodelElement Document"},{"location":"tips-common-validation-errors/#problem-description_3","text":"The semanticId of a Document should be 0173-1#02-ABI500#001/0173-1#01-AHF579#001. Sometimes it is mistaken with the ECLASS IRDI for number of DocumentIds 0173-1#02-ABH990#001.","title":"Problem Description"},{"location":"tips-common-validation-errors/#specification-reference_19","text":"Handover Documentation v1.2, 2.4 Attributes of the Submodel instance, idShort \"Document{00}\", P. 13","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_17","text":"0173-1#02-ABI500#001 (property) is defined as \"This SubmodelElementCollection holds the information for a document entity\" 0173-1#01-AHF579#001 (class) is defined as \"Each SubmodelElementCollection describes a document by standard, which is associated to the particular Asset Administration Shell\" 0173-1#02-ABH990#001 (property) is defined as \"Number of documents (handover documentation)\"","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_19","text":"Make sure the semanticId of the Document Submodel Element Collection has the value \"0173-1#02-ABI500#001/0173-1#01-AHF579#001\".","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#errors-with-submodelelements-of-documentid","text":"","title":"Errors with SubmodelElements of DocumentID"},{"location":"tips-common-validation-errors/#mandatory-property-valueid-in-submodel-element-documentid","text":"","title":"Mandatory property ValueId in Submodel Element DocumentId"},{"location":"tips-common-validation-errors/#problem-description_4","text":"ValueId is a required value in the DocumentId . Sometimes we encounter handover documentation submodel instances where ValueId is missing in some or all DocumentIds .","title":"Problem Description"},{"location":"tips-common-validation-errors/#specification-reference_20","text":"Handover Documentation v1.2, 2.6 SubmodelElements of DocumentID, shortId \"ValueId\", P. 16","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_18","text":"ValueId is an identification number of the Document within a given domain, e.g. the providing organization Example values for ValueId : 1213455566, XF90-884","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_20","text":"Make sure there is a value set for each ValueId of each DocumentId representing an identifier which clearly identifies the document within your organization.","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#errors-with-submodelelements-of-documentversion","text":"","title":"Errors with SubmodelElements of DocumentVersion"},{"location":"tips-common-validation-errors/#semanticid-of-submodelelement-digitalfile","text":"","title":"SemanticId of SubmodelElement DigitalFile"},{"location":"tips-common-validation-errors/#problem-description_5","text":"The semanticId of a digital file should be 0173-1#02-ABI504#001/0173-1#01-AHF583#001. Sometimes it is mistaken with the ECLASS IRDI for the document path 0173-1#02-ABI005#001, which doesn't describe the whole file.","title":"Problem Description"},{"location":"tips-common-validation-errors/#specification-reference_21","text":"Handover Documentation v1.2, 2.8 SubmodelElements of DocumentVersion, idShort \"DigitalFile{00}\", P. 21","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_19","text":"0173-1#02-ABI504#001 (property) is defined as \"MIME-Type, file name and file contents given by the file SubmodelElement\". 0173-1#01-AHF583#001 (class) is defined as \"MIME-Type, file name and file contents given by the file SubmodelElement\". 0173-1#02-ABI005#001 (property) is defined as \"Path of the document\".","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_21","text":"Replace the semanticId of the DigitalFile element with the IRDI path \"0173-1#02-ABI504#001/0173-1#01-AHF583#001\".","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#idshort-of-submodelelement-digitalfile","text":"","title":"IdShort of SubmodelElement DigitalFile"},{"location":"tips-common-validation-errors/#problem-description_6","text":"IdShorts for digital files have to be unique within the DocumentVersion. It is recommended to name them \"DigitalFile\" with a following two-digit number.","title":"Problem Description"},{"location":"tips-common-validation-errors/#specification-reference_22","text":"Handover Documentation v1.2, 2.8 SubmodelElements of DocumentVersion, idShort \"DigitalFile{00}\", P. 21 Handover Documentation v1.2, Annex A. Explanations of table formats used, 2. Tables on Submodels and SubmodelElements, P. 23","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_20","text":"IdShorts for digital files have to be unique within the DocumentVersion. It is recommended to name them \"DigitalFile\" with a following two-digit number: DigitalFile{00}. If an idShort ends with \u2018{00}\u2019, this indicates a suffix of the respective length (here: 2) of decimal digits to make the idShort unique. A different idShort might be chosen, as long as it is unique in the parent\u2019s context.","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_22","text":"Name the idShort of digital files of one document version \"DigitalFile\" and add a number from 01 to XX. Example: DigitalFile01, DigitalFile02, ...","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#errors-related-to-exchange-data-formats","text":"","title":"Errors related to Exchange Data Formats"},{"location":"tips-common-validation-errors/#xml-serialization","text":"Relevant if you use XML in the aas-spec file of your AASX package, e.g. by using the AASX Package Explorer to generate packages.","title":"XML Serialization"},{"location":"tips-common-validation-errors/#empty-xml-nodes","text":"Main error source here is that the official XML schema is demanding that most XML nodes need to contain something (item/value) or be non-existent. So, in many cases empty XML nodes are not allowed by the schema.","title":"Empty XML Nodes"},{"location":"tips-common-validation-errors/#empty-embeddeddataspecification","text":"","title":"Empty EmbeddedDataSpecification"},{"location":"tips-common-validation-errors/#error-message_16","text":"Embedded data specifications must be either not set or have at least one item.: {position}","title":"Error Message"},{"location":"tips-common-validation-errors/#specification-reference_23","text":"Issue #296 of admin-shell-io/aas-specs on Github \u29c9 Part 1 v3.0, 7.2.5 Embedded Data Specifications, Figure 58 Realization of Embedded Data Specifications, P. 115 Part 1 v3.0, Annex D. Templates for UML Tables, Template for Classes, Note 3, P. 135 XML-Schema v3.0.7, , line 278 ff.","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_21","text":"EmbeddedDataSpecifications must contain both, a DataSpecification and a DataSpecificationContent node. Cardinality is wrongly documented in Part 1 v3.0, see linked issue.","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_23","text":"Remove the empty node from the XML file or add DataSpecificationContent to it.","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#empty-submodelelementcollectionvalue","text":"","title":"Empty SubmodelElementCollection/Value"},{"location":"tips-common-validation-errors/#error-message_17","text":"Value must be either not set or have at least one item.","title":"Error Message"},{"location":"tips-common-validation-errors/#specification-reference_24","text":"Part 1 v3.0, 5.3.7.16 Submodel Element Collection Attributes, P. 76 Part 1 v3.0, Annex D. Templates for UML Tables, Template for Classes, Note 3, P. 135 XML-Schema v3.0.7, , line 869 ff.","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_22","text":"The attribute value of a SubmodelElementCollection is optional. But if there is a value it must contain at least one SubmodelElement item to it.","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_24","text":"Remove the empty SubmodelElementCollection node from the XML file or add at least one SubmodelElement to it.","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#empty-submodelelementdescription","text":"","title":"Empty SubmodelElement/Description"},{"location":"tips-common-validation-errors/#error-message_18","text":"Description must be either not set or have at least one item.","title":"Error Message"},{"location":"tips-common-validation-errors/#specification-reference_25","text":"Part 1 v3.0, 5.3.2.10 Referable Attributes, P. 56 Part 1 v3.0, Annex D. Templates for UML Tables, Template for Classes, Note 3, P. 135 XML-Schema v3.0.7, , line 739 ff.","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_23","text":"The attribute description of any Referable is optional. Among others all SubmodelElements (like Properties) are Referables . If the description attribute is set it must contain at least one item.","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_25","text":"Remove the empty description node from the XML file or add at least one item to it.","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#empty-entitystatements","text":"","title":"Empty Entity/Statements"},{"location":"tips-common-validation-errors/#error-message_19","text":"Statements must be either not set or have at least one item.","title":"Error Message"},{"location":"tips-common-validation-errors/#specification-reference_26","text":"Part 1 v3.0, 5.3.7.7 Entity Attributes, P. 70 Part 1 v3.0, Annex D. Templates for UML Tables, Template for Classes, Note 3, P. 135 XML-Schema v3.0.7, , line 293 ff.","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_24","text":"The attribute statements of an entity is optional. If the statements attribute is set it must contain at least one statement.","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_26","text":"Remove the empty statements node from submodel in the XML file or add at least one statement item to it.","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#empty-qualifiers","text":"","title":"Empty Qualifiers"},{"location":"tips-common-validation-errors/#error-message_20","text":"Qualifiers must be either not set or have at least one item.","title":"Error Message"},{"location":"tips-common-validation-errors/#specification-reference_27","text":"Part 1 v3.0, 5.3.2.8 Qualifiable Attributes, P. 53 XML-Schema v3.0.7, , line 659 ff.","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_25","text":"\"A qualifiable element may be further qualified by one or more qualifiers. \" The XML element qualifiers of a submodel element is optional. If the qualifiers element is present it must contain at least one qualifier element.","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_27","text":"Remove the empty qualifiers node from the submodel in the XML file or add at least one qualifier element to it.","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#empty-language-strings","text":"","title":"Empty (Language) Strings"},{"location":"tips-common-validation-errors/#error-message_21","text":"The value must not be empty.","title":"Error Message"},{"location":"tips-common-validation-errors/#specification-reference_28","text":"Part 1 v3.0, Annex D. Templates for UML Tables, Template for Classes, Note 2, P. 135 XML-Schema v3.0.7, , line 659 ff.","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_26","text":"Please note that the above schema reference is just one example among many. ALL occurrences of \"xs:string\" in the XML schema are provided with a restriction of minLength=1.","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_28","text":"Add a content of at least 1 character length to the attribute or remove it completely from the XML file.","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#package-file-format-aasx","text":"The AASX package file format is based on the Open Packaging Conventions and specified in Specification of the Asset Administration Shell, Part 5: Package File Format (AASX) .","title":"Package File Format (AASX)"},{"location":"tips-common-validation-errors/#relationships","text":"Relationships are used within an AASX package to connect the package to files, and to connect various files in the package. They form the logical model of the package.","title":"Relationships"},{"location":"tips-common-validation-errors/#no-origin-part-found-for-aasx-origin","text":"","title":"No origin part found for aasx-origin"},{"location":"tips-common-validation-errors/#error-message_22","text":"No origin part found","title":"Error Message"},{"location":"tips-common-validation-errors/#specification-reference_29","text":"Part 5 v3.0.1, 5.2 Conventions for the Asset Administration Shell Package File Format (AASX), P. 16","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_27","text":"'aasx-origin' is the entry point when processing an AASX package. It is defined in the relationship file /_rels/.rels within the package and has to be of relationship type ' http://admin-shell.io/aasx/relationships/aasx-origin \u29c9 '. It has been ' http://www.admin-shell.io/aasx/relationships \u29c9 ' in advance to v3, but this type with 'www.' is now deprecated and will lead to the stated error for v3 packages. See also Fix URIs for V3 by mristin \u00b7 Pull Request #40 \u00b7 aas-core-works/aas-package3-csharp . Be aware that the AASX Package Explorer didn't handle the relationship type for v3 packages correctly for some time. This issue should fixed by now, see v2024-03-05.alpha release reintroduces bug that was fixed in v2024-02-27.alpha \u00b7 Issue #184 \u00b7 eclipse-aaspe/package-explorer (github.com) .","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_29","text":"Make sure that the relationship type for the aasx-origin in the /_rels/.rels file is ' http://admin-shell.io/aasx/relationships/aasx-origin \u29c9 ' (without 'www.'). Make sure that the target property is filled with the correct relative path.","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#supplemental-files-aas-suppl","text":"","title":"Supplemental Files (aas-suppl)"},{"location":"tips-common-validation-errors/#incorrect-file-path","text":"","title":"Incorrect File Path"},{"location":"tips-common-validation-errors/#error-message_23","text":"Document with value {filepath} could not be found in the aasx package","title":"Error Message"},{"location":"tips-common-validation-errors/#specification-reference_30","text":"Part 5 v3.0, 5.3 ECMA-376 Relationships, Relationship Type \"aas-suppl\", P. 20","title":"Specification Reference"},{"location":"tips-common-validation-errors/#remarks_28","text":"When a relative URI is used to reference a file from within the data of an AAS this file has to be part of the AASX package (must exists).","title":"Remarks"},{"location":"tips-common-validation-errors/#recommended-solution_30","text":"Make sure all referenced files exist in the package and the folder and file names are correct. Make sure that all relatively referenced files are listed as aas-suppl targets in the relationship part file (e.g. /aasx/_rels/data.json.rels) of the aasx package. Check if unused references exist in the relationship file.","title":"Recommended Solution"},{"location":"tips-common-validation-errors/#document-change-history","text":"","title":"Document Change History"},{"location":"tips-common-validation-errors/#version-11-06-aug-2024","text":"Added 'No origin part found for aasx-origin' error and its containing 'Relationships' chapter.","title":"Version 1.1 (06-Aug-2024)"},{"location":"tips-common-validation-errors/#version-10-15-jan-2024","text":"Initial Version by Fabian Gumbrecht and Christian K\u00f6rber.","title":"Version 1.0 (15-Jan-2024)"},{"location":"typed-aas-metamodels-overview/","text":"Development libraries Our primary library that we offer is twinsphere.TypedAasMetamodels . It is a C# library providing a simplified work-flow for handling Shells and Submodels following the IDTA Asset Administration Shell standard. Currently supported version of the AAS Standard is v3.0 \u29c9 . In the past we also offered a general twinsphere library called Conplement.Sphere.SDK . This library is deprecated and no longer maintained. Download twinsphere.TypedAasMetamodels is available as a NuGet package \u29c9 . You can add the feed to your project with dotnet add package : dotnet add package twinsphere.TypedAasMetamodels Example The following shows a brief, but full example of how a shell with submodels can be created and stored as .aasx package with twinsphere.TypedAasMetamodels. using twinsphere.TypedAasMetamodels.Types.Submodels.DigitalNameplate.V2_0; using twinsphere.TypedAasMetamodels.Types.Submodels.DigitalNameplate.V2_0.Builder; using twinsphere.TypedAasMetamodels.Types.Shell; using twinsphere.TypedAasMetamodels.Types.Shell.Builder; using twinsphere.TypedAasMetamodels.Common.Helpers; using twinsphere.TypedAasMetamodels.Packaging; // ... // 1. we build a digital nameplate for our product var digitalNameplateBuilder = new DigitalNameplateBuilder( \"nameplate-C4022\", \"https://conplement.de/test\", \"conplement AG\".ToMultiLanguageString(), \"internal-product\".ToMultiLanguageString(), new ContactInformation( \"DE\".ToMultiLanguageString(), \"N\u00fcrnberg\".ToMultiLanguageString(), \"S\u00fcdwestpark 92G\".ToMultiLanguageString(), \"90449\".ToMultiLanguageString() ), \"2025\"); // 1.1 digital nameplate makes little sense without markings // Note: PackageFile wraps a reference to a file on disk. The file will then later be picked up for packaging. var mainMarking = new MarkingBuilder(\"main-image\", new PackageFile(\"/some/local/path/main-marking.png\", \"image/png\")) .WithExplosionSafeties(new ExplosionSafeties([ new ExplosionSafety( AmbientConditions: new AmbientConditions(\"external\", \"maximum\".ToMultiLanguageString(\"en\"), \"ACME\", \"maximum\", \"highly-flammable\", \"0\", \"75\", \"55\", \"normal\" ), ProcessConditions: new ProcessConditions(\"external\", \"maximum\".ToMultiLanguageString(\"en\"), \"ACME\", \"maximum\", \"highly-flammable\", \"0\", \"75\", \"55\", \"normal\" ) ) ]).build(); var secondMarking = new Marking(\"second-image\", new PackageFile(\"/some/local/path/second-marking.png\", \"image/png\")); var digitalNameplate = digitalNameplateBuilder .WithCompanyLogo(new PackageFile(\"/some/other/local/path/conplement-logo.png\", \"image/png\")) .WithFirmwareVersion(\"en\", \"1.0.0\") .WithSerialNumber(\"09383-sf8843j4-4\") .WithCountryOfOrigin(\"Germany\") .WithDateOfManufacture(new DateOnly(2025, 5, 13)) .WithMarkings([mainMarking, secondMarking]) .Build(); // 2. we need a shell for our product, too var shell = new AssetAdministrationShell(\"9A8F8B66-5AA7-4528-AA17-1CC128AF64C2\", new AssetInformation( Core.AssetKind.Instance, globalAssetId: \"urn:conplement:aas:type:7689239_f0b4f6ff-6951-4614-b733-6da43db7af9a\", defaultThumbnail: new PackageFile(\"/some/local/path/conplement-product-thumbnail.png\", \"image/png\") ), description: new MultiLanguageString([{\"en-EN\", \"description\"}, {\"de-DE\", \"Beschreibung\"}])); // 3. we can now create an.aasx package out of all of this // Note: packagingInfo will wrap all information necessary for packaging, i.e., submodels, // referenced concept descriptions, and files to include into the paths, if available. var packagingInfo = PackagePreprocessor.ProcessShell(shell, [digitalNameplate]); var aasxPackage = new AasxPackage(packagingInfo).Build(); // 4. you can save the package to disk for analysis with the https://github.com/admin-shell-io/aasx-package-explorer packageFilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"my-package.aasx\"); await aasxPackage.SaveToFile(packageFilePath); Design Principles and Concepts twinsphere.TypedAasMetamodels is with the following goals: Compatibility with the latest Asset Administration Shell (AAS) specification, as specified by the Industrial Digital Twin Association , currently in version 3.0. Convenience for developers to reduce the necessary study of the AAS meta model specifications. For example, XML code documentation is heavily used to describe AAS semantics in the library. Definition of meta models for selected submodels, such as Digital Nameplate. Offering packaging functionality based on the.aasx format. In its design, the library is designed to make the creation of shells and submodels as easy, as possible, while reducing sources of potential errors where possible. To this end, it employs some basic design rules: Use distinct types where possible: Submodels are class citizens: where possible (i.e., where submodel templates are not ambiguous), submodels and their submodel elements are modelled, individual types. Enums to encode restricted properties. Prevent illegal states where possible, both, with respect to the meta model specification, as well as, to the submodel template specification: At compile time via signatures: creation methods enforce mandatory arguments, preventing incomplete submodel elements. At runtime time via fail-fast principle: constraints enforce correct types and qualifiers, e.g., the number of elements in lists. At runtime in conversion: meta models are validated in conversion. Validation errors cause the conversion to fail early. Hide metadata from the user: any SMT metadata, such as SemanticIds, IdShorts, ValueTypes, ... is handled internally. Users don't have to worry about them. Working with Shells and Packages Shell Abstractions The twinsphere.TypedAasMetamodels library provides all means for the creation, processing, and modification of AAS shells. Depending on your use case, you can either create a new shell, either by constructor call, or using the provided builder pattern: using twinsphere.TypedAasMetamodels.Types.Shell; using twinsphere.TypedAasMetamodels.Types.Shell.Builder; // via constructor var shell = new AssetAdministrationShell(\"9A8F8B66-5AA7-4528-AA17-1CC128AF64C2\", new AssetInformation( Core.AssetKind.Instance, globalAssetId: \"urn:conplement:aas:type:7689239_f0b4f6ff-6951-4614-b733-6da43db7af9a\", defaultThumbnail: new PackageFile(\"/some/local/path/conplement-product-thumbnail.png\", \"image/png\") ), description: new MultiLanguageString([{\"en-EN\", \"description\"}, {\"de-DE\", \"Beschreibung\"}])); // equivalent, via builder var shell = new AssetAdministrationShellBuilder(\"9A8F8B66-5AA7-4528-AA17-1CC128AF64C2\", new AssetInformation( Core.AssetKind.Instance, globalAssetId: \"urn:conplement:aas:type:7689239_f0b4f6ff-6951-4614-b733-6da43db7af9a\", defaultThumbnail: new PackageFile(\"/some/local/path/conplement-product-thumbnail.png\", \"image/png\") )) .WithDescription(new MultiLanguageString([{\"en-EN\", \"description\"}, {\"de-DE\", \"Beschreibung\"}])) .Build(); Additionally, there is also the ability to load from and convert to shells of the AasCore types: using AasCore.Aas3_0; using twinsphere.TypedAasMetamodels.Types.Shell; Aas3_0.IShell metamodelShell; // load, e.g. from a repository // convert to the TypedAasMetamodels representation AssetAdministrationShell shell; try { shell = AssetAdministrationShell.FromMetamodel(metamodelShell); } catch (ValidationException exception) { Console.Error($\"Could not load erroneous shell: {exception}\"); } // modify the shell // convert it back try { metamodelShell = shell.ToMetamodel(); } catch (ValidationException exception) { Console.Error($\"Could not convert to metamodel: {exception}\"); } Note : In general the shell abstractions act as a thin layer around the types of the types of AasCore. They primarily extend them with convenience methods and stricter correctness checks to prevent user errors as early as possible. Packaging Creating .aasx packages from scratch typically is complex and involves a number of tedious steps: Create submodels Create shells Reference the submodels in the shell Collect any used concept descriptions and reference them in the shell Collect files for packaging Collect the thumbnail file of the shell While you can do these steps manually, for most cases it should suffice to use the AasxPackageBuilder , that automatically takes care of the above steps: using twinsphere.TypedAasMetamodels.Types.Submodels.DigitalNameplate.V2_0; using twinsphere.TypedAasMetamodels.Types.Shell; using twinsphere.TypedAasMetamodels.Types.Shell.Builder; using twinsphere.TypedAasMetamodels.Packaging; // 1. create the shell AssetAdministrationShell shell; // 2. create some submodels DigitalNameplate nameplate; // 3.1. include an external file reference nameplate.CompanyLogo = new FileReference(\"https://some.tld/some/image.png\"); // 3.2. alternatively, include a reference to a local file nameplate.CompanyLogo = new PackageFileReference(\"/home/user/some/image.png\"); // 4. we can now create an.aasx package out of all of this // Note: packagingInfo will wrap all information necessary for packaging, i.e., submodels, // referenced concept descriptions, and files to include into the paths, if available. var packagingInfo = PackagePreprocessor.ProcessShell(shell, [digitalNameplate]); var aasxPackage = new AasxPackageBuilder(packagingInfo).Build(); Note : Take care to use the PackageFileReference type if you want to include local files into your package. This type wraps a reference to a file on disk. In the packaging step PackageFileReference elements will be included into the package and their links will resolved accordingly. See Submodel Elements for more details on the built-in types of the library. Working with Submodels Supported Submodels We are constantly working on the support of additional submodels. At the time of writing, twinsphere.TypedAasMetamodels provides support for the following submodels: IDTA 02023 Carbon Footprint 0.9 IDTA 02002-1-0 Submodel for Contact Information 1.0 IDTA 02006-2-0 Digital Nameplate for industrial equipment 2.0 IDTA 02004-1-2 Handover Documentation 1.2 IDTA 02011-1-1 Hierarchical Structures enabling Bills of Material 1.1 IDTA 02003-1-2 Generic Frame for Technical Data for Industrial Equipment in Manufacturing 1.2 Types of the Meta Model In twinsphere.TypedAasMetamodels we aim to provide an easy to use API for the work with submodels. To this end we use the primitives of the C# language to represent the parts of submodels. Submodels and Submodel Element Collections Submodels and Submodel Element Collections represent structure types in the language specification. In general, these types are realized as classes and records. Submodel Elements At the moment, we provide support for the following set of submodel elements. For each of these types we provide type that performs additional correctness checks at creation, and, potentially, provides additional helper methods. ReferenceElement : representation of a ReferenceElement. Files : the library provides two abstractions to represent files FileReference : generic representation of a file that may reference files anywhere, including external URLs. PackageFileReference : special file representation. Use this, if you want to create a package for which a file should be included. MultiLanguageString : Multi Language Property. Properties and Lists For both, properties, and lists, are realized using the suitable C# primitives. Builders twinsphere.TypedAasMetamodels employs the builder pattern \u29c9 for most of the composed types. These builders allow the step-wise collection of properties necessary for the creation of an object. To create an object with a builder, the workflow thereby is as follows: construction of the builder with mandatory arguments set or add attributes via Add* (for list elements) or With* for single attributes. finally, construct the actual type via a call to Build() . The builders follow the approach described in design principles : they apply constraints in their constructors, setters, and in the build method, to ensure validity and consistency of input data. As shown with the DigitalNameplateBuilder you can use method chaining to fill in properties: // 1. construction of the Builder with its necessary attributes var digitalNameplateBuilder = new DigitalNameplateBuilder( \"nameplate-C4022\", \"https://conplement.de/test\", \"conplement AG\".ToMultiLanguageString(), \"internal-product\".ToMultiLanguageString(), new ContactInformation( \"DE\".ToMultiLanguageString(), \"N\u00fcrnberg\".ToMultiLanguageString(), \"S\u00fcdwestpark 92G\".ToMultiLanguageString(), \"90449\".ToMultiLanguageString() ), \"2025\"); // 2. providing some additional attributes digitalNameplateBuilder .WithHardwareVersion(\"en\", \"1.0.0\") .WithFirmwareVersion(\"en\", \"0.1.0\") .WithSoftwareVersion(\"en\", \"0.2.3\"); // 3. finally construct the digital nameplate var digitalNameplate = digitalNameplateBuilder.Build(); important : As complex objects are passed into the builder by reference, it is not safe to reuse a builder for the creation of multiple objects. Validation There are extensive validation mechanisms in twinsphere.TypedAasMetamodels to check whether submodel instances are valid with respect to their submodel templates. Besides model specific checks, twinsphere.TypedAasMetamodels provides validations for: missing mandatory submodel elements unknown submodel elements unset (mandatory) attributes in submodel elements correct cardinality of submodel elements valid type representation of properties Note : The page on validations contains an exhaustive list of the respective validations with descriptions. Each submodel type exposes a validator class that can be used to validate instances of the submodel. These validators return enumerators with the found validation errors: using AasCore.Aas3_0; using twinsphere.TypedAasMetamodels.Types.Submodels.DigitalNameplate.V2_0; using twinsphere.TypedAasMetamodels.Types.Submodels.DigitalNameplate.V2_0.Validation; Aas3_0.ISubmodel digitalNameplateMetamodel; // ... load a Digital Nameplate from some source, e.g., from a repository. var errors = DigitalNameplateValidator.Validate(digitalNameplateMetamodel); if (errors.Count() == 0) { Console.WriteLine(\"\u2728 Correct Digital Nameplate.\") } else { Console.WriteError(\"\ud83d\udc1b Broken Digital Nameplate:\") foreach (var error in errors) { Console.WriteError(error.Reason); } } Note : These validations are to be understood as an extension of the terrific validations provided by the aas_core_works team. Whereas the validations in the AasCore SDK addresses the correctness of shells and submodels on > a syntactical level, the validations in twinsphere.TypedMetaModels are instead concerned with the correctness of submodels in respect to their respective submodel templates, i.e., whether submodels fulfill the requirements given by their submodel templates. Thus, the validation is limited to submodel instances. Conversion The twinsphere.TypedAasMetamodels library provides the means to convert between ( valid ) models in the generic meta model representation and the typed submodel, and vice versa. To this end, submodels implement FromMetamodel() and ToMetamodel() : using AasCore.Aas3_0; using twinsphere.TypedAasMetamodels.Types.Submodels.DigitalNameplate.V2_0; Aas3_0.ISubmodel digitalNameplateMetamodel; // ... load a Digital Nameplate from some source, e.g., from a repository. // 1. convert to its typed representation DigitalNameplate digitalNameplate; try { digitalNameplate = DigitalNameplate.FromMetamodel(digitalNameplateMetamodel); } catch (SubmodelConversionException conversionException) { Console.Error($\"Failed to convert from erroneous submodel: {conversionException}\"); } // 2. perform operations on the Digital Nameplate digitalNameplate.SoftwareVersion = \"1.0.0\".ToMultiLanguageString(\"en\"); // ... // 3. convert the DigitalNameplate back digitalNameplateMetamodel = digitalNameplate.ToMetamodel(); try { digitalNameplateMetamodel = digitalNameplate.ToMetamodel(); } catch (SubmodelConversionException conversionException) { Console.Error($\"Failed to convert to metamodel: {conversionException}\"); } Note : FromMetamodel() will use the validation mechanism to check whether the submodel is a valid instance of its SMT. If it is not, it will throw a SubmodelConversionException with the encountered errors. Additional Features Besides the dedicated submodel support mechanisms, twinsphere.TypedAasMetamodels provides some further general-purpose utilities to simplify the work with submodels. Value-only Semantics Besides the heavy meta model specification, the IDTA, furthermore, provides a specification for the so-called \"Value-only Semantics\". The Value-only Semantics describes a stripped down representation for meta models. The twinsphere.TypedAasMetamodels library allows to convert arbitrary submodels, i.e., also for submodels not listed in the supported submodels to the value-only representation. using AasCore.Aas3_0; using twinsphere.TypedAasMetamodels.Conversion.ValueOnly; Aas3_0.ISubmodel digitalNameplateMetamodel; // ... load a Digital Nameplate from some source, e.g., from a repository. var jsonString = ValueOnlySerializer.ToValueOnly(digitalNameplateMetamodel); Caveats and Notes on Usage Deviations From SMT Specifications In some cases the library deviates from the properties as described in the officially released SMTs. These changes are typically editorial in nature to fix issues in the SMTs. We adopt editorial changes if we can easily identify what the SMT should look like if it was correct, even if these changes are not part of the official SMT specifications (yet). We chose this strategy to provide users with the ability to create valid submodels as early as possible. You can find a detailed list of these changes in the overview of the supported submodels . Known Issues and Workarounds Using the proper locale twinsphere.TypedAasMetamodels internally uses features of System.Globalization , please ensure that your execution environment provides support for this library, otherwise, twinsphere.TypedAasMetamodels may not function correctly! The dotnet apline images, for example, are known to cause issues with default settings and require additional care. See the dotnet notes on globalization support \u29c9 for detailed information.","title":"Overview"},{"location":"typed-aas-metamodels-overview/#development-libraries","text":"Our primary library that we offer is twinsphere.TypedAasMetamodels . It is a C# library providing a simplified work-flow for handling Shells and Submodels following the IDTA Asset Administration Shell standard. Currently supported version of the AAS Standard is v3.0 \u29c9 . In the past we also offered a general twinsphere library called Conplement.Sphere.SDK . This library is deprecated and no longer maintained.","title":"Development libraries"},{"location":"typed-aas-metamodels-overview/#download","text":"twinsphere.TypedAasMetamodels is available as a NuGet package \u29c9 . You can add the feed to your project with dotnet add package : dotnet add package twinsphere.TypedAasMetamodels","title":"Download"},{"location":"typed-aas-metamodels-overview/#example","text":"The following shows a brief, but full example of how a shell with submodels can be created and stored as .aasx package with twinsphere.TypedAasMetamodels. using twinsphere.TypedAasMetamodels.Types.Submodels.DigitalNameplate.V2_0; using twinsphere.TypedAasMetamodels.Types.Submodels.DigitalNameplate.V2_0.Builder; using twinsphere.TypedAasMetamodels.Types.Shell; using twinsphere.TypedAasMetamodels.Types.Shell.Builder; using twinsphere.TypedAasMetamodels.Common.Helpers; using twinsphere.TypedAasMetamodels.Packaging; // ... // 1. we build a digital nameplate for our product var digitalNameplateBuilder = new DigitalNameplateBuilder( \"nameplate-C4022\", \"https://conplement.de/test\", \"conplement AG\".ToMultiLanguageString(), \"internal-product\".ToMultiLanguageString(), new ContactInformation( \"DE\".ToMultiLanguageString(), \"N\u00fcrnberg\".ToMultiLanguageString(), \"S\u00fcdwestpark 92G\".ToMultiLanguageString(), \"90449\".ToMultiLanguageString() ), \"2025\"); // 1.1 digital nameplate makes little sense without markings // Note: PackageFile wraps a reference to a file on disk. The file will then later be picked up for packaging. var mainMarking = new MarkingBuilder(\"main-image\", new PackageFile(\"/some/local/path/main-marking.png\", \"image/png\")) .WithExplosionSafeties(new ExplosionSafeties([ new ExplosionSafety( AmbientConditions: new AmbientConditions(\"external\", \"maximum\".ToMultiLanguageString(\"en\"), \"ACME\", \"maximum\", \"highly-flammable\", \"0\", \"75\", \"55\", \"normal\" ), ProcessConditions: new ProcessConditions(\"external\", \"maximum\".ToMultiLanguageString(\"en\"), \"ACME\", \"maximum\", \"highly-flammable\", \"0\", \"75\", \"55\", \"normal\" ) ) ]).build(); var secondMarking = new Marking(\"second-image\", new PackageFile(\"/some/local/path/second-marking.png\", \"image/png\")); var digitalNameplate = digitalNameplateBuilder .WithCompanyLogo(new PackageFile(\"/some/other/local/path/conplement-logo.png\", \"image/png\")) .WithFirmwareVersion(\"en\", \"1.0.0\") .WithSerialNumber(\"09383-sf8843j4-4\") .WithCountryOfOrigin(\"Germany\") .WithDateOfManufacture(new DateOnly(2025, 5, 13)) .WithMarkings([mainMarking, secondMarking]) .Build(); // 2. we need a shell for our product, too var shell = new AssetAdministrationShell(\"9A8F8B66-5AA7-4528-AA17-1CC128AF64C2\", new AssetInformation( Core.AssetKind.Instance, globalAssetId: \"urn:conplement:aas:type:7689239_f0b4f6ff-6951-4614-b733-6da43db7af9a\", defaultThumbnail: new PackageFile(\"/some/local/path/conplement-product-thumbnail.png\", \"image/png\") ), description: new MultiLanguageString([{\"en-EN\", \"description\"}, {\"de-DE\", \"Beschreibung\"}])); // 3. we can now create an.aasx package out of all of this // Note: packagingInfo will wrap all information necessary for packaging, i.e., submodels, // referenced concept descriptions, and files to include into the paths, if available. var packagingInfo = PackagePreprocessor.ProcessShell(shell, [digitalNameplate]); var aasxPackage = new AasxPackage(packagingInfo).Build(); // 4. you can save the package to disk for analysis with the https://github.com/admin-shell-io/aasx-package-explorer packageFilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"my-package.aasx\"); await aasxPackage.SaveToFile(packageFilePath);","title":"Example"},{"location":"typed-aas-metamodels-overview/#design-principles-and-concepts","text":"twinsphere.TypedAasMetamodels is with the following goals: Compatibility with the latest Asset Administration Shell (AAS) specification, as specified by the Industrial Digital Twin Association , currently in version 3.0. Convenience for developers to reduce the necessary study of the AAS meta model specifications. For example, XML code documentation is heavily used to describe AAS semantics in the library. Definition of meta models for selected submodels, such as Digital Nameplate. Offering packaging functionality based on the.aasx format. In its design, the library is designed to make the creation of shells and submodels as easy, as possible, while reducing sources of potential errors where possible. To this end, it employs some basic design rules: Use distinct types where possible: Submodels are class citizens: where possible (i.e., where submodel templates are not ambiguous), submodels and their submodel elements are modelled, individual types. Enums to encode restricted properties. Prevent illegal states where possible, both, with respect to the meta model specification, as well as, to the submodel template specification: At compile time via signatures: creation methods enforce mandatory arguments, preventing incomplete submodel elements. At runtime time via fail-fast principle: constraints enforce correct types and qualifiers, e.g., the number of elements in lists. At runtime in conversion: meta models are validated in conversion. Validation errors cause the conversion to fail early. Hide metadata from the user: any SMT metadata, such as SemanticIds, IdShorts, ValueTypes, ... is handled internally. Users don't have to worry about them.","title":"Design Principles and Concepts"},{"location":"typed-aas-metamodels-overview/#working-with-shells-and-packages","text":"","title":"Working with Shells and Packages"},{"location":"typed-aas-metamodels-overview/#shell-abstractions","text":"The twinsphere.TypedAasMetamodels library provides all means for the creation, processing, and modification of AAS shells. Depending on your use case, you can either create a new shell, either by constructor call, or using the provided builder pattern: using twinsphere.TypedAasMetamodels.Types.Shell; using twinsphere.TypedAasMetamodels.Types.Shell.Builder; // via constructor var shell = new AssetAdministrationShell(\"9A8F8B66-5AA7-4528-AA17-1CC128AF64C2\", new AssetInformation( Core.AssetKind.Instance, globalAssetId: \"urn:conplement:aas:type:7689239_f0b4f6ff-6951-4614-b733-6da43db7af9a\", defaultThumbnail: new PackageFile(\"/some/local/path/conplement-product-thumbnail.png\", \"image/png\") ), description: new MultiLanguageString([{\"en-EN\", \"description\"}, {\"de-DE\", \"Beschreibung\"}])); // equivalent, via builder var shell = new AssetAdministrationShellBuilder(\"9A8F8B66-5AA7-4528-AA17-1CC128AF64C2\", new AssetInformation( Core.AssetKind.Instance, globalAssetId: \"urn:conplement:aas:type:7689239_f0b4f6ff-6951-4614-b733-6da43db7af9a\", defaultThumbnail: new PackageFile(\"/some/local/path/conplement-product-thumbnail.png\", \"image/png\") )) .WithDescription(new MultiLanguageString([{\"en-EN\", \"description\"}, {\"de-DE\", \"Beschreibung\"}])) .Build(); Additionally, there is also the ability to load from and convert to shells of the AasCore types: using AasCore.Aas3_0; using twinsphere.TypedAasMetamodels.Types.Shell; Aas3_0.IShell metamodelShell; // load, e.g. from a repository // convert to the TypedAasMetamodels representation AssetAdministrationShell shell; try { shell = AssetAdministrationShell.FromMetamodel(metamodelShell); } catch (ValidationException exception) { Console.Error($\"Could not load erroneous shell: {exception}\"); } // modify the shell // convert it back try { metamodelShell = shell.ToMetamodel(); } catch (ValidationException exception) { Console.Error($\"Could not convert to metamodel: {exception}\"); } Note : In general the shell abstractions act as a thin layer around the types of the types of AasCore. They primarily extend them with convenience methods and stricter correctness checks to prevent user errors as early as possible.","title":"Shell Abstractions"},{"location":"typed-aas-metamodels-overview/#packaging","text":"Creating .aasx packages from scratch typically is complex and involves a number of tedious steps: Create submodels Create shells Reference the submodels in the shell Collect any used concept descriptions and reference them in the shell Collect files for packaging Collect the thumbnail file of the shell While you can do these steps manually, for most cases it should suffice to use the AasxPackageBuilder , that automatically takes care of the above steps: using twinsphere.TypedAasMetamodels.Types.Submodels.DigitalNameplate.V2_0; using twinsphere.TypedAasMetamodels.Types.Shell; using twinsphere.TypedAasMetamodels.Types.Shell.Builder; using twinsphere.TypedAasMetamodels.Packaging; // 1. create the shell AssetAdministrationShell shell; // 2. create some submodels DigitalNameplate nameplate; // 3.1. include an external file reference nameplate.CompanyLogo = new FileReference(\"https://some.tld/some/image.png\"); // 3.2. alternatively, include a reference to a local file nameplate.CompanyLogo = new PackageFileReference(\"/home/user/some/image.png\"); // 4. we can now create an.aasx package out of all of this // Note: packagingInfo will wrap all information necessary for packaging, i.e., submodels, // referenced concept descriptions, and files to include into the paths, if available. var packagingInfo = PackagePreprocessor.ProcessShell(shell, [digitalNameplate]); var aasxPackage = new AasxPackageBuilder(packagingInfo).Build(); Note : Take care to use the PackageFileReference type if you want to include local files into your package. This type wraps a reference to a file on disk. In the packaging step PackageFileReference elements will be included into the package and their links will resolved accordingly. See Submodel Elements for more details on the built-in types of the library.","title":"Packaging"},{"location":"typed-aas-metamodels-overview/#working-with-submodels","text":"","title":"Working with Submodels"},{"location":"typed-aas-metamodels-overview/#supported-submodels","text":"We are constantly working on the support of additional submodels. At the time of writing, twinsphere.TypedAasMetamodels provides support for the following submodels: IDTA 02023 Carbon Footprint 0.9 IDTA 02002-1-0 Submodel for Contact Information 1.0 IDTA 02006-2-0 Digital Nameplate for industrial equipment 2.0 IDTA 02004-1-2 Handover Documentation 1.2 IDTA 02011-1-1 Hierarchical Structures enabling Bills of Material 1.1 IDTA 02003-1-2 Generic Frame for Technical Data for Industrial Equipment in Manufacturing 1.2","title":"Supported Submodels"},{"location":"typed-aas-metamodels-overview/#types-of-the-meta-model","text":"In twinsphere.TypedAasMetamodels we aim to provide an easy to use API for the work with submodels. To this end we use the primitives of the C# language to represent the parts of submodels.","title":"Types of the Meta Model"},{"location":"typed-aas-metamodels-overview/#submodels-and-submodel-element-collections","text":"Submodels and Submodel Element Collections represent structure types in the language specification. In general, these types are realized as classes and records.","title":"Submodels and Submodel Element Collections"},{"location":"typed-aas-metamodels-overview/#submodel-elements","text":"At the moment, we provide support for the following set of submodel elements. For each of these types we provide type that performs additional correctness checks at creation, and, potentially, provides additional helper methods. ReferenceElement : representation of a ReferenceElement. Files : the library provides two abstractions to represent files FileReference : generic representation of a file that may reference files anywhere, including external URLs. PackageFileReference : special file representation. Use this, if you want to create a package for which a file should be included. MultiLanguageString : Multi Language Property.","title":"Submodel Elements"},{"location":"typed-aas-metamodels-overview/#properties-and-lists","text":"For both, properties, and lists, are realized using the suitable C# primitives.","title":"Properties and Lists"},{"location":"typed-aas-metamodels-overview/#builders","text":"twinsphere.TypedAasMetamodels employs the builder pattern \u29c9 for most of the composed types. These builders allow the step-wise collection of properties necessary for the creation of an object. To create an object with a builder, the workflow thereby is as follows: construction of the builder with mandatory arguments set or add attributes via Add* (for list elements) or With* for single attributes. finally, construct the actual type via a call to Build() . The builders follow the approach described in design principles : they apply constraints in their constructors, setters, and in the build method, to ensure validity and consistency of input data. As shown with the DigitalNameplateBuilder you can use method chaining to fill in properties: // 1. construction of the Builder with its necessary attributes var digitalNameplateBuilder = new DigitalNameplateBuilder( \"nameplate-C4022\", \"https://conplement.de/test\", \"conplement AG\".ToMultiLanguageString(), \"internal-product\".ToMultiLanguageString(), new ContactInformation( \"DE\".ToMultiLanguageString(), \"N\u00fcrnberg\".ToMultiLanguageString(), \"S\u00fcdwestpark 92G\".ToMultiLanguageString(), \"90449\".ToMultiLanguageString() ), \"2025\"); // 2. providing some additional attributes digitalNameplateBuilder .WithHardwareVersion(\"en\", \"1.0.0\") .WithFirmwareVersion(\"en\", \"0.1.0\") .WithSoftwareVersion(\"en\", \"0.2.3\"); // 3. finally construct the digital nameplate var digitalNameplate = digitalNameplateBuilder.Build(); important : As complex objects are passed into the builder by reference, it is not safe to reuse a builder for the creation of multiple objects.","title":"Builders"},{"location":"typed-aas-metamodels-overview/#validation","text":"There are extensive validation mechanisms in twinsphere.TypedAasMetamodels to check whether submodel instances are valid with respect to their submodel templates. Besides model specific checks, twinsphere.TypedAasMetamodels provides validations for: missing mandatory submodel elements unknown submodel elements unset (mandatory) attributes in submodel elements correct cardinality of submodel elements valid type representation of properties Note : The page on validations contains an exhaustive list of the respective validations with descriptions. Each submodel type exposes a validator class that can be used to validate instances of the submodel. These validators return enumerators with the found validation errors: using AasCore.Aas3_0; using twinsphere.TypedAasMetamodels.Types.Submodels.DigitalNameplate.V2_0; using twinsphere.TypedAasMetamodels.Types.Submodels.DigitalNameplate.V2_0.Validation; Aas3_0.ISubmodel digitalNameplateMetamodel; // ... load a Digital Nameplate from some source, e.g., from a repository. var errors = DigitalNameplateValidator.Validate(digitalNameplateMetamodel); if (errors.Count() == 0) { Console.WriteLine(\"\u2728 Correct Digital Nameplate.\") } else { Console.WriteError(\"\ud83d\udc1b Broken Digital Nameplate:\") foreach (var error in errors) { Console.WriteError(error.Reason); } } Note : These validations are to be understood as an extension of the terrific validations provided by the aas_core_works team. Whereas the validations in the AasCore SDK addresses the correctness of shells and submodels on > a syntactical level, the validations in twinsphere.TypedMetaModels are instead concerned with the correctness of submodels in respect to their respective submodel templates, i.e., whether submodels fulfill the requirements given by their submodel templates. Thus, the validation is limited to submodel instances.","title":"Validation"},{"location":"typed-aas-metamodels-overview/#conversion","text":"The twinsphere.TypedAasMetamodels library provides the means to convert between ( valid ) models in the generic meta model representation and the typed submodel, and vice versa. To this end, submodels implement FromMetamodel() and ToMetamodel() : using AasCore.Aas3_0; using twinsphere.TypedAasMetamodels.Types.Submodels.DigitalNameplate.V2_0; Aas3_0.ISubmodel digitalNameplateMetamodel; // ... load a Digital Nameplate from some source, e.g., from a repository. // 1. convert to its typed representation DigitalNameplate digitalNameplate; try { digitalNameplate = DigitalNameplate.FromMetamodel(digitalNameplateMetamodel); } catch (SubmodelConversionException conversionException) { Console.Error($\"Failed to convert from erroneous submodel: {conversionException}\"); } // 2. perform operations on the Digital Nameplate digitalNameplate.SoftwareVersion = \"1.0.0\".ToMultiLanguageString(\"en\"); // ... // 3. convert the DigitalNameplate back digitalNameplateMetamodel = digitalNameplate.ToMetamodel(); try { digitalNameplateMetamodel = digitalNameplate.ToMetamodel(); } catch (SubmodelConversionException conversionException) { Console.Error($\"Failed to convert to metamodel: {conversionException}\"); } Note : FromMetamodel() will use the validation mechanism to check whether the submodel is a valid instance of its SMT. If it is not, it will throw a SubmodelConversionException with the encountered errors.","title":"Conversion"},{"location":"typed-aas-metamodels-overview/#additional-features","text":"Besides the dedicated submodel support mechanisms, twinsphere.TypedAasMetamodels provides some further general-purpose utilities to simplify the work with submodels.","title":"Additional Features"},{"location":"typed-aas-metamodels-overview/#value-only-semantics","text":"Besides the heavy meta model specification, the IDTA, furthermore, provides a specification for the so-called \"Value-only Semantics\". The Value-only Semantics describes a stripped down representation for meta models. The twinsphere.TypedAasMetamodels library allows to convert arbitrary submodels, i.e., also for submodels not listed in the supported submodels to the value-only representation. using AasCore.Aas3_0; using twinsphere.TypedAasMetamodels.Conversion.ValueOnly; Aas3_0.ISubmodel digitalNameplateMetamodel; // ... load a Digital Nameplate from some source, e.g., from a repository. var jsonString = ValueOnlySerializer.ToValueOnly(digitalNameplateMetamodel);","title":"Value-only Semantics"},{"location":"typed-aas-metamodels-overview/#caveats-and-notes-on-usage","text":"","title":"Caveats and Notes on Usage"},{"location":"typed-aas-metamodels-overview/#deviations-from-smt-specifications","text":"In some cases the library deviates from the properties as described in the officially released SMTs. These changes are typically editorial in nature to fix issues in the SMTs. We adopt editorial changes if we can easily identify what the SMT should look like if it was correct, even if these changes are not part of the official SMT specifications (yet). We chose this strategy to provide users with the ability to create valid submodels as early as possible. You can find a detailed list of these changes in the overview of the supported submodels .","title":"Deviations From SMT Specifications"},{"location":"typed-aas-metamodels-overview/#known-issues-and-workarounds","text":"","title":"Known Issues and Workarounds"},{"location":"typed-aas-metamodels-overview/#using-the-proper-locale","text":"twinsphere.TypedAasMetamodels internally uses features of System.Globalization , please ensure that your execution environment provides support for this library, otherwise, twinsphere.TypedAasMetamodels may not function correctly! The dotnet apline images, for example, are known to cause issues with default settings and require additional care. See the dotnet notes on globalization support \u29c9 for detailed information.","title":"Using the proper locale"},{"location":"typed-aas-metamodels-release_notes/","text":"Release Notes of twinsphere.TypedAasMetamodels Versioning The twinsphere.TypedAasMetamodels library follows semantic versioning \u29c9 in the form major.minor.patch.","title":"Release Notes"},{"location":"typed-aas-metamodels-release_notes/#release-notes-of-twinspheretypedaasmetamodels","text":"","title":"Release Notes of twinsphere.TypedAasMetamodels"},{"location":"typed-aas-metamodels-release_notes/#versioning","text":"The twinsphere.TypedAasMetamodels library follows semantic versioning \u29c9 in the form major.minor.patch.","title":"Versioning"},{"location":"typed-aas-metamodels-submodels/","text":"Supported Submodels The following lists the submodels supported by twinsphere.TypedAasMetamodels. Carbon Footprint Version 0.9 --- Supported Submodel Template Name Carbon Footprint IDTA Number 02023 Version 0.9 Github https://github.com/admin-shell-io/submodel-templates/tree/main/published/Carbon%20Footprint/0/9 \u29c9 Deviations from SMTs Add AdministrativeInformation with version and revision. Contact Information Version 1.0 --- Supported Submodel Template Name Submodel for Contact Information IDTA Number 02002 Version 1.0 Github https://github.com/admin-shell-io/submodel-templates/tree/main/published/Contact%20Information/1 \u29c9 Note : Please pay attention to singular and plural versions - ContactInformation vs. ContactInformations. Deviations from SMTs Add AdministrativeInformation with version and revision. Digital Nameplate for industrial equipment Version 2.0 --- Supported Submodel Template Name Digital Nameplate for Industrial Equipment IDTA Number 02006 Version 2.0 Github https://github.com/admin-shell-io/submodel-templates/tree/main/published/Digital%20nameplate/2/0 \u29c9 Supported submodel specific constraints : Nameplate::CountryOfOrigin Country codes defined accord. to DIN EN ISO 3166-1 alpha-2 codes ExplosionSafety::SpecificConditionsForUse X if any, otherwise no entry ExplosionSafety::IncompleteDevice U if any, otherwise no entry ExplosionSafety::IncompleteDevice U if any, otherwise no entry Deviations from SMTs Add AdministrativeInformation with version and revision. Removed invalid whitespaces in IDs and semantic IDs. Fix language type in language strings. Version 3.0 --- Supported Submodel Template Name Digital Nameplate for Industrial Equipment IDTA Number 02006 Version 3.0 Github https://github.com/admin-shell-io/submodel-templates/tree/main/published/Digital%20nameplate/3/0 \u29c9 Note : Contrary to Digital Nameplate 2.0 , this submodels id short officially is Nameplate . We follow this naming strategy and it is reflected in the library, i.e., the Digital Nameplate 3.0 can be found in the namespace twinsphere.TypedAasMetamodels.Types.Submodels.Nameplate.V3_0 . Supported submodel specific constraints : Nameplate::CountryOfOrigin Country codes defined accord. to DIN EN ISO 3166-1 alpha-2 codes Generic Frame for Technical Data for Industrial Equipment in Manufacturing Version 1.2 --- Supported Submodel Template Name Generic Frame for Technical Data for Industrial Equipment in Manufacturing IDTA Number 02003 Version 1.2 Github https://github.com/admin-shell-io/submodel-templates/tree/main/published/Technical_Data/1/2 \u29c9 Supported submodel specific constraints : TechnicalProperties::MainSection Each Main Section SMC may contain arbitrary sets of SubmodelElements, SemanticIdNotAvailable, SubSection. TechnicalProperties::SubSection Each Sub Section SMC may contain arbitrary sets of SubmodelElements, SemanticIdNotAvailable, SubSection. TechnicalProperties::SubSection In the hierarchy of SubmodelElements, a MainSection shall be super-ordinate to the SubSection. Version 2.0 --- Supported Submodel Template Name Generic Frame for Technical Data for Industrial Equipment in Manufacturing IDTA Number 02003 Version 2.0 Github https://github.com/admin-shell-io/submodel-templates/tree/main/published/Technical_Data/2/0 \u29c9 Note : This SMT makes heavy use of arbitrary elements for modeling the TechnicalDataAreas and SpecificDescriptions . In both cases, users may use SubmodelElementCollections (SMCs) as structuring elements, e.g., to provide additional nesting in UIs. To this end, this SMT defines two different types of SMCs: Section and ArbitrarySMC , both are considered to act as arbitrary properties, i.e., properties for which the user may choose an id short, as well as, semantic ids. At the moment, however, there is no way to tell a Section element from any other SMC element in their respective context. In the library we therefore do have a Section element for the creation of the submodel. However, it is currently impossible to load an instance of this submodel from metamodel and to retrieve Section elements. Furthermore, there currently are some additional modeling issues with this SMT: the SMT describes the ProductClassifications , TechnicalPropertyAreas , and SpecialDescriptions by qualifiers as lists of lists. This likely is a modeling error. As of now we interpret this as an error and interpret these individual elements as singular elements. Deviations from SMTs Removed invalid whitespaces in IDs and semantic IDs. Fix language type in language strings. Handover Documentation Version 1.2 --- Supported Submodel Template Name Handover Documentation IDTA Number 02004 Version 1.2 Github https://github.com/admin-shell-io/submodel-templates/tree/main/published/Handover%20Documentation/1/2 \u29c9 Supported submodel specific constraints : Document::DocumentClassification At least one classification according to VDI 2770 shall be provided. DocumentId::IsPrimary Only one DocumentId in a collection may be marked as primary. DocumentClassification::ClassId If ClassificationSystem is set to \u201cVDI2770 Blatt 1:2020\u201d, the given IDs of VDI2770 Blatt 1:2020 shall be used DocumentClassification::ClassName If ClassificationSystem is set to \u201cVDI2770 Blatt 1:2020\u201d, the given IDs of VDI2770 Blatt 1:2020 shall be used DocumentVersion::Title For each language-dependent Title, a Summary and at least one KeyWord shall exist for the given language. DocumentVersion::Summary For each language-dependent Title, a Summary and at least one KeyWord shall exist for the given language. DocumentVersion::KeyWords For each language-dependent Title, a Summary and at least one KeyWord shall exist for the given language. DocumentVersion::DigitalFile The MIME-Type needs to match the file type. At least one PDF/A file type shall be provided. DocumentVersion::PreviewFile The MIME-Type needs to match the file type. Allowed file types are JPG, PNG, BMP. Not yet supported submodel specific constraints : Document::DocumentedEntity Reference targets an Entity within the Submodel \u201cManufacturerDocumentation\u201d. This constraint is not ensured currently due to uncertainty in \"ManufacturerDocumentation\" DocumentClassification::ClassName Languages shall match at least the language specifications of the included DocumentVersions. This is currently not supported as only english is used DocumentVersion::RefersTo Reference targets a SMC \u201cDocument\u201d or a \u201cDocumentVersion\u201d. This is currently not ensured as the SDK accepts all references DocumentVersion::BasedOn Reference targets a SMC \u201cDocument\u201d or a \u201cDocumentVersion\u201d. This is currently not ensured as the SDK accepts all references DocumentVersion::TranslationOf Reference targets a SMC \u201cDocument\u201d or a \u201cDocumentVersion\u201d. This is currently not ensured as the SDK accepts all references The [language-independent] content must be identical in both Documents or DocumentVersions. This cannot be checked as there is no way to check the language of the document content from the library. Version 2.0 --- Supported Submodel Template Name Handover Documentation IDTA Number 02004 Version 2.0 Github https://github.com/admin-shell-io/submodel-templates/tree/main/published/Handover%20Documentation/2/0 \u29c9 Note : The current state of the Handover Documentation 2.0 specification implicitly lifts many of the constraints defined for version 1.2. This omission from the spec is likely due to an error, rather than intentionally. However, until the spec is fixed or an official statement has been made, we chose to follow the spec by also omitting these checks from the SDK. Supported submodel specific constraints : Document::DocumentClassification The classification according to VDI 2770 Blatt 1:2020 is mandatory in the Submodel Handover Documentation. DocumentId::DocumentIsPrimary One ID in this collection should be used as a preferred ID. Deviations from SMTs Fix language type in language strings. Hierarchical Structures enabling Bills of Material Version 1.1 --- Supported Submodel Template Name Hierarchical Structures enabling Bills of Material IDTA Number 02011 Version 1.2 Github https://github.com/admin-shell-io/submodel-templates/tree/main/published/Hierarchical%20Structures%20enabling%20Bills%20of%20Material/1/1 \u29c9 Deviations from SMTs Add AdministrativeInformation with version and revision.","title":"Supported Submodels"},{"location":"typed-aas-metamodels-submodels/#supported-submodels","text":"The following lists the submodels supported by twinsphere.TypedAasMetamodels.","title":"Supported Submodels"},{"location":"typed-aas-metamodels-submodels/#carbon-footprint","text":"","title":"Carbon Footprint"},{"location":"typed-aas-metamodels-submodels/#version-09","text":"--- Supported Submodel Template Name Carbon Footprint IDTA Number 02023 Version 0.9 Github https://github.com/admin-shell-io/submodel-templates/tree/main/published/Carbon%20Footprint/0/9 \u29c9","title":"Version 0.9"},{"location":"typed-aas-metamodels-submodels/#deviations-from-smts","text":"Add AdministrativeInformation with version and revision.","title":"Deviations from SMTs"},{"location":"typed-aas-metamodels-submodels/#contact-information","text":"","title":"Contact Information"},{"location":"typed-aas-metamodels-submodels/#version-10","text":"--- Supported Submodel Template Name Submodel for Contact Information IDTA Number 02002 Version 1.0 Github https://github.com/admin-shell-io/submodel-templates/tree/main/published/Contact%20Information/1 \u29c9 Note : Please pay attention to singular and plural versions - ContactInformation vs. ContactInformations.","title":"Version 1.0"},{"location":"typed-aas-metamodels-submodels/#deviations-from-smts_1","text":"Add AdministrativeInformation with version and revision.","title":"Deviations from SMTs"},{"location":"typed-aas-metamodels-submodels/#digital-nameplate-for-industrial-equipment","text":"","title":"Digital Nameplate for industrial equipment"},{"location":"typed-aas-metamodels-submodels/#version-20","text":"--- Supported Submodel Template Name Digital Nameplate for Industrial Equipment IDTA Number 02006 Version 2.0 Github https://github.com/admin-shell-io/submodel-templates/tree/main/published/Digital%20nameplate/2/0 \u29c9 Supported submodel specific constraints : Nameplate::CountryOfOrigin Country codes defined accord. to DIN EN ISO 3166-1 alpha-2 codes ExplosionSafety::SpecificConditionsForUse X if any, otherwise no entry ExplosionSafety::IncompleteDevice U if any, otherwise no entry ExplosionSafety::IncompleteDevice U if any, otherwise no entry","title":"Version 2.0"},{"location":"typed-aas-metamodels-submodels/#deviations-from-smts_2","text":"Add AdministrativeInformation with version and revision. Removed invalid whitespaces in IDs and semantic IDs. Fix language type in language strings.","title":"Deviations from SMTs"},{"location":"typed-aas-metamodels-submodels/#version-30","text":"--- Supported Submodel Template Name Digital Nameplate for Industrial Equipment IDTA Number 02006 Version 3.0 Github https://github.com/admin-shell-io/submodel-templates/tree/main/published/Digital%20nameplate/3/0 \u29c9 Note : Contrary to Digital Nameplate 2.0 , this submodels id short officially is Nameplate . We follow this naming strategy and it is reflected in the library, i.e., the Digital Nameplate 3.0 can be found in the namespace twinsphere.TypedAasMetamodels.Types.Submodels.Nameplate.V3_0 . Supported submodel specific constraints : Nameplate::CountryOfOrigin Country codes defined accord. to DIN EN ISO 3166-1 alpha-2 codes","title":"Version 3.0"},{"location":"typed-aas-metamodels-submodels/#generic-frame-for-technical-data-for-industrial-equipment-in-manufacturing","text":"","title":"Generic Frame for Technical Data for Industrial Equipment in Manufacturing"},{"location":"typed-aas-metamodels-submodels/#version-12","text":"--- Supported Submodel Template Name Generic Frame for Technical Data for Industrial Equipment in Manufacturing IDTA Number 02003 Version 1.2 Github https://github.com/admin-shell-io/submodel-templates/tree/main/published/Technical_Data/1/2 \u29c9 Supported submodel specific constraints : TechnicalProperties::MainSection Each Main Section SMC may contain arbitrary sets of SubmodelElements, SemanticIdNotAvailable, SubSection. TechnicalProperties::SubSection Each Sub Section SMC may contain arbitrary sets of SubmodelElements, SemanticIdNotAvailable, SubSection. TechnicalProperties::SubSection In the hierarchy of SubmodelElements, a MainSection shall be super-ordinate to the SubSection.","title":"Version 1.2"},{"location":"typed-aas-metamodels-submodels/#version-20_1","text":"--- Supported Submodel Template Name Generic Frame for Technical Data for Industrial Equipment in Manufacturing IDTA Number 02003 Version 2.0 Github https://github.com/admin-shell-io/submodel-templates/tree/main/published/Technical_Data/2/0 \u29c9 Note : This SMT makes heavy use of arbitrary elements for modeling the TechnicalDataAreas and SpecificDescriptions . In both cases, users may use SubmodelElementCollections (SMCs) as structuring elements, e.g., to provide additional nesting in UIs. To this end, this SMT defines two different types of SMCs: Section and ArbitrarySMC , both are considered to act as arbitrary properties, i.e., properties for which the user may choose an id short, as well as, semantic ids. At the moment, however, there is no way to tell a Section element from any other SMC element in their respective context. In the library we therefore do have a Section element for the creation of the submodel. However, it is currently impossible to load an instance of this submodel from metamodel and to retrieve Section elements. Furthermore, there currently are some additional modeling issues with this SMT: the SMT describes the ProductClassifications , TechnicalPropertyAreas , and SpecialDescriptions by qualifiers as lists of lists. This likely is a modeling error. As of now we interpret this as an error and interpret these individual elements as singular elements.","title":"Version 2.0"},{"location":"typed-aas-metamodels-submodels/#deviations-from-smts_3","text":"Removed invalid whitespaces in IDs and semantic IDs. Fix language type in language strings.","title":"Deviations from SMTs"},{"location":"typed-aas-metamodels-submodels/#handover-documentation","text":"","title":"Handover Documentation"},{"location":"typed-aas-metamodels-submodels/#version-12_1","text":"--- Supported Submodel Template Name Handover Documentation IDTA Number 02004 Version 1.2 Github https://github.com/admin-shell-io/submodel-templates/tree/main/published/Handover%20Documentation/1/2 \u29c9 Supported submodel specific constraints : Document::DocumentClassification At least one classification according to VDI 2770 shall be provided. DocumentId::IsPrimary Only one DocumentId in a collection may be marked as primary. DocumentClassification::ClassId If ClassificationSystem is set to \u201cVDI2770 Blatt 1:2020\u201d, the given IDs of VDI2770 Blatt 1:2020 shall be used DocumentClassification::ClassName If ClassificationSystem is set to \u201cVDI2770 Blatt 1:2020\u201d, the given IDs of VDI2770 Blatt 1:2020 shall be used DocumentVersion::Title For each language-dependent Title, a Summary and at least one KeyWord shall exist for the given language. DocumentVersion::Summary For each language-dependent Title, a Summary and at least one KeyWord shall exist for the given language. DocumentVersion::KeyWords For each language-dependent Title, a Summary and at least one KeyWord shall exist for the given language. DocumentVersion::DigitalFile The MIME-Type needs to match the file type. At least one PDF/A file type shall be provided. DocumentVersion::PreviewFile The MIME-Type needs to match the file type. Allowed file types are JPG, PNG, BMP. Not yet supported submodel specific constraints : Document::DocumentedEntity Reference targets an Entity within the Submodel \u201cManufacturerDocumentation\u201d. This constraint is not ensured currently due to uncertainty in \"ManufacturerDocumentation\" DocumentClassification::ClassName Languages shall match at least the language specifications of the included DocumentVersions. This is currently not supported as only english is used DocumentVersion::RefersTo Reference targets a SMC \u201cDocument\u201d or a \u201cDocumentVersion\u201d. This is currently not ensured as the SDK accepts all references DocumentVersion::BasedOn Reference targets a SMC \u201cDocument\u201d or a \u201cDocumentVersion\u201d. This is currently not ensured as the SDK accepts all references DocumentVersion::TranslationOf Reference targets a SMC \u201cDocument\u201d or a \u201cDocumentVersion\u201d. This is currently not ensured as the SDK accepts all references The [language-independent] content must be identical in both Documents or DocumentVersions. This cannot be checked as there is no way to check the language of the document content from the library.","title":"Version 1.2"},{"location":"typed-aas-metamodels-submodels/#version-20_2","text":"--- Supported Submodel Template Name Handover Documentation IDTA Number 02004 Version 2.0 Github https://github.com/admin-shell-io/submodel-templates/tree/main/published/Handover%20Documentation/2/0 \u29c9 Note : The current state of the Handover Documentation 2.0 specification implicitly lifts many of the constraints defined for version 1.2. This omission from the spec is likely due to an error, rather than intentionally. However, until the spec is fixed or an official statement has been made, we chose to follow the spec by also omitting these checks from the SDK. Supported submodel specific constraints : Document::DocumentClassification The classification according to VDI 2770 Blatt 1:2020 is mandatory in the Submodel Handover Documentation. DocumentId::DocumentIsPrimary One ID in this collection should be used as a preferred ID.","title":"Version 2.0"},{"location":"typed-aas-metamodels-submodels/#deviations-from-smts_4","text":"Fix language type in language strings.","title":"Deviations from SMTs"},{"location":"typed-aas-metamodels-submodels/#hierarchical-structures-enabling-bills-of-material","text":"","title":"Hierarchical Structures enabling Bills of Material"},{"location":"typed-aas-metamodels-submodels/#version-11","text":"--- Supported Submodel Template Name Hierarchical Structures enabling Bills of Material IDTA Number 02011 Version 1.2 Github https://github.com/admin-shell-io/submodel-templates/tree/main/published/Hierarchical%20Structures%20enabling%20Bills%20of%20Material/1/1 \u29c9","title":"Version 1.1"},{"location":"typed-aas-metamodels-submodels/#deviations-from-smts_5","text":"Add AdministrativeInformation with version and revision.","title":"Deviations from SMTs"},{"location":"typed-aas-metamodels-validation/","text":"Validation Rules in twinsphere.TypedAasMetamodels Overview The following will lay out the validations that are implemented in twinsphere.TypedAasMetamodels. It consists of two parts: in the first part general structural rules are discussed. The second part describes validations that are specific for individual submodel types. Example Validations are described in this document in the form of rules. Each rule entry consists of the same parts: a unique rule name a description of the respective rule General Rules Name not set for property. Can't convert object models without valid id short The id short of a submodel element is not set, although it is not an element of a submodel element list. Each submodel element in the submodel (except for submodel element list elements) is expected to have an id short to facilitate correct interpretation. Submodel element has elements with duplicate id shorts There are multiple submodel elements in the same namespace that have the same id short. As per AASd-022 \u29c9 , id shorts of non-identifiables must be unique within their respective namespace. Submodel element has wrong type, expected XYZ The type of submodel element differs from that, that the submodel template describes. Submodel element has unset value Submodel elements in submodel instances are expected to carry a non-empty value. Optional unset submodel elements should be signified by elision from the submodel. Note : For a submodel element to be optional, it must have a SMT/Cardinality qualifier like ZeroToOne or ZeroToMany . File has unset ContentType File elements in submodel instances are expected to carry a non-empty ContentType. Optional unset file elements should be signified by elision from the submodel. Note : For a submodel element to be optional, it must have a SMT/Cardinality qualifier like ZeroToOne or ZeroToMany . MimeType of a File must be correct The content type specified in a file element does not match to the content type derived by referenced file's extension. File specified ContentType does not match that of file reference The content type specified in a file element does not match to the content type derived by referenced file's extension. Property has wrong value type, expected XYZ The value type of a property element does not match the value type described in the submodel template. If the submodel template demands a specific value type, instances of the property must adhere to said value type. Property Value is invalid. Cannot be interpreted as XYZ The value of a property element cannot correctly be interpreted as a value of the value type specified in the property. Property value is not supported by constraints The value of a property element does not adhere to constraints as given by qualifiers or the submodel template specification. This, for example, is the case if the property acts as a sort of enumeration with a limited set of valid values. Unknown property for instance of XYZ The submodel template does not specify a property with the id short of this submodel element. Missing mandatory property for instance of XYZ The submodel instance lacks a submodel element that the submodel template specifies with the qualifier SMT/Cardinality of One . Missing list elements for XYZ for instance of XYZ The number of elements in submodel element list in the submodel instance does not match the minimum number of elements as specified in the SMT/Cardinality qualifier for the list in the submodel template. Id must be set and non-empty The id of a submodel is unset. Submodel Specific Rules Submodel specific rules are rules and restrictions that are specific to individual submodel templates. IDTA 02023 Carbon Footprint 0.9 Value is not a valid PCFCalculationMethod The value of the property PCFCalculationMethod is not one of the valid PCF calculation methods. The value must be one of the following: EN 15804 GHG Protocol IEC TS 63058 ISO 14040 ISO 14044 ISO 14067 IEC 63366 PEP Ecopassport TcfReferenceValueForCalculation must be valid The value of the property TCFReferenceValueForCalculation is not one of the valid PCF calculation methods. The value must be one of the following: g kg t ml l cbm qm piece ProcessesForGreenhouseGasEmissionInATransportServices must be valid The value of the property TCFReferenceValueForCalculation is not one of the valid PCF calculation methods. The value must be one of the following: WTT - Well-to-Tank TTW - Tank-to-Wheel WTW - Well-to-Wheel IDTA 02002-1-0 Submodel for Contact Information 1.0 There are no submodel specific rules for contact information 1.0. IDTA 02006-2-0 Digital Nameplate for industrial equipment 2.0 CountryOfOrigin needs to be a valid country code The value of CountryOfOrigin is not a valid DIN EN ISO 3166-1 alpha-2 code. The value must be a country code according to DIN EN ISO 3166-1 alpha-2 codes. SpecificConditionsForUse must be X if set The value of SpecificConditionsForUse is not \"X\". If SpecificConditionsForUse is set, its value must be \"X\". IncompleteDevice must be U if set The value of IncompleteDevice is not \"U\". If IncompleteDevice is set, its value must be \"U\". IDTA 02004-1-2 Handover Documentation 1.2 Preview File must match the correct MIME-Type. Allowed file types are JPG, PNG, BMP The MIME-type of the preview file is not that of a JPG, PNG, or BMP file. The preview file only allows JPG, PNG, or BMP MIME-types. Digital files must contain at least one PDF Digital files does not contain at least one file that is a PDF/A file. At least one PDF/A file type shall be provided. Constraint: for each language-dependent Title, Summary and at least one KeyWord shall exist for the given language There is a title or summary for which there is no keyword in the same language. For each language-dependent keyword, a title and summary shall exist for the given language. Invalid classification ID type The ClassId type is not one of the valid classification id types. Invalid DocumentClassification: unsupported classification The Classification System type is not one of the valid classification system types. Only one primary DocumentId is allowed There is more than one document id that set as primary. Only one document id may be the primary document id. IDTA 02011-1-1 Hierarchical Structures enabling Bills of Material 1.1 There are no submodel specific rules for Hierarchical Structures enabling Bills of Material 1.1. IDTA 02003-1-2 Generic Frame for Technical Data for Industrial Equipment in Manufacturing 1.2 Semantic Id not set for property. Properties are expected to carry a valid semantic id There is no semantic id set for a property of TechnicalData, MainSection, or SubSection. Each entry in TechnicalData, MainSection, and SubSection needs a semantic id.","title":"Validation Rules"},{"location":"typed-aas-metamodels-validation/#validation-rules-in-twinspheretypedaasmetamodels","text":"","title":"Validation Rules in twinsphere.TypedAasMetamodels"},{"location":"typed-aas-metamodels-validation/#overview","text":"The following will lay out the validations that are implemented in twinsphere.TypedAasMetamodels. It consists of two parts: in the first part general structural rules are discussed. The second part describes validations that are specific for individual submodel types.","title":"Overview"},{"location":"typed-aas-metamodels-validation/#example","text":"Validations are described in this document in the form of rules. Each rule entry consists of the same parts: a unique rule name a description of the respective rule","title":"Example"},{"location":"typed-aas-metamodels-validation/#general-rules","text":"","title":"General Rules"},{"location":"typed-aas-metamodels-validation/#name-not-set-for-property-cant-convert-object-models-without-valid-id-short","text":"The id short of a submodel element is not set, although it is not an element of a submodel element list. Each submodel element in the submodel (except for submodel element list elements) is expected to have an id short to facilitate correct interpretation.","title":"Name not set for property. Can't convert object models without valid id short"},{"location":"typed-aas-metamodels-validation/#submodel-element-has-elements-with-duplicate-id-shorts","text":"There are multiple submodel elements in the same namespace that have the same id short. As per AASd-022 \u29c9 , id shorts of non-identifiables must be unique within their respective namespace.","title":"Submodel element has elements with duplicate id shorts"},{"location":"typed-aas-metamodels-validation/#submodel-element-has-wrong-type-expected-xyz","text":"The type of submodel element differs from that, that the submodel template describes.","title":"Submodel element has wrong type, expected XYZ"},{"location":"typed-aas-metamodels-validation/#submodel-element-has-unset-value","text":"Submodel elements in submodel instances are expected to carry a non-empty value. Optional unset submodel elements should be signified by elision from the submodel. Note : For a submodel element to be optional, it must have a SMT/Cardinality qualifier like ZeroToOne or ZeroToMany .","title":"Submodel element has unset value"},{"location":"typed-aas-metamodels-validation/#file-has-unset-contenttype","text":"File elements in submodel instances are expected to carry a non-empty ContentType. Optional unset file elements should be signified by elision from the submodel. Note : For a submodel element to be optional, it must have a SMT/Cardinality qualifier like ZeroToOne or ZeroToMany .","title":"File has unset ContentType"},{"location":"typed-aas-metamodels-validation/#mimetype-of-a-file-must-be-correct","text":"The content type specified in a file element does not match to the content type derived by referenced file's extension.","title":"MimeType of a File must be correct"},{"location":"typed-aas-metamodels-validation/#file-specified-contenttype-does-not-match-that-of-file-reference","text":"The content type specified in a file element does not match to the content type derived by referenced file's extension.","title":"File specified ContentType does not match that of file reference"},{"location":"typed-aas-metamodels-validation/#property-has-wrong-value-type-expected-xyz","text":"The value type of a property element does not match the value type described in the submodel template. If the submodel template demands a specific value type, instances of the property must adhere to said value type.","title":"Property has wrong value type, expected XYZ"},{"location":"typed-aas-metamodels-validation/#property-value-is-invalid-cannot-be-interpreted-as-xyz","text":"The value of a property element cannot correctly be interpreted as a value of the value type specified in the property.","title":"Property Value is invalid. Cannot be interpreted as XYZ"},{"location":"typed-aas-metamodels-validation/#property-value-is-not-supported-by-constraints","text":"The value of a property element does not adhere to constraints as given by qualifiers or the submodel template specification. This, for example, is the case if the property acts as a sort of enumeration with a limited set of valid values.","title":"Property value is not supported by constraints"},{"location":"typed-aas-metamodels-validation/#unknown-property-for-instance-of-xyz","text":"The submodel template does not specify a property with the id short of this submodel element.","title":"Unknown property for instance of XYZ"},{"location":"typed-aas-metamodels-validation/#missing-mandatory-property-for-instance-of-xyz","text":"The submodel instance lacks a submodel element that the submodel template specifies with the qualifier SMT/Cardinality of One .","title":"Missing mandatory property for instance of XYZ"},{"location":"typed-aas-metamodels-validation/#missing-list-elements-for-xyz-for-instance-of-xyz","text":"The number of elements in submodel element list in the submodel instance does not match the minimum number of elements as specified in the SMT/Cardinality qualifier for the list in the submodel template.","title":"Missing list elements for XYZ for instance of XYZ"},{"location":"typed-aas-metamodels-validation/#id-must-be-set-and-non-empty","text":"The id of a submodel is unset.","title":"Id must be set and non-empty"},{"location":"typed-aas-metamodels-validation/#submodel-specific-rules","text":"Submodel specific rules are rules and restrictions that are specific to individual submodel templates.","title":"Submodel Specific Rules"},{"location":"typed-aas-metamodels-validation/#idta-02023-carbon-footprint-09","text":"","title":"IDTA 02023 Carbon Footprint 0.9"},{"location":"typed-aas-metamodels-validation/#value-is-not-a-valid-pcfcalculationmethod","text":"The value of the property PCFCalculationMethod is not one of the valid PCF calculation methods. The value must be one of the following: EN 15804 GHG Protocol IEC TS 63058 ISO 14040 ISO 14044 ISO 14067 IEC 63366 PEP Ecopassport","title":"Value is not a valid PCFCalculationMethod"},{"location":"typed-aas-metamodels-validation/#tcfreferencevalueforcalculation-must-be-valid","text":"The value of the property TCFReferenceValueForCalculation is not one of the valid PCF calculation methods. The value must be one of the following: g kg t ml l cbm qm piece","title":"TcfReferenceValueForCalculation must be valid"},{"location":"typed-aas-metamodels-validation/#processesforgreenhousegasemissioninatransportservices-must-be-valid","text":"The value of the property TCFReferenceValueForCalculation is not one of the valid PCF calculation methods. The value must be one of the following: WTT - Well-to-Tank TTW - Tank-to-Wheel WTW - Well-to-Wheel","title":"ProcessesForGreenhouseGasEmissionInATransportServices must be valid"},{"location":"typed-aas-metamodels-validation/#idta-02002-1-0-submodel-for-contact-information-10","text":"There are no submodel specific rules for contact information 1.0.","title":"IDTA 02002-1-0 Submodel for Contact Information 1.0"},{"location":"typed-aas-metamodels-validation/#idta-02006-2-0-digital-nameplate-for-industrial-equipment-20","text":"","title":"IDTA 02006-2-0 Digital Nameplate for industrial equipment 2.0"},{"location":"typed-aas-metamodels-validation/#countryoforigin-needs-to-be-a-valid-country-code","text":"The value of CountryOfOrigin is not a valid DIN EN ISO 3166-1 alpha-2 code. The value must be a country code according to DIN EN ISO 3166-1 alpha-2 codes.","title":"CountryOfOrigin needs to be a valid country code"},{"location":"typed-aas-metamodels-validation/#specificconditionsforuse-must-be-x-if-set","text":"The value of SpecificConditionsForUse is not \"X\". If SpecificConditionsForUse is set, its value must be \"X\".","title":"SpecificConditionsForUse must be X if set"},{"location":"typed-aas-metamodels-validation/#incompletedevice-must-be-u-if-set","text":"The value of IncompleteDevice is not \"U\". If IncompleteDevice is set, its value must be \"U\".","title":"IncompleteDevice must be U if set"},{"location":"typed-aas-metamodels-validation/#idta-02004-1-2-handover-documentation-12","text":"","title":"IDTA 02004-1-2 Handover Documentation 1.2"},{"location":"typed-aas-metamodels-validation/#preview-file-must-match-the-correct-mime-type-allowed-file-types-are-jpg-png-bmp","text":"The MIME-type of the preview file is not that of a JPG, PNG, or BMP file. The preview file only allows JPG, PNG, or BMP MIME-types.","title":"Preview File must match the correct MIME-Type. Allowed file types are JPG, PNG, BMP"},{"location":"typed-aas-metamodels-validation/#digital-files-must-contain-at-least-one-pdf","text":"Digital files does not contain at least one file that is a PDF/A file. At least one PDF/A file type shall be provided.","title":"Digital files must contain at least one PDF"},{"location":"typed-aas-metamodels-validation/#constraint-for-each-language-dependent-title-summary-and-at-least-one-keyword-shall-exist-for-the-given-language","text":"There is a title or summary for which there is no keyword in the same language. For each language-dependent keyword, a title and summary shall exist for the given language.","title":"Constraint: for each language-dependent Title, Summary and at least one KeyWord shall exist for the given language"},{"location":"typed-aas-metamodels-validation/#invalid-classification-id-type","text":"The ClassId type is not one of the valid classification id types.","title":"Invalid classification ID type"},{"location":"typed-aas-metamodels-validation/#invalid-documentclassification-unsupported-classification","text":"The Classification System type is not one of the valid classification system types.","title":"Invalid DocumentClassification: unsupported classification"},{"location":"typed-aas-metamodels-validation/#only-one-primary-documentid-is-allowed","text":"There is more than one document id that set as primary. Only one document id may be the primary document id.","title":"Only one primary DocumentId is allowed"},{"location":"typed-aas-metamodels-validation/#idta-02011-1-1-hierarchical-structures-enabling-bills-of-material-11","text":"There are no submodel specific rules for Hierarchical Structures enabling Bills of Material 1.1.","title":"IDTA 02011-1-1 Hierarchical Structures enabling Bills of Material 1.1"},{"location":"typed-aas-metamodels-validation/#idta-02003-1-2-generic-frame-for-technical-data-for-industrial-equipment-in-manufacturing-12","text":"","title":"IDTA 02003-1-2 Generic Frame for Technical Data for Industrial Equipment in Manufacturing 1.2"},{"location":"typed-aas-metamodels-validation/#semantic-id-not-set-for-property-properties-are-expected-to-carry-a-valid-semantic-id","text":"There is no semantic id set for a property of TechnicalData, MainSection, or SubSection. Each entry in TechnicalData, MainSection, and SubSection needs a semantic id.","title":"Semantic Id not set for property. Properties are expected to carry a valid semantic id"},{"location":"validators-overview/","text":"twinsphere Validator Documentation We currently offer two tools for checking the conformity of AAS artifacts with the specification. twinsphere AAS Validator A CLI tool exclusively available to our customers. twinsphere twinfix A publicly accessible web tool at https://twinfix.twinsphere.io \u29c9 . twinfix analyzes an uploaded AASX package and displays all validation errors found grouped by error class. It offers a help screen for many of the common errors including links to relevant parts of the specification and a recommendation on what to do to address the issue. For some errors it even has the power to apply a fix automatically! More info and documentation coming soon.","title":"Overview"},{"location":"validators-overview/#twinsphere-validator-documentation","text":"We currently offer two tools for checking the conformity of AAS artifacts with the specification.","title":"twinsphere Validator Documentation"},{"location":"validators-overview/#twinsphere-aas-validator","text":"A CLI tool exclusively available to our customers.","title":"twinsphere AAS Validator"},{"location":"validators-overview/#twinsphere-twinfix","text":"A publicly accessible web tool at https://twinfix.twinsphere.io \u29c9 . twinfix analyzes an uploaded AASX package and displays all validation errors found grouped by error class. It offers a help screen for many of the common errors including links to relevant parts of the specification and a recommendation on what to do to address the issue. For some errors it even has the power to apply a fix automatically! More info and documentation coming soon.","title":"twinsphere twinfix"},{"location":"viewer-features/","text":"twinsphere Viewer Features Dedicated Views The viewer is able to display any asset administration shell and any submodels. In addition to a generic representation of submodels there are dedicated views for the following submodels/use cases available: Digital Nameplate Handover Documentation Contact Information Technical Data Product Carbon Footprint Digital Product Passport (shown if digital twin provides both SM DigitalNameplate and SM PCF) Digital Battery Passport (special fair showcase) If available the dedicated view is shown as default. You may switch between dedicated and generic view with a button on top of the submodel popup. Query Parameters It is possible to use direct links in the viewer to open a specific asset or even a submodel of a specific asset. With these direct links and the feature to hide the viewer's navigation elements u may integrate the viewer in your web application for AAS display. Param: id The id parameter contains the shell id of an asset administration shell as base64url encoded string. Example: https://viewer.{your_tenant}.cloud.twinsphere.io/explore?id=aHR0cDovL215LmRvbWFpbi5jb20vYWFzaWQvMTIzNDU2Nzg Param: submodel The submodel parameter contains the submodel id of the submodel to be opened as base64url encoded string. The submodel parameter must be combined with the id parameter (see above) and it has to refer to an existing submodel which is referenced by the chosen (aas) id. There are some special use case views containing data from multiple submodels. To directly open these special views via URL the following table states the respective values for the submodel parameter: Use Case View Parameter Value Digital Product Passport ZHBw Digital Battery Passport YnBw Example 1: https://viewer.{your_tenant}.cloud.twinsphere.io/explore?id=aHR0cDovL215LmRvbWFpbi5jb20vYWFzaWQvMTIzNDU2Nzg&submodel=aHR0cDovL215LmRvbWFpbi5jb20vc21pZC85ODc2NTQ Example 2: https://viewer.{your_tenant}}.cloud.twinsphere.io/explore?id=aHR0cDovL215LmRvbWFpbi5jb20vYWFzaWQvMTIzNDU2Nzg&submodel=YnBw Param: embedded If set to true this parameter enables you to hide the AAS Viewer's header and navigation bar. The embedded parameter has to be combined with the id parameter (see above) and optionally may be combined with the submodel parameter as well. Example: https://viewer.{your_tenant}.cloud.twinsphere.io/explore?id=aHR0cDovL215LmRvbWFpbi5jb20vYWFzaWQvMTIzNDU2Nzg&embedded=true Data Requirements Some AAS Viewer features rely on your data quality in order to work. Property Units To display units of measurement in the AAS Viewer, your repository needs to include concept descriptions that define the semantics of properties within the submodels. These concept descriptions must embedded data specifications of the IEC61360 type (version 3). Within this specification, the unit of measurement must be specified in the \u201cUnit\u201d property in order to be displayed in square brackets behind the attribute name on all dedicated and generic views.","title":"Features"},{"location":"viewer-features/#twinsphere-viewer-features","text":"","title":"twinsphere Viewer Features"},{"location":"viewer-features/#dedicated-views","text":"The viewer is able to display any asset administration shell and any submodels. In addition to a generic representation of submodels there are dedicated views for the following submodels/use cases available: Digital Nameplate Handover Documentation Contact Information Technical Data Product Carbon Footprint Digital Product Passport (shown if digital twin provides both SM DigitalNameplate and SM PCF) Digital Battery Passport (special fair showcase) If available the dedicated view is shown as default. You may switch between dedicated and generic view with a button on top of the submodel popup.","title":"Dedicated Views"},{"location":"viewer-features/#query-parameters","text":"It is possible to use direct links in the viewer to open a specific asset or even a submodel of a specific asset. With these direct links and the feature to hide the viewer's navigation elements u may integrate the viewer in your web application for AAS display.","title":"Query Parameters"},{"location":"viewer-features/#param-id","text":"The id parameter contains the shell id of an asset administration shell as base64url encoded string. Example: https://viewer.{your_tenant}.cloud.twinsphere.io/explore?id=aHR0cDovL215LmRvbWFpbi5jb20vYWFzaWQvMTIzNDU2Nzg","title":"Param: id"},{"location":"viewer-features/#param-submodel","text":"The submodel parameter contains the submodel id of the submodel to be opened as base64url encoded string. The submodel parameter must be combined with the id parameter (see above) and it has to refer to an existing submodel which is referenced by the chosen (aas) id. There are some special use case views containing data from multiple submodels. To directly open these special views via URL the following table states the respective values for the submodel parameter: Use Case View Parameter Value Digital Product Passport ZHBw Digital Battery Passport YnBw Example 1: https://viewer.{your_tenant}.cloud.twinsphere.io/explore?id=aHR0cDovL215LmRvbWFpbi5jb20vYWFzaWQvMTIzNDU2Nzg&submodel=aHR0cDovL215LmRvbWFpbi5jb20vc21pZC85ODc2NTQ Example 2: https://viewer.{your_tenant}}.cloud.twinsphere.io/explore?id=aHR0cDovL215LmRvbWFpbi5jb20vYWFzaWQvMTIzNDU2Nzg&submodel=YnBw","title":"Param: submodel"},{"location":"viewer-features/#param-embedded","text":"If set to true this parameter enables you to hide the AAS Viewer's header and navigation bar. The embedded parameter has to be combined with the id parameter (see above) and optionally may be combined with the submodel parameter as well. Example: https://viewer.{your_tenant}.cloud.twinsphere.io/explore?id=aHR0cDovL215LmRvbWFpbi5jb20vYWFzaWQvMTIzNDU2Nzg&embedded=true","title":"Param: embedded"},{"location":"viewer-features/#data-requirements","text":"Some AAS Viewer features rely on your data quality in order to work.","title":"Data Requirements"},{"location":"viewer-features/#property-units","text":"To display units of measurement in the AAS Viewer, your repository needs to include concept descriptions that define the semantics of properties within the submodels. These concept descriptions must embedded data specifications of the IEC61360 type (version 3). Within this specification, the unit of measurement must be specified in the \u201cUnit\u201d property in order to be displayed in square brackets behind the attribute name on all dedicated and generic views.","title":"Property Units"},{"location":"viewer-overview/","text":"twinsphere Viewer Overview The twinsphere Viewer is a mobile-first designed web viewer for asset administration shells. It is able to scan a QR-Code on a physical asset containing its globalAssetId , do the lookup of its digital twin by an AAS Discovery Service and get the twin's endpoints by querying an AAS Registry Service . It then gets the shell and all its referenced submodels and displays their data nicely to the clients screen. Login To login into the twinsphere Viewer for your tenant, you will need a twinsphere ID account. Please contact the twinsphere support team for the configuration. Alternatively you can use your own identity provider service, configuration instruction can be found in the identity provider documentation .","title":"Overview"},{"location":"viewer-overview/#twinsphere-viewer-overview","text":"The twinsphere Viewer is a mobile-first designed web viewer for asset administration shells. It is able to scan a QR-Code on a physical asset containing its globalAssetId , do the lookup of its digital twin by an AAS Discovery Service and get the twin's endpoints by querying an AAS Registry Service . It then gets the shell and all its referenced submodels and displays their data nicely to the clients screen.","title":"twinsphere Viewer Overview"},{"location":"viewer-overview/#login","text":"To login into the twinsphere Viewer for your tenant, you will need a twinsphere ID account. Please contact the twinsphere support team for the configuration. Alternatively you can use your own identity provider service, configuration instruction can be found in the identity provider documentation .","title":"Login"},{"location":"viewer-release-notes/","text":"Release Notes of twinsphere Viewer The twinsphere Viewer follows the semantic versioning format in the form major.minor.patch: https://semver.org/ \u29c9 . Viewer 2.2 02-Jun-2025 : Added display of unit behind attribute names in dedicated and generic views (see documentation on data requirements) [Bugfix] Embedded mode stays activated when navigating Viewer 2.1 10-Mar-2025 : Introduced new asset view Displays general asset and AAS information Lists all referenced submodels as clickable tiles to open their view as pop-up Display order of SM tiles now secures important info to be displayed first (like DPP, Nameplate or Technical Data) Reworked submodel views Removed generic view by introducing the asset view (which display all available submodels as tiles) If there is a dedicated view available for a submodel it is used as default Slider allows to switch to the generic representation instead of the dedicated view in this case Generic view is used to display a submodel if no dedicated view is available for it Completely reworked main navigation Added option to open AAS by entering its id (aas ID or global asset ID) Added option to browse a list of available digital twins and select one to be opened Revised bookmarking of digital twins: icon in header now adds and removes a bookmark on displayed AAS Introduced the \"Embedded Mode\" to hide header and navigation bars (URL parameter embedded=true ) [Bugfix] Direct links to an AAS or one of its submodels are working again [Bugfix] Removed requirement of a nameplate submodel for a shell to be displayed (any shell is now possible to be opened) [Bugfix] Adjusted height of expandable records element in generic view of time series submodels [Bugfix] Fixed rarely occurring caching problem which displayed submodels of last opened asset when navigating to a new one Viewer 2.0 Sep-2024 to Feb-2025 : Developed as integrated part of the twinsphere Server project see Cloud Release Notes tagged [Viewer] for details Viewer 1.0 Aug-2023 to Sep-2024 : developed in the context of the fair showcase \"follow the twin challenge\" in separate project no release notes available","title":"Release Notes"},{"location":"viewer-release-notes/#release-notes-of-twinsphere-viewer","text":"The twinsphere Viewer follows the semantic versioning format in the form major.minor.patch: https://semver.org/ \u29c9 .","title":"Release Notes of twinsphere Viewer"},{"location":"viewer-release-notes/#viewer-22","text":"02-Jun-2025 : Added display of unit behind attribute names in dedicated and generic views (see documentation on data requirements) [Bugfix] Embedded mode stays activated when navigating","title":"Viewer 2.2"},{"location":"viewer-release-notes/#viewer-21","text":"10-Mar-2025 : Introduced new asset view Displays general asset and AAS information Lists all referenced submodels as clickable tiles to open their view as pop-up Display order of SM tiles now secures important info to be displayed first (like DPP, Nameplate or Technical Data) Reworked submodel views Removed generic view by introducing the asset view (which display all available submodels as tiles) If there is a dedicated view available for a submodel it is used as default Slider allows to switch to the generic representation instead of the dedicated view in this case Generic view is used to display a submodel if no dedicated view is available for it Completely reworked main navigation Added option to open AAS by entering its id (aas ID or global asset ID) Added option to browse a list of available digital twins and select one to be opened Revised bookmarking of digital twins: icon in header now adds and removes a bookmark on displayed AAS Introduced the \"Embedded Mode\" to hide header and navigation bars (URL parameter embedded=true ) [Bugfix] Direct links to an AAS or one of its submodels are working again [Bugfix] Removed requirement of a nameplate submodel for a shell to be displayed (any shell is now possible to be opened) [Bugfix] Adjusted height of expandable records element in generic view of time series submodels [Bugfix] Fixed rarely occurring caching problem which displayed submodels of last opened asset when navigating to a new one","title":"Viewer 2.1"},{"location":"viewer-release-notes/#viewer-20","text":"Sep-2024 to Feb-2025 : Developed as integrated part of the twinsphere Server project see Cloud Release Notes tagged [Viewer] for details","title":"Viewer 2.0"},{"location":"viewer-release-notes/#viewer-10","text":"Aug-2023 to Sep-2024 : developed in the context of the fair showcase \"follow the twin challenge\" in separate project no release notes available","title":"Viewer 1.0"}]}